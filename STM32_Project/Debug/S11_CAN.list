
S11_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f170  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d04  0800f230  0800f230  0001f230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff34  0800ff34  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800ff34  0800ff34  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ff34  0800ff34  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff34  0800ff34  0001ff34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff38  0800ff38  0001ff38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800ff3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000347c  20000094  0800ffd0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003510  0800ffd0  00023510  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024441  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041f5  00000000  00000000  000444fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001be0  00000000  00000000  000486f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a10  00000000  00000000  0004a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b0e  00000000  00000000  0004bce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018013  00000000  00000000  000607f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b01b  00000000  00000000  00078809  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006da4  00000000  00000000  000f38a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f218 	.word	0x0800f218

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	0800f218 	.word	0x0800f218

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fe73 	bl	80020f0 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fdcb 	bl	8001fb0 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fe65 	bl	80020f0 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fe5b 	bl	80020f0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fded 	bl	8002028 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fde3 	bl	8002028 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fb8b 	bl	8000b94 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fb0d 	bl	8000aa8 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb7d 	bl	8000b94 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fb73 	bl	8000b94 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb1b 	bl	8000af8 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb11 	bl	8000af8 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_f2uiz>:
 80004e4:	219e      	movs	r1, #158	; 0x9e
 80004e6:	b510      	push	{r4, lr}
 80004e8:	05c9      	lsls	r1, r1, #23
 80004ea:	1c04      	adds	r4, r0, #0
 80004ec:	f7ff fff0 	bl	80004d0 <__aeabi_fcmpge>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d103      	bne.n	80004fc <__aeabi_f2uiz+0x18>
 80004f4:	1c20      	adds	r0, r4, #0
 80004f6:	f000 fe93 	bl	8001220 <__aeabi_f2iz>
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	219e      	movs	r1, #158	; 0x9e
 80004fe:	1c20      	adds	r0, r4, #0
 8000500:	05c9      	lsls	r1, r1, #23
 8000502:	f000 fcc9 	bl	8000e98 <__aeabi_fsub>
 8000506:	f000 fe8b 	bl	8001220 <__aeabi_f2iz>
 800050a:	2380      	movs	r3, #128	; 0x80
 800050c:	061b      	lsls	r3, r3, #24
 800050e:	469c      	mov	ip, r3
 8000510:	4460      	add	r0, ip
 8000512:	e7f2      	b.n	80004fa <__aeabi_f2uiz+0x16>

08000514 <__aeabi_d2uiz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <__aeabi_d2uiz+0x38>)
 800051a:	0004      	movs	r4, r0
 800051c:	000d      	movs	r5, r1
 800051e:	f7ff ff9d 	bl	800045c <__aeabi_dcmpge>
 8000522:	2800      	cmp	r0, #0
 8000524:	d104      	bne.n	8000530 <__aeabi_d2uiz+0x1c>
 8000526:	0020      	movs	r0, r4
 8000528:	0029      	movs	r1, r5
 800052a:	f002 fc03 	bl	8002d34 <__aeabi_d2iz>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <__aeabi_d2uiz+0x38>)
 8000532:	2200      	movs	r2, #0
 8000534:	0020      	movs	r0, r4
 8000536:	0029      	movs	r1, r5
 8000538:	f002 f8b4 	bl	80026a4 <__aeabi_dsub>
 800053c:	f002 fbfa 	bl	8002d34 <__aeabi_d2iz>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	061b      	lsls	r3, r3, #24
 8000544:	469c      	mov	ip, r3
 8000546:	4460      	add	r0, ip
 8000548:	e7f1      	b.n	800052e <__aeabi_d2uiz+0x1a>
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	41e00000 	.word	0x41e00000

08000550 <__aeabi_fadd>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	4647      	mov	r7, r8
 8000554:	46ce      	mov	lr, r9
 8000556:	0243      	lsls	r3, r0, #9
 8000558:	0a5b      	lsrs	r3, r3, #9
 800055a:	0044      	lsls	r4, r0, #1
 800055c:	0fc2      	lsrs	r2, r0, #31
 800055e:	469c      	mov	ip, r3
 8000560:	0048      	lsls	r0, r1, #1
 8000562:	00dd      	lsls	r5, r3, #3
 8000564:	024b      	lsls	r3, r1, #9
 8000566:	0e24      	lsrs	r4, r4, #24
 8000568:	0a5b      	lsrs	r3, r3, #9
 800056a:	0e00      	lsrs	r0, r0, #24
 800056c:	b580      	push	{r7, lr}
 800056e:	4698      	mov	r8, r3
 8000570:	0026      	movs	r6, r4
 8000572:	4691      	mov	r9, r2
 8000574:	0fc9      	lsrs	r1, r1, #31
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	1a27      	subs	r7, r4, r0
 800057a:	428a      	cmp	r2, r1
 800057c:	d029      	beq.n	80005d2 <__aeabi_fadd+0x82>
 800057e:	2f00      	cmp	r7, #0
 8000580:	dd15      	ble.n	80005ae <__aeabi_fadd+0x5e>
 8000582:	2800      	cmp	r0, #0
 8000584:	d14a      	bne.n	800061c <__aeabi_fadd+0xcc>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d000      	beq.n	800058c <__aeabi_fadd+0x3c>
 800058a:	e095      	b.n	80006b8 <__aeabi_fadd+0x168>
 800058c:	08ed      	lsrs	r5, r5, #3
 800058e:	2cff      	cmp	r4, #255	; 0xff
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0x44>
 8000592:	e088      	b.n	80006a6 <__aeabi_fadd+0x156>
 8000594:	026b      	lsls	r3, r5, #9
 8000596:	0a5b      	lsrs	r3, r3, #9
 8000598:	b2e6      	uxtb	r6, r4
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	05f6      	lsls	r6, r6, #23
 800059e:	0a58      	lsrs	r0, r3, #9
 80005a0:	4330      	orrs	r0, r6
 80005a2:	07d2      	lsls	r2, r2, #31
 80005a4:	4310      	orrs	r0, r2
 80005a6:	bc0c      	pop	{r2, r3}
 80005a8:	4690      	mov	r8, r2
 80005aa:	4699      	mov	r9, r3
 80005ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ae:	2f00      	cmp	r7, #0
 80005b0:	d000      	beq.n	80005b4 <__aeabi_fadd+0x64>
 80005b2:	e087      	b.n	80006c4 <__aeabi_fadd+0x174>
 80005b4:	1c60      	adds	r0, r4, #1
 80005b6:	b2c0      	uxtb	r0, r0
 80005b8:	2801      	cmp	r0, #1
 80005ba:	dc00      	bgt.n	80005be <__aeabi_fadd+0x6e>
 80005bc:	e0b6      	b.n	800072c <__aeabi_fadd+0x1dc>
 80005be:	1aee      	subs	r6, r5, r3
 80005c0:	0172      	lsls	r2, r6, #5
 80005c2:	d500      	bpl.n	80005c6 <__aeabi_fadd+0x76>
 80005c4:	e0c5      	b.n	8000752 <__aeabi_fadd+0x202>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d13d      	bne.n	8000646 <__aeabi_fadd+0xf6>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2600      	movs	r6, #0
 80005ce:	2300      	movs	r3, #0
 80005d0:	e7e3      	b.n	800059a <__aeabi_fadd+0x4a>
 80005d2:	2f00      	cmp	r7, #0
 80005d4:	dc00      	bgt.n	80005d8 <__aeabi_fadd+0x88>
 80005d6:	e096      	b.n	8000706 <__aeabi_fadd+0x1b6>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d05d      	beq.n	8000698 <__aeabi_fadd+0x148>
 80005dc:	2cff      	cmp	r4, #255	; 0xff
 80005de:	d060      	beq.n	80006a2 <__aeabi_fadd+0x152>
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	04d2      	lsls	r2, r2, #19
 80005e4:	4313      	orrs	r3, r2
 80005e6:	2f1b      	cmp	r7, #27
 80005e8:	dd00      	ble.n	80005ec <__aeabi_fadd+0x9c>
 80005ea:	e0ec      	b.n	80007c6 <__aeabi_fadd+0x276>
 80005ec:	2220      	movs	r2, #32
 80005ee:	1bd2      	subs	r2, r2, r7
 80005f0:	0018      	movs	r0, r3
 80005f2:	4093      	lsls	r3, r2
 80005f4:	40f8      	lsrs	r0, r7
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	4193      	sbcs	r3, r2
 80005fa:	4303      	orrs	r3, r0
 80005fc:	18ed      	adds	r5, r5, r3
 80005fe:	016b      	lsls	r3, r5, #5
 8000600:	d57b      	bpl.n	80006fa <__aeabi_fadd+0x1aa>
 8000602:	3401      	adds	r4, #1
 8000604:	2cff      	cmp	r4, #255	; 0xff
 8000606:	d100      	bne.n	800060a <__aeabi_fadd+0xba>
 8000608:	e0b7      	b.n	800077a <__aeabi_fadd+0x22a>
 800060a:	2201      	movs	r2, #1
 800060c:	2607      	movs	r6, #7
 800060e:	402a      	ands	r2, r5
 8000610:	086b      	lsrs	r3, r5, #1
 8000612:	4d9a      	ldr	r5, [pc, #616]	; (800087c <__aeabi_fadd+0x32c>)
 8000614:	401d      	ands	r5, r3
 8000616:	4315      	orrs	r5, r2
 8000618:	402e      	ands	r6, r5
 800061a:	e029      	b.n	8000670 <__aeabi_fadd+0x120>
 800061c:	2cff      	cmp	r4, #255	; 0xff
 800061e:	d0b5      	beq.n	800058c <__aeabi_fadd+0x3c>
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	04d2      	lsls	r2, r2, #19
 8000624:	4313      	orrs	r3, r2
 8000626:	2f1b      	cmp	r7, #27
 8000628:	dd00      	ble.n	800062c <__aeabi_fadd+0xdc>
 800062a:	e0b2      	b.n	8000792 <__aeabi_fadd+0x242>
 800062c:	2220      	movs	r2, #32
 800062e:	1bd2      	subs	r2, r2, r7
 8000630:	0019      	movs	r1, r3
 8000632:	4093      	lsls	r3, r2
 8000634:	40f9      	lsrs	r1, r7
 8000636:	1e5a      	subs	r2, r3, #1
 8000638:	4193      	sbcs	r3, r2
 800063a:	430b      	orrs	r3, r1
 800063c:	1aed      	subs	r5, r5, r3
 800063e:	016b      	lsls	r3, r5, #5
 8000640:	d55b      	bpl.n	80006fa <__aeabi_fadd+0x1aa>
 8000642:	01ad      	lsls	r5, r5, #6
 8000644:	09ae      	lsrs	r6, r5, #6
 8000646:	0030      	movs	r0, r6
 8000648:	f002 fcba 	bl	8002fc0 <__clzsi2>
 800064c:	3805      	subs	r0, #5
 800064e:	4086      	lsls	r6, r0
 8000650:	4284      	cmp	r4, r0
 8000652:	dc65      	bgt.n	8000720 <__aeabi_fadd+0x1d0>
 8000654:	1b04      	subs	r4, r0, r4
 8000656:	0033      	movs	r3, r6
 8000658:	2020      	movs	r0, #32
 800065a:	3401      	adds	r4, #1
 800065c:	40e3      	lsrs	r3, r4
 800065e:	1b04      	subs	r4, r0, r4
 8000660:	40a6      	lsls	r6, r4
 8000662:	1e75      	subs	r5, r6, #1
 8000664:	41ae      	sbcs	r6, r5
 8000666:	4333      	orrs	r3, r6
 8000668:	2607      	movs	r6, #7
 800066a:	001d      	movs	r5, r3
 800066c:	2400      	movs	r4, #0
 800066e:	401e      	ands	r6, r3
 8000670:	2201      	movs	r2, #1
 8000672:	464b      	mov	r3, r9
 8000674:	401a      	ands	r2, r3
 8000676:	2e00      	cmp	r6, #0
 8000678:	d004      	beq.n	8000684 <__aeabi_fadd+0x134>
 800067a:	230f      	movs	r3, #15
 800067c:	402b      	ands	r3, r5
 800067e:	2b04      	cmp	r3, #4
 8000680:	d000      	beq.n	8000684 <__aeabi_fadd+0x134>
 8000682:	3504      	adds	r5, #4
 8000684:	016b      	lsls	r3, r5, #5
 8000686:	d400      	bmi.n	800068a <__aeabi_fadd+0x13a>
 8000688:	e780      	b.n	800058c <__aeabi_fadd+0x3c>
 800068a:	3401      	adds	r4, #1
 800068c:	b2e6      	uxtb	r6, r4
 800068e:	2cff      	cmp	r4, #255	; 0xff
 8000690:	d12f      	bne.n	80006f2 <__aeabi_fadd+0x1a2>
 8000692:	26ff      	movs	r6, #255	; 0xff
 8000694:	2300      	movs	r3, #0
 8000696:	e780      	b.n	800059a <__aeabi_fadd+0x4a>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d152      	bne.n	8000742 <__aeabi_fadd+0x1f2>
 800069c:	2cff      	cmp	r4, #255	; 0xff
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0x152>
 80006a0:	e774      	b.n	800058c <__aeabi_fadd+0x3c>
 80006a2:	000a      	movs	r2, r1
 80006a4:	08ed      	lsrs	r5, r5, #3
 80006a6:	2d00      	cmp	r5, #0
 80006a8:	d0f3      	beq.n	8000692 <__aeabi_fadd+0x142>
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	03db      	lsls	r3, r3, #15
 80006ae:	432b      	orrs	r3, r5
 80006b0:	025b      	lsls	r3, r3, #9
 80006b2:	0a5b      	lsrs	r3, r3, #9
 80006b4:	26ff      	movs	r6, #255	; 0xff
 80006b6:	e770      	b.n	800059a <__aeabi_fadd+0x4a>
 80006b8:	3f01      	subs	r7, #1
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	d0be      	beq.n	800063c <__aeabi_fadd+0xec>
 80006be:	2cff      	cmp	r4, #255	; 0xff
 80006c0:	d1b1      	bne.n	8000626 <__aeabi_fadd+0xd6>
 80006c2:	e763      	b.n	800058c <__aeabi_fadd+0x3c>
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	d047      	beq.n	8000758 <__aeabi_fadd+0x208>
 80006c8:	28ff      	cmp	r0, #255	; 0xff
 80006ca:	d069      	beq.n	80007a0 <__aeabi_fadd+0x250>
 80006cc:	2480      	movs	r4, #128	; 0x80
 80006ce:	04e4      	lsls	r4, r4, #19
 80006d0:	427a      	negs	r2, r7
 80006d2:	4325      	orrs	r5, r4
 80006d4:	2a1b      	cmp	r2, #27
 80006d6:	dd00      	ble.n	80006da <__aeabi_fadd+0x18a>
 80006d8:	e0c5      	b.n	8000866 <__aeabi_fadd+0x316>
 80006da:	002c      	movs	r4, r5
 80006dc:	2620      	movs	r6, #32
 80006de:	40d4      	lsrs	r4, r2
 80006e0:	1ab2      	subs	r2, r6, r2
 80006e2:	4095      	lsls	r5, r2
 80006e4:	1e6a      	subs	r2, r5, #1
 80006e6:	4195      	sbcs	r5, r2
 80006e8:	4325      	orrs	r5, r4
 80006ea:	1b5d      	subs	r5, r3, r5
 80006ec:	0004      	movs	r4, r0
 80006ee:	4689      	mov	r9, r1
 80006f0:	e7a5      	b.n	800063e <__aeabi_fadd+0xee>
 80006f2:	01ab      	lsls	r3, r5, #6
 80006f4:	0a5b      	lsrs	r3, r3, #9
 80006f6:	e750      	b.n	800059a <__aeabi_fadd+0x4a>
 80006f8:	2400      	movs	r4, #0
 80006fa:	2201      	movs	r2, #1
 80006fc:	464b      	mov	r3, r9
 80006fe:	401a      	ands	r2, r3
 8000700:	076b      	lsls	r3, r5, #29
 8000702:	d1ba      	bne.n	800067a <__aeabi_fadd+0x12a>
 8000704:	e742      	b.n	800058c <__aeabi_fadd+0x3c>
 8000706:	2f00      	cmp	r7, #0
 8000708:	d13b      	bne.n	8000782 <__aeabi_fadd+0x232>
 800070a:	3401      	adds	r4, #1
 800070c:	b2e0      	uxtb	r0, r4
 800070e:	2801      	cmp	r0, #1
 8000710:	dd4a      	ble.n	80007a8 <__aeabi_fadd+0x258>
 8000712:	2cff      	cmp	r4, #255	; 0xff
 8000714:	d0bd      	beq.n	8000692 <__aeabi_fadd+0x142>
 8000716:	2607      	movs	r6, #7
 8000718:	18ed      	adds	r5, r5, r3
 800071a:	086d      	lsrs	r5, r5, #1
 800071c:	402e      	ands	r6, r5
 800071e:	e7a7      	b.n	8000670 <__aeabi_fadd+0x120>
 8000720:	2307      	movs	r3, #7
 8000722:	4d57      	ldr	r5, [pc, #348]	; (8000880 <__aeabi_fadd+0x330>)
 8000724:	1a24      	subs	r4, r4, r0
 8000726:	4035      	ands	r5, r6
 8000728:	401e      	ands	r6, r3
 800072a:	e7a1      	b.n	8000670 <__aeabi_fadd+0x120>
 800072c:	2c00      	cmp	r4, #0
 800072e:	d11b      	bne.n	8000768 <__aeabi_fadd+0x218>
 8000730:	2d00      	cmp	r5, #0
 8000732:	d16e      	bne.n	8000812 <__aeabi_fadd+0x2c2>
 8000734:	2b00      	cmp	r3, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x1ea>
 8000738:	e09a      	b.n	8000870 <__aeabi_fadd+0x320>
 800073a:	000a      	movs	r2, r1
 800073c:	001d      	movs	r5, r3
 800073e:	003c      	movs	r4, r7
 8000740:	e724      	b.n	800058c <__aeabi_fadd+0x3c>
 8000742:	3f01      	subs	r7, #1
 8000744:	2f00      	cmp	r7, #0
 8000746:	d100      	bne.n	800074a <__aeabi_fadd+0x1fa>
 8000748:	e758      	b.n	80005fc <__aeabi_fadd+0xac>
 800074a:	2cff      	cmp	r4, #255	; 0xff
 800074c:	d000      	beq.n	8000750 <__aeabi_fadd+0x200>
 800074e:	e74a      	b.n	80005e6 <__aeabi_fadd+0x96>
 8000750:	e7a7      	b.n	80006a2 <__aeabi_fadd+0x152>
 8000752:	1b5e      	subs	r6, r3, r5
 8000754:	4689      	mov	r9, r1
 8000756:	e776      	b.n	8000646 <__aeabi_fadd+0xf6>
 8000758:	2d00      	cmp	r5, #0
 800075a:	d11c      	bne.n	8000796 <__aeabi_fadd+0x246>
 800075c:	000a      	movs	r2, r1
 800075e:	28ff      	cmp	r0, #255	; 0xff
 8000760:	d01f      	beq.n	80007a2 <__aeabi_fadd+0x252>
 8000762:	0004      	movs	r4, r0
 8000764:	001d      	movs	r5, r3
 8000766:	e711      	b.n	800058c <__aeabi_fadd+0x3c>
 8000768:	2d00      	cmp	r5, #0
 800076a:	d15d      	bne.n	8000828 <__aeabi_fadd+0x2d8>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d117      	bne.n	80007a0 <__aeabi_fadd+0x250>
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	2200      	movs	r2, #0
 8000774:	03db      	lsls	r3, r3, #15
 8000776:	26ff      	movs	r6, #255	; 0xff
 8000778:	e70f      	b.n	800059a <__aeabi_fadd+0x4a>
 800077a:	000a      	movs	r2, r1
 800077c:	26ff      	movs	r6, #255	; 0xff
 800077e:	2300      	movs	r3, #0
 8000780:	e70b      	b.n	800059a <__aeabi_fadd+0x4a>
 8000782:	2c00      	cmp	r4, #0
 8000784:	d121      	bne.n	80007ca <__aeabi_fadd+0x27a>
 8000786:	2d00      	cmp	r5, #0
 8000788:	d166      	bne.n	8000858 <__aeabi_fadd+0x308>
 800078a:	28ff      	cmp	r0, #255	; 0xff
 800078c:	d1e9      	bne.n	8000762 <__aeabi_fadd+0x212>
 800078e:	001d      	movs	r5, r3
 8000790:	e787      	b.n	80006a2 <__aeabi_fadd+0x152>
 8000792:	2301      	movs	r3, #1
 8000794:	e752      	b.n	800063c <__aeabi_fadd+0xec>
 8000796:	1c7a      	adds	r2, r7, #1
 8000798:	d0a7      	beq.n	80006ea <__aeabi_fadd+0x19a>
 800079a:	43fa      	mvns	r2, r7
 800079c:	28ff      	cmp	r0, #255	; 0xff
 800079e:	d199      	bne.n	80006d4 <__aeabi_fadd+0x184>
 80007a0:	000a      	movs	r2, r1
 80007a2:	001d      	movs	r5, r3
 80007a4:	24ff      	movs	r4, #255	; 0xff
 80007a6:	e6f1      	b.n	800058c <__aeabi_fadd+0x3c>
 80007a8:	2e00      	cmp	r6, #0
 80007aa:	d121      	bne.n	80007f0 <__aeabi_fadd+0x2a0>
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d04f      	beq.n	8000850 <__aeabi_fadd+0x300>
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d04c      	beq.n	800084e <__aeabi_fadd+0x2fe>
 80007b4:	18ed      	adds	r5, r5, r3
 80007b6:	016b      	lsls	r3, r5, #5
 80007b8:	d59e      	bpl.n	80006f8 <__aeabi_fadd+0x1a8>
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <__aeabi_fadd+0x330>)
 80007bc:	3607      	adds	r6, #7
 80007be:	402e      	ands	r6, r5
 80007c0:	2401      	movs	r4, #1
 80007c2:	401d      	ands	r5, r3
 80007c4:	e754      	b.n	8000670 <__aeabi_fadd+0x120>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e718      	b.n	80005fc <__aeabi_fadd+0xac>
 80007ca:	28ff      	cmp	r0, #255	; 0xff
 80007cc:	d0df      	beq.n	800078e <__aeabi_fadd+0x23e>
 80007ce:	2480      	movs	r4, #128	; 0x80
 80007d0:	04e4      	lsls	r4, r4, #19
 80007d2:	427f      	negs	r7, r7
 80007d4:	4325      	orrs	r5, r4
 80007d6:	2f1b      	cmp	r7, #27
 80007d8:	dc4d      	bgt.n	8000876 <__aeabi_fadd+0x326>
 80007da:	2620      	movs	r6, #32
 80007dc:	1bf6      	subs	r6, r6, r7
 80007de:	002c      	movs	r4, r5
 80007e0:	40b5      	lsls	r5, r6
 80007e2:	40fc      	lsrs	r4, r7
 80007e4:	1e6a      	subs	r2, r5, #1
 80007e6:	4195      	sbcs	r5, r2
 80007e8:	4325      	orrs	r5, r4
 80007ea:	18ed      	adds	r5, r5, r3
 80007ec:	0004      	movs	r4, r0
 80007ee:	e706      	b.n	80005fe <__aeabi_fadd+0xae>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d0cc      	beq.n	800078e <__aeabi_fadd+0x23e>
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fadd+0x2aa>
 80007f8:	e753      	b.n	80006a2 <__aeabi_fadd+0x152>
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4660      	mov	r0, ip
 80007fe:	03c9      	lsls	r1, r1, #15
 8000800:	4208      	tst	r0, r1
 8000802:	d003      	beq.n	800080c <__aeabi_fadd+0x2bc>
 8000804:	4640      	mov	r0, r8
 8000806:	4208      	tst	r0, r1
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0x2bc>
 800080a:	001d      	movs	r5, r3
 800080c:	2101      	movs	r1, #1
 800080e:	4011      	ands	r1, r2
 8000810:	e747      	b.n	80006a2 <__aeabi_fadd+0x152>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x2c8>
 8000816:	e6b9      	b.n	800058c <__aeabi_fadd+0x3c>
 8000818:	1aea      	subs	r2, r5, r3
 800081a:	0150      	lsls	r0, r2, #5
 800081c:	d525      	bpl.n	800086a <__aeabi_fadd+0x31a>
 800081e:	2607      	movs	r6, #7
 8000820:	1b5d      	subs	r5, r3, r5
 8000822:	402e      	ands	r6, r5
 8000824:	4689      	mov	r9, r1
 8000826:	e723      	b.n	8000670 <__aeabi_fadd+0x120>
 8000828:	24ff      	movs	r4, #255	; 0xff
 800082a:	2b00      	cmp	r3, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fadd+0x2e0>
 800082e:	e6ad      	b.n	800058c <__aeabi_fadd+0x3c>
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	4660      	mov	r0, ip
 8000834:	03d2      	lsls	r2, r2, #15
 8000836:	4210      	tst	r0, r2
 8000838:	d004      	beq.n	8000844 <__aeabi_fadd+0x2f4>
 800083a:	4640      	mov	r0, r8
 800083c:	4210      	tst	r0, r2
 800083e:	d101      	bne.n	8000844 <__aeabi_fadd+0x2f4>
 8000840:	001d      	movs	r5, r3
 8000842:	4689      	mov	r9, r1
 8000844:	2201      	movs	r2, #1
 8000846:	464b      	mov	r3, r9
 8000848:	24ff      	movs	r4, #255	; 0xff
 800084a:	401a      	ands	r2, r3
 800084c:	e69e      	b.n	800058c <__aeabi_fadd+0x3c>
 800084e:	002b      	movs	r3, r5
 8000850:	08dd      	lsrs	r5, r3, #3
 8000852:	000a      	movs	r2, r1
 8000854:	2400      	movs	r4, #0
 8000856:	e69d      	b.n	8000594 <__aeabi_fadd+0x44>
 8000858:	1c7a      	adds	r2, r7, #1
 800085a:	d0c6      	beq.n	80007ea <__aeabi_fadd+0x29a>
 800085c:	43ff      	mvns	r7, r7
 800085e:	28ff      	cmp	r0, #255	; 0xff
 8000860:	d1b9      	bne.n	80007d6 <__aeabi_fadd+0x286>
 8000862:	001d      	movs	r5, r3
 8000864:	e71d      	b.n	80006a2 <__aeabi_fadd+0x152>
 8000866:	2501      	movs	r5, #1
 8000868:	e73f      	b.n	80006ea <__aeabi_fadd+0x19a>
 800086a:	1e15      	subs	r5, r2, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_fadd+0x320>
 800086e:	e744      	b.n	80006fa <__aeabi_fadd+0x1aa>
 8000870:	2200      	movs	r2, #0
 8000872:	2300      	movs	r3, #0
 8000874:	e691      	b.n	800059a <__aeabi_fadd+0x4a>
 8000876:	2501      	movs	r5, #1
 8000878:	e7b7      	b.n	80007ea <__aeabi_fadd+0x29a>
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	7dffffff 	.word	0x7dffffff
 8000880:	fbffffff 	.word	0xfbffffff

08000884 <__aeabi_fdiv>:
 8000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000886:	4657      	mov	r7, sl
 8000888:	464e      	mov	r6, r9
 800088a:	4645      	mov	r5, r8
 800088c:	46de      	mov	lr, fp
 800088e:	0244      	lsls	r4, r0, #9
 8000890:	b5e0      	push	{r5, r6, r7, lr}
 8000892:	0046      	lsls	r6, r0, #1
 8000894:	4688      	mov	r8, r1
 8000896:	0a64      	lsrs	r4, r4, #9
 8000898:	0e36      	lsrs	r6, r6, #24
 800089a:	0fc7      	lsrs	r7, r0, #31
 800089c:	2e00      	cmp	r6, #0
 800089e:	d063      	beq.n	8000968 <__aeabi_fdiv+0xe4>
 80008a0:	2eff      	cmp	r6, #255	; 0xff
 80008a2:	d024      	beq.n	80008ee <__aeabi_fdiv+0x6a>
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	00e4      	lsls	r4, r4, #3
 80008a8:	04db      	lsls	r3, r3, #19
 80008aa:	431c      	orrs	r4, r3
 80008ac:	2300      	movs	r3, #0
 80008ae:	4699      	mov	r9, r3
 80008b0:	469b      	mov	fp, r3
 80008b2:	3e7f      	subs	r6, #127	; 0x7f
 80008b4:	4643      	mov	r3, r8
 80008b6:	4642      	mov	r2, r8
 80008b8:	025d      	lsls	r5, r3, #9
 80008ba:	0fd2      	lsrs	r2, r2, #31
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	0a6d      	lsrs	r5, r5, #9
 80008c0:	0e1b      	lsrs	r3, r3, #24
 80008c2:	4690      	mov	r8, r2
 80008c4:	4692      	mov	sl, r2
 80008c6:	d065      	beq.n	8000994 <__aeabi_fdiv+0x110>
 80008c8:	2bff      	cmp	r3, #255	; 0xff
 80008ca:	d055      	beq.n	8000978 <__aeabi_fdiv+0xf4>
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	2100      	movs	r1, #0
 80008d0:	00ed      	lsls	r5, r5, #3
 80008d2:	04d2      	lsls	r2, r2, #19
 80008d4:	3b7f      	subs	r3, #127	; 0x7f
 80008d6:	4315      	orrs	r5, r2
 80008d8:	1af6      	subs	r6, r6, r3
 80008da:	4643      	mov	r3, r8
 80008dc:	464a      	mov	r2, r9
 80008de:	407b      	eors	r3, r7
 80008e0:	2a0f      	cmp	r2, #15
 80008e2:	d900      	bls.n	80008e6 <__aeabi_fdiv+0x62>
 80008e4:	e08d      	b.n	8000a02 <__aeabi_fdiv+0x17e>
 80008e6:	486d      	ldr	r0, [pc, #436]	; (8000a9c <__aeabi_fdiv+0x218>)
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	5882      	ldr	r2, [r0, r2]
 80008ec:	4697      	mov	pc, r2
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d154      	bne.n	800099c <__aeabi_fdiv+0x118>
 80008f2:	2308      	movs	r3, #8
 80008f4:	4699      	mov	r9, r3
 80008f6:	3b06      	subs	r3, #6
 80008f8:	26ff      	movs	r6, #255	; 0xff
 80008fa:	469b      	mov	fp, r3
 80008fc:	e7da      	b.n	80008b4 <__aeabi_fdiv+0x30>
 80008fe:	2500      	movs	r5, #0
 8000900:	4653      	mov	r3, sl
 8000902:	2902      	cmp	r1, #2
 8000904:	d01b      	beq.n	800093e <__aeabi_fdiv+0xba>
 8000906:	2903      	cmp	r1, #3
 8000908:	d100      	bne.n	800090c <__aeabi_fdiv+0x88>
 800090a:	e0bf      	b.n	8000a8c <__aeabi_fdiv+0x208>
 800090c:	2901      	cmp	r1, #1
 800090e:	d028      	beq.n	8000962 <__aeabi_fdiv+0xde>
 8000910:	0030      	movs	r0, r6
 8000912:	307f      	adds	r0, #127	; 0x7f
 8000914:	2800      	cmp	r0, #0
 8000916:	dd20      	ble.n	800095a <__aeabi_fdiv+0xd6>
 8000918:	076a      	lsls	r2, r5, #29
 800091a:	d004      	beq.n	8000926 <__aeabi_fdiv+0xa2>
 800091c:	220f      	movs	r2, #15
 800091e:	402a      	ands	r2, r5
 8000920:	2a04      	cmp	r2, #4
 8000922:	d000      	beq.n	8000926 <__aeabi_fdiv+0xa2>
 8000924:	3504      	adds	r5, #4
 8000926:	012a      	lsls	r2, r5, #4
 8000928:	d503      	bpl.n	8000932 <__aeabi_fdiv+0xae>
 800092a:	0030      	movs	r0, r6
 800092c:	4a5c      	ldr	r2, [pc, #368]	; (8000aa0 <__aeabi_fdiv+0x21c>)
 800092e:	3080      	adds	r0, #128	; 0x80
 8000930:	4015      	ands	r5, r2
 8000932:	28fe      	cmp	r0, #254	; 0xfe
 8000934:	dc03      	bgt.n	800093e <__aeabi_fdiv+0xba>
 8000936:	01ac      	lsls	r4, r5, #6
 8000938:	0a64      	lsrs	r4, r4, #9
 800093a:	b2c2      	uxtb	r2, r0
 800093c:	e001      	b.n	8000942 <__aeabi_fdiv+0xbe>
 800093e:	22ff      	movs	r2, #255	; 0xff
 8000940:	2400      	movs	r4, #0
 8000942:	0264      	lsls	r4, r4, #9
 8000944:	05d2      	lsls	r2, r2, #23
 8000946:	0a60      	lsrs	r0, r4, #9
 8000948:	07db      	lsls	r3, r3, #31
 800094a:	4310      	orrs	r0, r2
 800094c:	4318      	orrs	r0, r3
 800094e:	bc3c      	pop	{r2, r3, r4, r5}
 8000950:	4690      	mov	r8, r2
 8000952:	4699      	mov	r9, r3
 8000954:	46a2      	mov	sl, r4
 8000956:	46ab      	mov	fp, r5
 8000958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800095a:	2201      	movs	r2, #1
 800095c:	1a10      	subs	r0, r2, r0
 800095e:	281b      	cmp	r0, #27
 8000960:	dd7c      	ble.n	8000a5c <__aeabi_fdiv+0x1d8>
 8000962:	2200      	movs	r2, #0
 8000964:	2400      	movs	r4, #0
 8000966:	e7ec      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000968:	2c00      	cmp	r4, #0
 800096a:	d11d      	bne.n	80009a8 <__aeabi_fdiv+0x124>
 800096c:	2304      	movs	r3, #4
 800096e:	4699      	mov	r9, r3
 8000970:	3b03      	subs	r3, #3
 8000972:	2600      	movs	r6, #0
 8000974:	469b      	mov	fp, r3
 8000976:	e79d      	b.n	80008b4 <__aeabi_fdiv+0x30>
 8000978:	3eff      	subs	r6, #255	; 0xff
 800097a:	2d00      	cmp	r5, #0
 800097c:	d120      	bne.n	80009c0 <__aeabi_fdiv+0x13c>
 800097e:	2102      	movs	r1, #2
 8000980:	4643      	mov	r3, r8
 8000982:	464a      	mov	r2, r9
 8000984:	407b      	eors	r3, r7
 8000986:	430a      	orrs	r2, r1
 8000988:	2a0f      	cmp	r2, #15
 800098a:	d8d8      	bhi.n	800093e <__aeabi_fdiv+0xba>
 800098c:	4845      	ldr	r0, [pc, #276]	; (8000aa4 <__aeabi_fdiv+0x220>)
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	5882      	ldr	r2, [r0, r2]
 8000992:	4697      	mov	pc, r2
 8000994:	2d00      	cmp	r5, #0
 8000996:	d119      	bne.n	80009cc <__aeabi_fdiv+0x148>
 8000998:	2101      	movs	r1, #1
 800099a:	e7f1      	b.n	8000980 <__aeabi_fdiv+0xfc>
 800099c:	230c      	movs	r3, #12
 800099e:	4699      	mov	r9, r3
 80009a0:	3b09      	subs	r3, #9
 80009a2:	26ff      	movs	r6, #255	; 0xff
 80009a4:	469b      	mov	fp, r3
 80009a6:	e785      	b.n	80008b4 <__aeabi_fdiv+0x30>
 80009a8:	0020      	movs	r0, r4
 80009aa:	f002 fb09 	bl	8002fc0 <__clzsi2>
 80009ae:	2676      	movs	r6, #118	; 0x76
 80009b0:	1f43      	subs	r3, r0, #5
 80009b2:	409c      	lsls	r4, r3
 80009b4:	2300      	movs	r3, #0
 80009b6:	4276      	negs	r6, r6
 80009b8:	1a36      	subs	r6, r6, r0
 80009ba:	4699      	mov	r9, r3
 80009bc:	469b      	mov	fp, r3
 80009be:	e779      	b.n	80008b4 <__aeabi_fdiv+0x30>
 80009c0:	464a      	mov	r2, r9
 80009c2:	2303      	movs	r3, #3
 80009c4:	431a      	orrs	r2, r3
 80009c6:	4691      	mov	r9, r2
 80009c8:	2103      	movs	r1, #3
 80009ca:	e786      	b.n	80008da <__aeabi_fdiv+0x56>
 80009cc:	0028      	movs	r0, r5
 80009ce:	f002 faf7 	bl	8002fc0 <__clzsi2>
 80009d2:	1f43      	subs	r3, r0, #5
 80009d4:	1836      	adds	r6, r6, r0
 80009d6:	409d      	lsls	r5, r3
 80009d8:	3676      	adds	r6, #118	; 0x76
 80009da:	2100      	movs	r1, #0
 80009dc:	e77d      	b.n	80008da <__aeabi_fdiv+0x56>
 80009de:	2480      	movs	r4, #128	; 0x80
 80009e0:	2300      	movs	r3, #0
 80009e2:	03e4      	lsls	r4, r4, #15
 80009e4:	22ff      	movs	r2, #255	; 0xff
 80009e6:	e7ac      	b.n	8000942 <__aeabi_fdiv+0xbe>
 80009e8:	2500      	movs	r5, #0
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	03db      	lsls	r3, r3, #15
 80009ee:	421c      	tst	r4, r3
 80009f0:	d028      	beq.n	8000a44 <__aeabi_fdiv+0x1c0>
 80009f2:	421d      	tst	r5, r3
 80009f4:	d126      	bne.n	8000a44 <__aeabi_fdiv+0x1c0>
 80009f6:	432b      	orrs	r3, r5
 80009f8:	025c      	lsls	r4, r3, #9
 80009fa:	0a64      	lsrs	r4, r4, #9
 80009fc:	4643      	mov	r3, r8
 80009fe:	22ff      	movs	r2, #255	; 0xff
 8000a00:	e79f      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000a02:	0162      	lsls	r2, r4, #5
 8000a04:	016c      	lsls	r4, r5, #5
 8000a06:	42a2      	cmp	r2, r4
 8000a08:	d224      	bcs.n	8000a54 <__aeabi_fdiv+0x1d0>
 8000a0a:	211b      	movs	r1, #27
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	3e01      	subs	r6, #1
 8000a10:	2701      	movs	r7, #1
 8000a12:	0010      	movs	r0, r2
 8000a14:	006d      	lsls	r5, r5, #1
 8000a16:	0052      	lsls	r2, r2, #1
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	db01      	blt.n	8000a20 <__aeabi_fdiv+0x19c>
 8000a1c:	4294      	cmp	r4, r2
 8000a1e:	d801      	bhi.n	8000a24 <__aeabi_fdiv+0x1a0>
 8000a20:	1b12      	subs	r2, r2, r4
 8000a22:	433d      	orrs	r5, r7
 8000a24:	3901      	subs	r1, #1
 8000a26:	2900      	cmp	r1, #0
 8000a28:	d1f3      	bne.n	8000a12 <__aeabi_fdiv+0x18e>
 8000a2a:	0014      	movs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	4325      	orrs	r5, r4
 8000a32:	e76d      	b.n	8000910 <__aeabi_fdiv+0x8c>
 8000a34:	46ba      	mov	sl, r7
 8000a36:	4659      	mov	r1, fp
 8000a38:	0025      	movs	r5, r4
 8000a3a:	4653      	mov	r3, sl
 8000a3c:	2902      	cmp	r1, #2
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fdiv+0x1be>
 8000a40:	e761      	b.n	8000906 <__aeabi_fdiv+0x82>
 8000a42:	e77c      	b.n	800093e <__aeabi_fdiv+0xba>
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	03db      	lsls	r3, r3, #15
 8000a48:	431c      	orrs	r4, r3
 8000a4a:	0264      	lsls	r4, r4, #9
 8000a4c:	0a64      	lsrs	r4, r4, #9
 8000a4e:	003b      	movs	r3, r7
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	e776      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000a54:	1b12      	subs	r2, r2, r4
 8000a56:	211a      	movs	r1, #26
 8000a58:	2501      	movs	r5, #1
 8000a5a:	e7d9      	b.n	8000a10 <__aeabi_fdiv+0x18c>
 8000a5c:	369e      	adds	r6, #158	; 0x9e
 8000a5e:	002a      	movs	r2, r5
 8000a60:	40b5      	lsls	r5, r6
 8000a62:	002c      	movs	r4, r5
 8000a64:	40c2      	lsrs	r2, r0
 8000a66:	1e65      	subs	r5, r4, #1
 8000a68:	41ac      	sbcs	r4, r5
 8000a6a:	4314      	orrs	r4, r2
 8000a6c:	0762      	lsls	r2, r4, #29
 8000a6e:	d004      	beq.n	8000a7a <__aeabi_fdiv+0x1f6>
 8000a70:	220f      	movs	r2, #15
 8000a72:	4022      	ands	r2, r4
 8000a74:	2a04      	cmp	r2, #4
 8000a76:	d000      	beq.n	8000a7a <__aeabi_fdiv+0x1f6>
 8000a78:	3404      	adds	r4, #4
 8000a7a:	0162      	lsls	r2, r4, #5
 8000a7c:	d403      	bmi.n	8000a86 <__aeabi_fdiv+0x202>
 8000a7e:	01a4      	lsls	r4, r4, #6
 8000a80:	0a64      	lsrs	r4, r4, #9
 8000a82:	2200      	movs	r2, #0
 8000a84:	e75d      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000a86:	2201      	movs	r2, #1
 8000a88:	2400      	movs	r4, #0
 8000a8a:	e75a      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000a8c:	2480      	movs	r4, #128	; 0x80
 8000a8e:	03e4      	lsls	r4, r4, #15
 8000a90:	432c      	orrs	r4, r5
 8000a92:	0264      	lsls	r4, r4, #9
 8000a94:	0a64      	lsrs	r4, r4, #9
 8000a96:	22ff      	movs	r2, #255	; 0xff
 8000a98:	e753      	b.n	8000942 <__aeabi_fdiv+0xbe>
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	0800f350 	.word	0x0800f350
 8000aa0:	f7ffffff 	.word	0xf7ffffff
 8000aa4:	0800f390 	.word	0x0800f390

08000aa8 <__eqsf2>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	0042      	lsls	r2, r0, #1
 8000aac:	024e      	lsls	r6, r1, #9
 8000aae:	004c      	lsls	r4, r1, #1
 8000ab0:	0245      	lsls	r5, r0, #9
 8000ab2:	0a6d      	lsrs	r5, r5, #9
 8000ab4:	0e12      	lsrs	r2, r2, #24
 8000ab6:	0fc3      	lsrs	r3, r0, #31
 8000ab8:	0a76      	lsrs	r6, r6, #9
 8000aba:	0e24      	lsrs	r4, r4, #24
 8000abc:	0fc9      	lsrs	r1, r1, #31
 8000abe:	2aff      	cmp	r2, #255	; 0xff
 8000ac0:	d00f      	beq.n	8000ae2 <__eqsf2+0x3a>
 8000ac2:	2cff      	cmp	r4, #255	; 0xff
 8000ac4:	d011      	beq.n	8000aea <__eqsf2+0x42>
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	d000      	beq.n	8000ace <__eqsf2+0x26>
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d1fc      	bne.n	8000acc <__eqsf2+0x24>
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d00d      	beq.n	8000af2 <__eqsf2+0x4a>
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	d1f8      	bne.n	8000acc <__eqsf2+0x24>
 8000ada:	0028      	movs	r0, r5
 8000adc:	1e45      	subs	r5, r0, #1
 8000ade:	41a8      	sbcs	r0, r5
 8000ae0:	e7f4      	b.n	8000acc <__eqsf2+0x24>
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d1f1      	bne.n	8000acc <__eqsf2+0x24>
 8000ae8:	e7eb      	b.n	8000ac2 <__eqsf2+0x1a>
 8000aea:	2001      	movs	r0, #1
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d1ed      	bne.n	8000acc <__eqsf2+0x24>
 8000af0:	e7e9      	b.n	8000ac6 <__eqsf2+0x1e>
 8000af2:	2000      	movs	r0, #0
 8000af4:	e7ea      	b.n	8000acc <__eqsf2+0x24>
 8000af6:	46c0      	nop			; (mov r8, r8)

08000af8 <__gesf2>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	004a      	lsls	r2, r1, #1
 8000afc:	024e      	lsls	r6, r1, #9
 8000afe:	0245      	lsls	r5, r0, #9
 8000b00:	0044      	lsls	r4, r0, #1
 8000b02:	0a6d      	lsrs	r5, r5, #9
 8000b04:	0e24      	lsrs	r4, r4, #24
 8000b06:	0fc3      	lsrs	r3, r0, #31
 8000b08:	0a76      	lsrs	r6, r6, #9
 8000b0a:	0e12      	lsrs	r2, r2, #24
 8000b0c:	0fc9      	lsrs	r1, r1, #31
 8000b0e:	2cff      	cmp	r4, #255	; 0xff
 8000b10:	d015      	beq.n	8000b3e <__gesf2+0x46>
 8000b12:	2aff      	cmp	r2, #255	; 0xff
 8000b14:	d00e      	beq.n	8000b34 <__gesf2+0x3c>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d115      	bne.n	8000b46 <__gesf2+0x4e>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d101      	bne.n	8000b22 <__gesf2+0x2a>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d01c      	beq.n	8000b5c <__gesf2+0x64>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d014      	beq.n	8000b50 <__gesf2+0x58>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d027      	beq.n	8000b7a <__gesf2+0x82>
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	4018      	ands	r0, r3
 8000b30:	3801      	subs	r0, #1
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d0ee      	beq.n	8000b16 <__gesf2+0x1e>
 8000b38:	2002      	movs	r0, #2
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	e7f9      	b.n	8000b32 <__gesf2+0x3a>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d1fa      	bne.n	8000b38 <__gesf2+0x40>
 8000b42:	2aff      	cmp	r2, #255	; 0xff
 8000b44:	d00e      	beq.n	8000b64 <__gesf2+0x6c>
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	d10e      	bne.n	8000b68 <__gesf2+0x70>
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d0ed      	beq.n	8000b2a <__gesf2+0x32>
 8000b4e:	e00b      	b.n	8000b68 <__gesf2+0x70>
 8000b50:	2301      	movs	r3, #1
 8000b52:	3901      	subs	r1, #1
 8000b54:	4399      	bics	r1, r3
 8000b56:	0008      	movs	r0, r1
 8000b58:	3001      	adds	r0, #1
 8000b5a:	e7ea      	b.n	8000b32 <__gesf2+0x3a>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e7      	beq.n	8000b32 <__gesf2+0x3a>
 8000b62:	e7e2      	b.n	8000b2a <__gesf2+0x32>
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d1e7      	bne.n	8000b38 <__gesf2+0x40>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	d1de      	bne.n	8000b2a <__gesf2+0x32>
 8000b6c:	4294      	cmp	r4, r2
 8000b6e:	dd05      	ble.n	8000b7c <__gesf2+0x84>
 8000b70:	2102      	movs	r1, #2
 8000b72:	1e58      	subs	r0, r3, #1
 8000b74:	4008      	ands	r0, r1
 8000b76:	3801      	subs	r0, #1
 8000b78:	e7db      	b.n	8000b32 <__gesf2+0x3a>
 8000b7a:	2400      	movs	r4, #0
 8000b7c:	42a2      	cmp	r2, r4
 8000b7e:	dc04      	bgt.n	8000b8a <__gesf2+0x92>
 8000b80:	42b5      	cmp	r5, r6
 8000b82:	d8d2      	bhi.n	8000b2a <__gesf2+0x32>
 8000b84:	2000      	movs	r0, #0
 8000b86:	42b5      	cmp	r5, r6
 8000b88:	d2d3      	bcs.n	8000b32 <__gesf2+0x3a>
 8000b8a:	1e58      	subs	r0, r3, #1
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	4398      	bics	r0, r3
 8000b90:	3001      	adds	r0, #1
 8000b92:	e7ce      	b.n	8000b32 <__gesf2+0x3a>

08000b94 <__lesf2>:
 8000b94:	b530      	push	{r4, r5, lr}
 8000b96:	0042      	lsls	r2, r0, #1
 8000b98:	0244      	lsls	r4, r0, #9
 8000b9a:	024d      	lsls	r5, r1, #9
 8000b9c:	0fc3      	lsrs	r3, r0, #31
 8000b9e:	0048      	lsls	r0, r1, #1
 8000ba0:	0a64      	lsrs	r4, r4, #9
 8000ba2:	0e12      	lsrs	r2, r2, #24
 8000ba4:	0a6d      	lsrs	r5, r5, #9
 8000ba6:	0e00      	lsrs	r0, r0, #24
 8000ba8:	0fc9      	lsrs	r1, r1, #31
 8000baa:	2aff      	cmp	r2, #255	; 0xff
 8000bac:	d012      	beq.n	8000bd4 <__lesf2+0x40>
 8000bae:	28ff      	cmp	r0, #255	; 0xff
 8000bb0:	d00c      	beq.n	8000bcc <__lesf2+0x38>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d112      	bne.n	8000bdc <__lesf2+0x48>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d119      	bne.n	8000bee <__lesf2+0x5a>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d117      	bne.n	8000bee <__lesf2+0x5a>
 8000bbe:	2c00      	cmp	r4, #0
 8000bc0:	d02b      	beq.n	8000c1a <__lesf2+0x86>
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	4018      	ands	r0, r3
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e026      	b.n	8000c1a <__lesf2+0x86>
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d0f0      	beq.n	8000bb2 <__lesf2+0x1e>
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	e022      	b.n	8000c1a <__lesf2+0x86>
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d1fb      	bne.n	8000bd0 <__lesf2+0x3c>
 8000bd8:	28ff      	cmp	r0, #255	; 0xff
 8000bda:	d01f      	beq.n	8000c1c <__lesf2+0x88>
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d11f      	bne.n	8000c20 <__lesf2+0x8c>
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d11d      	bne.n	8000c20 <__lesf2+0x8c>
 8000be4:	2002      	movs	r0, #2
 8000be6:	3b01      	subs	r3, #1
 8000be8:	4018      	ands	r0, r3
 8000bea:	3801      	subs	r0, #1
 8000bec:	e015      	b.n	8000c1a <__lesf2+0x86>
 8000bee:	2c00      	cmp	r4, #0
 8000bf0:	d00e      	beq.n	8000c10 <__lesf2+0x7c>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d1e5      	bne.n	8000bc2 <__lesf2+0x2e>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	dc04      	bgt.n	8000c06 <__lesf2+0x72>
 8000bfc:	42ac      	cmp	r4, r5
 8000bfe:	d8e0      	bhi.n	8000bc2 <__lesf2+0x2e>
 8000c00:	2000      	movs	r0, #0
 8000c02:	42ac      	cmp	r4, r5
 8000c04:	d209      	bcs.n	8000c1a <__lesf2+0x86>
 8000c06:	1e58      	subs	r0, r3, #1
 8000c08:	2301      	movs	r3, #1
 8000c0a:	4398      	bics	r0, r3
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	e004      	b.n	8000c1a <__lesf2+0x86>
 8000c10:	2301      	movs	r3, #1
 8000c12:	3901      	subs	r1, #1
 8000c14:	4399      	bics	r1, r3
 8000c16:	0008      	movs	r0, r1
 8000c18:	3001      	adds	r0, #1
 8000c1a:	bd30      	pop	{r4, r5, pc}
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d1d7      	bne.n	8000bd0 <__lesf2+0x3c>
 8000c20:	428b      	cmp	r3, r1
 8000c22:	d1ce      	bne.n	8000bc2 <__lesf2+0x2e>
 8000c24:	4282      	cmp	r2, r0
 8000c26:	dde7      	ble.n	8000bf8 <__lesf2+0x64>
 8000c28:	2102      	movs	r1, #2
 8000c2a:	1e58      	subs	r0, r3, #1
 8000c2c:	4008      	ands	r0, r1
 8000c2e:	3801      	subs	r0, #1
 8000c30:	e7f3      	b.n	8000c1a <__lesf2+0x86>
 8000c32:	46c0      	nop			; (mov r8, r8)

08000c34 <__aeabi_fmul>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	464e      	mov	r6, r9
 8000c38:	4657      	mov	r7, sl
 8000c3a:	4645      	mov	r5, r8
 8000c3c:	46de      	mov	lr, fp
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	0243      	lsls	r3, r0, #9
 8000c42:	0a5b      	lsrs	r3, r3, #9
 8000c44:	0045      	lsls	r5, r0, #1
 8000c46:	b083      	sub	sp, #12
 8000c48:	1c0f      	adds	r7, r1, #0
 8000c4a:	4699      	mov	r9, r3
 8000c4c:	0e2d      	lsrs	r5, r5, #24
 8000c4e:	0fc6      	lsrs	r6, r0, #31
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d057      	beq.n	8000d04 <__aeabi_fmul+0xd0>
 8000c54:	2dff      	cmp	r5, #255	; 0xff
 8000c56:	d024      	beq.n	8000ca2 <__aeabi_fmul+0x6e>
 8000c58:	2080      	movs	r0, #128	; 0x80
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	04c0      	lsls	r0, r0, #19
 8000c5e:	4318      	orrs	r0, r3
 8000c60:	2300      	movs	r3, #0
 8000c62:	4681      	mov	r9, r0
 8000c64:	469a      	mov	sl, r3
 8000c66:	469b      	mov	fp, r3
 8000c68:	3d7f      	subs	r5, #127	; 0x7f
 8000c6a:	027c      	lsls	r4, r7, #9
 8000c6c:	007a      	lsls	r2, r7, #1
 8000c6e:	0ffb      	lsrs	r3, r7, #31
 8000c70:	0a64      	lsrs	r4, r4, #9
 8000c72:	0e12      	lsrs	r2, r2, #24
 8000c74:	4698      	mov	r8, r3
 8000c76:	d023      	beq.n	8000cc0 <__aeabi_fmul+0x8c>
 8000c78:	2aff      	cmp	r2, #255	; 0xff
 8000c7a:	d04b      	beq.n	8000d14 <__aeabi_fmul+0xe0>
 8000c7c:	00e3      	lsls	r3, r4, #3
 8000c7e:	2480      	movs	r4, #128	; 0x80
 8000c80:	2000      	movs	r0, #0
 8000c82:	04e4      	lsls	r4, r4, #19
 8000c84:	3a7f      	subs	r2, #127	; 0x7f
 8000c86:	431c      	orrs	r4, r3
 8000c88:	18ad      	adds	r5, r5, r2
 8000c8a:	1c6b      	adds	r3, r5, #1
 8000c8c:	4647      	mov	r7, r8
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	4653      	mov	r3, sl
 8000c92:	4077      	eors	r7, r6
 8000c94:	003a      	movs	r2, r7
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	d848      	bhi.n	8000d2c <__aeabi_fmul+0xf8>
 8000c9a:	497d      	ldr	r1, [pc, #500]	; (8000e90 <__aeabi_fmul+0x25c>)
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	58cb      	ldr	r3, [r1, r3]
 8000ca0:	469f      	mov	pc, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_fmul+0x74>
 8000ca6:	e085      	b.n	8000db4 <__aeabi_fmul+0x180>
 8000ca8:	3308      	adds	r3, #8
 8000caa:	469a      	mov	sl, r3
 8000cac:	3b06      	subs	r3, #6
 8000cae:	469b      	mov	fp, r3
 8000cb0:	027c      	lsls	r4, r7, #9
 8000cb2:	007a      	lsls	r2, r7, #1
 8000cb4:	0ffb      	lsrs	r3, r7, #31
 8000cb6:	25ff      	movs	r5, #255	; 0xff
 8000cb8:	0a64      	lsrs	r4, r4, #9
 8000cba:	0e12      	lsrs	r2, r2, #24
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	d1db      	bne.n	8000c78 <__aeabi_fmul+0x44>
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_fmul+0x92>
 8000cc4:	e090      	b.n	8000de8 <__aeabi_fmul+0x1b4>
 8000cc6:	4652      	mov	r2, sl
 8000cc8:	2301      	movs	r3, #1
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	4692      	mov	sl, r2
 8000cce:	2001      	movs	r0, #1
 8000cd0:	e7db      	b.n	8000c8a <__aeabi_fmul+0x56>
 8000cd2:	464c      	mov	r4, r9
 8000cd4:	4658      	mov	r0, fp
 8000cd6:	0017      	movs	r7, r2
 8000cd8:	2802      	cmp	r0, #2
 8000cda:	d024      	beq.n	8000d26 <__aeabi_fmul+0xf2>
 8000cdc:	2803      	cmp	r0, #3
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fmul+0xae>
 8000ce0:	e0cf      	b.n	8000e82 <__aeabi_fmul+0x24e>
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2801      	cmp	r0, #1
 8000ce8:	d14d      	bne.n	8000d86 <__aeabi_fmul+0x152>
 8000cea:	0258      	lsls	r0, r3, #9
 8000cec:	05d2      	lsls	r2, r2, #23
 8000cee:	0a40      	lsrs	r0, r0, #9
 8000cf0:	07ff      	lsls	r7, r7, #31
 8000cf2:	4310      	orrs	r0, r2
 8000cf4:	4338      	orrs	r0, r7
 8000cf6:	b003      	add	sp, #12
 8000cf8:	bc3c      	pop	{r2, r3, r4, r5}
 8000cfa:	4690      	mov	r8, r2
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	46a2      	mov	sl, r4
 8000d00:	46ab      	mov	fp, r5
 8000d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d15b      	bne.n	8000dc0 <__aeabi_fmul+0x18c>
 8000d08:	2304      	movs	r3, #4
 8000d0a:	469a      	mov	sl, r3
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	2500      	movs	r5, #0
 8000d10:	469b      	mov	fp, r3
 8000d12:	e7aa      	b.n	8000c6a <__aeabi_fmul+0x36>
 8000d14:	35ff      	adds	r5, #255	; 0xff
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d160      	bne.n	8000ddc <__aeabi_fmul+0x1a8>
 8000d1a:	4652      	mov	r2, sl
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	4692      	mov	sl, r2
 8000d22:	2002      	movs	r0, #2
 8000d24:	e7b1      	b.n	8000c8a <__aeabi_fmul+0x56>
 8000d26:	22ff      	movs	r2, #255	; 0xff
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e7de      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000d2c:	464b      	mov	r3, r9
 8000d2e:	0c1b      	lsrs	r3, r3, #16
 8000d30:	469c      	mov	ip, r3
 8000d32:	464b      	mov	r3, r9
 8000d34:	0426      	lsls	r6, r4, #16
 8000d36:	0c36      	lsrs	r6, r6, #16
 8000d38:	0418      	lsls	r0, r3, #16
 8000d3a:	4661      	mov	r1, ip
 8000d3c:	0033      	movs	r3, r6
 8000d3e:	0c22      	lsrs	r2, r4, #16
 8000d40:	4664      	mov	r4, ip
 8000d42:	0c00      	lsrs	r0, r0, #16
 8000d44:	4343      	muls	r3, r0
 8000d46:	434e      	muls	r6, r1
 8000d48:	4350      	muls	r0, r2
 8000d4a:	4354      	muls	r4, r2
 8000d4c:	1980      	adds	r0, r0, r6
 8000d4e:	0c1a      	lsrs	r2, r3, #16
 8000d50:	1812      	adds	r2, r2, r0
 8000d52:	4296      	cmp	r6, r2
 8000d54:	d903      	bls.n	8000d5e <__aeabi_fmul+0x12a>
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	0249      	lsls	r1, r1, #9
 8000d5a:	468c      	mov	ip, r1
 8000d5c:	4464      	add	r4, ip
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	0c1b      	lsrs	r3, r3, #16
 8000d62:	0410      	lsls	r0, r2, #16
 8000d64:	18c0      	adds	r0, r0, r3
 8000d66:	0183      	lsls	r3, r0, #6
 8000d68:	1e5e      	subs	r6, r3, #1
 8000d6a:	41b3      	sbcs	r3, r6
 8000d6c:	0e80      	lsrs	r0, r0, #26
 8000d6e:	4318      	orrs	r0, r3
 8000d70:	0c13      	lsrs	r3, r2, #16
 8000d72:	191b      	adds	r3, r3, r4
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	4303      	orrs	r3, r0
 8000d78:	001c      	movs	r4, r3
 8000d7a:	0123      	lsls	r3, r4, #4
 8000d7c:	d579      	bpl.n	8000e72 <__aeabi_fmul+0x23e>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	0862      	lsrs	r2, r4, #1
 8000d82:	401c      	ands	r4, r3
 8000d84:	4314      	orrs	r4, r2
 8000d86:	9a01      	ldr	r2, [sp, #4]
 8000d88:	327f      	adds	r2, #127	; 0x7f
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	dd4d      	ble.n	8000e2a <__aeabi_fmul+0x1f6>
 8000d8e:	0763      	lsls	r3, r4, #29
 8000d90:	d004      	beq.n	8000d9c <__aeabi_fmul+0x168>
 8000d92:	230f      	movs	r3, #15
 8000d94:	4023      	ands	r3, r4
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fmul+0x168>
 8000d9a:	3404      	adds	r4, #4
 8000d9c:	0123      	lsls	r3, r4, #4
 8000d9e:	d503      	bpl.n	8000da8 <__aeabi_fmul+0x174>
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <__aeabi_fmul+0x260>)
 8000da2:	9a01      	ldr	r2, [sp, #4]
 8000da4:	401c      	ands	r4, r3
 8000da6:	3280      	adds	r2, #128	; 0x80
 8000da8:	2afe      	cmp	r2, #254	; 0xfe
 8000daa:	dcbc      	bgt.n	8000d26 <__aeabi_fmul+0xf2>
 8000dac:	01a3      	lsls	r3, r4, #6
 8000dae:	0a5b      	lsrs	r3, r3, #9
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	e79a      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000db4:	230c      	movs	r3, #12
 8000db6:	469a      	mov	sl, r3
 8000db8:	3b09      	subs	r3, #9
 8000dba:	25ff      	movs	r5, #255	; 0xff
 8000dbc:	469b      	mov	fp, r3
 8000dbe:	e754      	b.n	8000c6a <__aeabi_fmul+0x36>
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f002 f8fd 	bl	8002fc0 <__clzsi2>
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	1f43      	subs	r3, r0, #5
 8000dca:	2576      	movs	r5, #118	; 0x76
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	2300      	movs	r3, #0
 8000dd0:	426d      	negs	r5, r5
 8000dd2:	4691      	mov	r9, r2
 8000dd4:	1a2d      	subs	r5, r5, r0
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	469b      	mov	fp, r3
 8000dda:	e746      	b.n	8000c6a <__aeabi_fmul+0x36>
 8000ddc:	4652      	mov	r2, sl
 8000dde:	2303      	movs	r3, #3
 8000de0:	431a      	orrs	r2, r3
 8000de2:	4692      	mov	sl, r2
 8000de4:	2003      	movs	r0, #3
 8000de6:	e750      	b.n	8000c8a <__aeabi_fmul+0x56>
 8000de8:	0020      	movs	r0, r4
 8000dea:	f002 f8e9 	bl	8002fc0 <__clzsi2>
 8000dee:	1f43      	subs	r3, r0, #5
 8000df0:	1a2d      	subs	r5, r5, r0
 8000df2:	409c      	lsls	r4, r3
 8000df4:	3d76      	subs	r5, #118	; 0x76
 8000df6:	2000      	movs	r0, #0
 8000df8:	e747      	b.n	8000c8a <__aeabi_fmul+0x56>
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	2700      	movs	r7, #0
 8000dfe:	03db      	lsls	r3, r3, #15
 8000e00:	22ff      	movs	r2, #255	; 0xff
 8000e02:	e772      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e04:	4642      	mov	r2, r8
 8000e06:	e766      	b.n	8000cd6 <__aeabi_fmul+0xa2>
 8000e08:	464c      	mov	r4, r9
 8000e0a:	0032      	movs	r2, r6
 8000e0c:	4658      	mov	r0, fp
 8000e0e:	e762      	b.n	8000cd6 <__aeabi_fmul+0xa2>
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	464a      	mov	r2, r9
 8000e14:	03db      	lsls	r3, r3, #15
 8000e16:	421a      	tst	r2, r3
 8000e18:	d022      	beq.n	8000e60 <__aeabi_fmul+0x22c>
 8000e1a:	421c      	tst	r4, r3
 8000e1c:	d120      	bne.n	8000e60 <__aeabi_fmul+0x22c>
 8000e1e:	4323      	orrs	r3, r4
 8000e20:	025b      	lsls	r3, r3, #9
 8000e22:	0a5b      	lsrs	r3, r3, #9
 8000e24:	4647      	mov	r7, r8
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	e75f      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	1a9a      	subs	r2, r3, r2
 8000e2e:	2a1b      	cmp	r2, #27
 8000e30:	dc21      	bgt.n	8000e76 <__aeabi_fmul+0x242>
 8000e32:	0023      	movs	r3, r4
 8000e34:	9901      	ldr	r1, [sp, #4]
 8000e36:	40d3      	lsrs	r3, r2
 8000e38:	319e      	adds	r1, #158	; 0x9e
 8000e3a:	408c      	lsls	r4, r1
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	0023      	movs	r3, r4
 8000e40:	1e5c      	subs	r4, r3, #1
 8000e42:	41a3      	sbcs	r3, r4
 8000e44:	4313      	orrs	r3, r2
 8000e46:	075a      	lsls	r2, r3, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x220>
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	2a04      	cmp	r2, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x220>
 8000e52:	3304      	adds	r3, #4
 8000e54:	015a      	lsls	r2, r3, #5
 8000e56:	d411      	bmi.n	8000e7c <__aeabi_fmul+0x248>
 8000e58:	019b      	lsls	r3, r3, #6
 8000e5a:	0a5b      	lsrs	r3, r3, #9
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	e744      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	464a      	mov	r2, r9
 8000e64:	03db      	lsls	r3, r3, #15
 8000e66:	4313      	orrs	r3, r2
 8000e68:	025b      	lsls	r3, r3, #9
 8000e6a:	0a5b      	lsrs	r3, r3, #9
 8000e6c:	0037      	movs	r7, r6
 8000e6e:	22ff      	movs	r2, #255	; 0xff
 8000e70:	e73b      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e72:	9501      	str	r5, [sp, #4]
 8000e74:	e787      	b.n	8000d86 <__aeabi_fmul+0x152>
 8000e76:	2200      	movs	r2, #0
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e736      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e733      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	03db      	lsls	r3, r3, #15
 8000e86:	4323      	orrs	r3, r4
 8000e88:	025b      	lsls	r3, r3, #9
 8000e8a:	0a5b      	lsrs	r3, r3, #9
 8000e8c:	22ff      	movs	r2, #255	; 0xff
 8000e8e:	e72c      	b.n	8000cea <__aeabi_fmul+0xb6>
 8000e90:	0800f3d0 	.word	0x0800f3d0
 8000e94:	f7ffffff 	.word	0xf7ffffff

08000e98 <__aeabi_fsub>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	4647      	mov	r7, r8
 8000e9c:	46ce      	mov	lr, r9
 8000e9e:	0044      	lsls	r4, r0, #1
 8000ea0:	0fc2      	lsrs	r2, r0, #31
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	0247      	lsls	r7, r0, #9
 8000ea6:	0248      	lsls	r0, r1, #9
 8000ea8:	0a40      	lsrs	r0, r0, #9
 8000eaa:	4684      	mov	ip, r0
 8000eac:	4666      	mov	r6, ip
 8000eae:	0048      	lsls	r0, r1, #1
 8000eb0:	0a7f      	lsrs	r7, r7, #9
 8000eb2:	0e24      	lsrs	r4, r4, #24
 8000eb4:	00f6      	lsls	r6, r6, #3
 8000eb6:	0025      	movs	r5, r4
 8000eb8:	4690      	mov	r8, r2
 8000eba:	00fb      	lsls	r3, r7, #3
 8000ebc:	0e00      	lsrs	r0, r0, #24
 8000ebe:	0fc9      	lsrs	r1, r1, #31
 8000ec0:	46b1      	mov	r9, r6
 8000ec2:	28ff      	cmp	r0, #255	; 0xff
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0x30>
 8000ec6:	e085      	b.n	8000fd4 <__aeabi_fsub+0x13c>
 8000ec8:	2601      	movs	r6, #1
 8000eca:	4071      	eors	r1, r6
 8000ecc:	1a26      	subs	r6, r4, r0
 8000ece:	4291      	cmp	r1, r2
 8000ed0:	d057      	beq.n	8000f82 <__aeabi_fsub+0xea>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	dd43      	ble.n	8000f5e <__aeabi_fsub+0xc6>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d000      	beq.n	8000edc <__aeabi_fsub+0x44>
 8000eda:	e07f      	b.n	8000fdc <__aeabi_fsub+0x144>
 8000edc:	4649      	mov	r1, r9
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_fsub+0x4c>
 8000ee2:	e0aa      	b.n	800103a <__aeabi_fsub+0x1a2>
 8000ee4:	3e01      	subs	r6, #1
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	d000      	beq.n	8000eec <__aeabi_fsub+0x54>
 8000eea:	e0f7      	b.n	80010dc <__aeabi_fsub+0x244>
 8000eec:	1a5b      	subs	r3, r3, r1
 8000eee:	015a      	lsls	r2, r3, #5
 8000ef0:	d400      	bmi.n	8000ef4 <__aeabi_fsub+0x5c>
 8000ef2:	e08b      	b.n	800100c <__aeabi_fsub+0x174>
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	099c      	lsrs	r4, r3, #6
 8000ef8:	0020      	movs	r0, r4
 8000efa:	f002 f861 	bl	8002fc0 <__clzsi2>
 8000efe:	3805      	subs	r0, #5
 8000f00:	4084      	lsls	r4, r0
 8000f02:	4285      	cmp	r5, r0
 8000f04:	dd00      	ble.n	8000f08 <__aeabi_fsub+0x70>
 8000f06:	e0d3      	b.n	80010b0 <__aeabi_fsub+0x218>
 8000f08:	1b45      	subs	r5, r0, r5
 8000f0a:	0023      	movs	r3, r4
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	3501      	adds	r5, #1
 8000f10:	40eb      	lsrs	r3, r5
 8000f12:	1b45      	subs	r5, r0, r5
 8000f14:	40ac      	lsls	r4, r5
 8000f16:	1e62      	subs	r2, r4, #1
 8000f18:	4194      	sbcs	r4, r2
 8000f1a:	4323      	orrs	r3, r4
 8000f1c:	2407      	movs	r4, #7
 8000f1e:	2500      	movs	r5, #0
 8000f20:	401c      	ands	r4, r3
 8000f22:	2201      	movs	r2, #1
 8000f24:	4641      	mov	r1, r8
 8000f26:	400a      	ands	r2, r1
 8000f28:	2c00      	cmp	r4, #0
 8000f2a:	d004      	beq.n	8000f36 <__aeabi_fsub+0x9e>
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	4019      	ands	r1, r3
 8000f30:	2904      	cmp	r1, #4
 8000f32:	d000      	beq.n	8000f36 <__aeabi_fsub+0x9e>
 8000f34:	3304      	adds	r3, #4
 8000f36:	0159      	lsls	r1, r3, #5
 8000f38:	d400      	bmi.n	8000f3c <__aeabi_fsub+0xa4>
 8000f3a:	e080      	b.n	800103e <__aeabi_fsub+0x1a6>
 8000f3c:	3501      	adds	r5, #1
 8000f3e:	b2ec      	uxtb	r4, r5
 8000f40:	2dff      	cmp	r5, #255	; 0xff
 8000f42:	d000      	beq.n	8000f46 <__aeabi_fsub+0xae>
 8000f44:	e0a3      	b.n	800108e <__aeabi_fsub+0x1f6>
 8000f46:	24ff      	movs	r4, #255	; 0xff
 8000f48:	2300      	movs	r3, #0
 8000f4a:	025b      	lsls	r3, r3, #9
 8000f4c:	05e4      	lsls	r4, r4, #23
 8000f4e:	0a58      	lsrs	r0, r3, #9
 8000f50:	07d2      	lsls	r2, r2, #31
 8000f52:	4320      	orrs	r0, r4
 8000f54:	4310      	orrs	r0, r2
 8000f56:	bc0c      	pop	{r2, r3}
 8000f58:	4690      	mov	r8, r2
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f5e:	2e00      	cmp	r6, #0
 8000f60:	d174      	bne.n	800104c <__aeabi_fsub+0x1b4>
 8000f62:	1c60      	adds	r0, r4, #1
 8000f64:	b2c0      	uxtb	r0, r0
 8000f66:	2801      	cmp	r0, #1
 8000f68:	dc00      	bgt.n	8000f6c <__aeabi_fsub+0xd4>
 8000f6a:	e0a7      	b.n	80010bc <__aeabi_fsub+0x224>
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	1a9c      	subs	r4, r3, r2
 8000f70:	0162      	lsls	r2, r4, #5
 8000f72:	d500      	bpl.n	8000f76 <__aeabi_fsub+0xde>
 8000f74:	e0b6      	b.n	80010e4 <__aeabi_fsub+0x24c>
 8000f76:	2c00      	cmp	r4, #0
 8000f78:	d1be      	bne.n	8000ef8 <__aeabi_fsub+0x60>
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e7e3      	b.n	8000f4a <__aeabi_fsub+0xb2>
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	dc00      	bgt.n	8000f88 <__aeabi_fsub+0xf0>
 8000f86:	e085      	b.n	8001094 <__aeabi_fsub+0x1fc>
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d046      	beq.n	800101a <__aeabi_fsub+0x182>
 8000f8c:	2cff      	cmp	r4, #255	; 0xff
 8000f8e:	d049      	beq.n	8001024 <__aeabi_fsub+0x18c>
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	4648      	mov	r0, r9
 8000f94:	04d2      	lsls	r2, r2, #19
 8000f96:	4310      	orrs	r0, r2
 8000f98:	4681      	mov	r9, r0
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2e1b      	cmp	r6, #27
 8000f9e:	dc09      	bgt.n	8000fb4 <__aeabi_fsub+0x11c>
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	464c      	mov	r4, r9
 8000fa4:	1b80      	subs	r0, r0, r6
 8000fa6:	4084      	lsls	r4, r0
 8000fa8:	464a      	mov	r2, r9
 8000faa:	0020      	movs	r0, r4
 8000fac:	40f2      	lsrs	r2, r6
 8000fae:	1e44      	subs	r4, r0, #1
 8000fb0:	41a0      	sbcs	r0, r4
 8000fb2:	4302      	orrs	r2, r0
 8000fb4:	189b      	adds	r3, r3, r2
 8000fb6:	015a      	lsls	r2, r3, #5
 8000fb8:	d528      	bpl.n	800100c <__aeabi_fsub+0x174>
 8000fba:	3501      	adds	r5, #1
 8000fbc:	2dff      	cmp	r5, #255	; 0xff
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x12a>
 8000fc0:	e0a8      	b.n	8001114 <__aeabi_fsub+0x27c>
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2407      	movs	r4, #7
 8000fc6:	4994      	ldr	r1, [pc, #592]	; (8001218 <__aeabi_fsub+0x380>)
 8000fc8:	401a      	ands	r2, r3
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	400b      	ands	r3, r1
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	401c      	ands	r4, r3
 8000fd2:	e7a6      	b.n	8000f22 <__aeabi_fsub+0x8a>
 8000fd4:	2e00      	cmp	r6, #0
 8000fd6:	d000      	beq.n	8000fda <__aeabi_fsub+0x142>
 8000fd8:	e778      	b.n	8000ecc <__aeabi_fsub+0x34>
 8000fda:	e775      	b.n	8000ec8 <__aeabi_fsub+0x30>
 8000fdc:	2cff      	cmp	r4, #255	; 0xff
 8000fde:	d054      	beq.n	800108a <__aeabi_fsub+0x1f2>
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	04d2      	lsls	r2, r2, #19
 8000fe6:	4311      	orrs	r1, r2
 8000fe8:	4689      	mov	r9, r1
 8000fea:	2201      	movs	r2, #1
 8000fec:	2e1b      	cmp	r6, #27
 8000fee:	dc09      	bgt.n	8001004 <__aeabi_fsub+0x16c>
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	4648      	mov	r0, r9
 8000ff4:	1b89      	subs	r1, r1, r6
 8000ff6:	4088      	lsls	r0, r1
 8000ff8:	464a      	mov	r2, r9
 8000ffa:	0001      	movs	r1, r0
 8000ffc:	40f2      	lsrs	r2, r6
 8000ffe:	1e48      	subs	r0, r1, #1
 8001000:	4181      	sbcs	r1, r0
 8001002:	430a      	orrs	r2, r1
 8001004:	1a9b      	subs	r3, r3, r2
 8001006:	015a      	lsls	r2, r3, #5
 8001008:	d500      	bpl.n	800100c <__aeabi_fsub+0x174>
 800100a:	e773      	b.n	8000ef4 <__aeabi_fsub+0x5c>
 800100c:	2201      	movs	r2, #1
 800100e:	4641      	mov	r1, r8
 8001010:	400a      	ands	r2, r1
 8001012:	0759      	lsls	r1, r3, #29
 8001014:	d000      	beq.n	8001018 <__aeabi_fsub+0x180>
 8001016:	e789      	b.n	8000f2c <__aeabi_fsub+0x94>
 8001018:	e011      	b.n	800103e <__aeabi_fsub+0x1a6>
 800101a:	4648      	mov	r0, r9
 800101c:	2800      	cmp	r0, #0
 800101e:	d158      	bne.n	80010d2 <__aeabi_fsub+0x23a>
 8001020:	2cff      	cmp	r4, #255	; 0xff
 8001022:	d10c      	bne.n	800103e <__aeabi_fsub+0x1a6>
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0x194>
 800102a:	e78c      	b.n	8000f46 <__aeabi_fsub+0xae>
 800102c:	2080      	movs	r0, #128	; 0x80
 800102e:	03c0      	lsls	r0, r0, #15
 8001030:	4303      	orrs	r3, r0
 8001032:	025b      	lsls	r3, r3, #9
 8001034:	0a5b      	lsrs	r3, r3, #9
 8001036:	24ff      	movs	r4, #255	; 0xff
 8001038:	e787      	b.n	8000f4a <__aeabi_fsub+0xb2>
 800103a:	2cff      	cmp	r4, #255	; 0xff
 800103c:	d025      	beq.n	800108a <__aeabi_fsub+0x1f2>
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	2dff      	cmp	r5, #255	; 0xff
 8001042:	d0f0      	beq.n	8001026 <__aeabi_fsub+0x18e>
 8001044:	025b      	lsls	r3, r3, #9
 8001046:	0a5b      	lsrs	r3, r3, #9
 8001048:	b2ec      	uxtb	r4, r5
 800104a:	e77e      	b.n	8000f4a <__aeabi_fsub+0xb2>
 800104c:	2c00      	cmp	r4, #0
 800104e:	d04d      	beq.n	80010ec <__aeabi_fsub+0x254>
 8001050:	28ff      	cmp	r0, #255	; 0xff
 8001052:	d018      	beq.n	8001086 <__aeabi_fsub+0x1ee>
 8001054:	2480      	movs	r4, #128	; 0x80
 8001056:	04e4      	lsls	r4, r4, #19
 8001058:	4272      	negs	r2, r6
 800105a:	4323      	orrs	r3, r4
 800105c:	2a1b      	cmp	r2, #27
 800105e:	dd00      	ble.n	8001062 <__aeabi_fsub+0x1ca>
 8001060:	e0c4      	b.n	80011ec <__aeabi_fsub+0x354>
 8001062:	001c      	movs	r4, r3
 8001064:	2520      	movs	r5, #32
 8001066:	40d4      	lsrs	r4, r2
 8001068:	1aaa      	subs	r2, r5, r2
 800106a:	4093      	lsls	r3, r2
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4193      	sbcs	r3, r2
 8001070:	4323      	orrs	r3, r4
 8001072:	464a      	mov	r2, r9
 8001074:	0005      	movs	r5, r0
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	4688      	mov	r8, r1
 800107a:	e738      	b.n	8000eee <__aeabi_fsub+0x56>
 800107c:	1c72      	adds	r2, r6, #1
 800107e:	d0f8      	beq.n	8001072 <__aeabi_fsub+0x1da>
 8001080:	43f2      	mvns	r2, r6
 8001082:	28ff      	cmp	r0, #255	; 0xff
 8001084:	d1ea      	bne.n	800105c <__aeabi_fsub+0x1c4>
 8001086:	000a      	movs	r2, r1
 8001088:	464b      	mov	r3, r9
 800108a:	25ff      	movs	r5, #255	; 0xff
 800108c:	e7d7      	b.n	800103e <__aeabi_fsub+0x1a6>
 800108e:	019b      	lsls	r3, r3, #6
 8001090:	0a5b      	lsrs	r3, r3, #9
 8001092:	e75a      	b.n	8000f4a <__aeabi_fsub+0xb2>
 8001094:	2e00      	cmp	r6, #0
 8001096:	d141      	bne.n	800111c <__aeabi_fsub+0x284>
 8001098:	1c65      	adds	r5, r4, #1
 800109a:	b2e9      	uxtb	r1, r5
 800109c:	2901      	cmp	r1, #1
 800109e:	dd45      	ble.n	800112c <__aeabi_fsub+0x294>
 80010a0:	2dff      	cmp	r5, #255	; 0xff
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x20e>
 80010a4:	e74f      	b.n	8000f46 <__aeabi_fsub+0xae>
 80010a6:	2407      	movs	r4, #7
 80010a8:	444b      	add	r3, r9
 80010aa:	085b      	lsrs	r3, r3, #1
 80010ac:	401c      	ands	r4, r3
 80010ae:	e738      	b.n	8000f22 <__aeabi_fsub+0x8a>
 80010b0:	2207      	movs	r2, #7
 80010b2:	4b5a      	ldr	r3, [pc, #360]	; (800121c <__aeabi_fsub+0x384>)
 80010b4:	1a2d      	subs	r5, r5, r0
 80010b6:	4023      	ands	r3, r4
 80010b8:	4014      	ands	r4, r2
 80010ba:	e732      	b.n	8000f22 <__aeabi_fsub+0x8a>
 80010bc:	2c00      	cmp	r4, #0
 80010be:	d11d      	bne.n	80010fc <__aeabi_fsub+0x264>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d17a      	bne.n	80011ba <__aeabi_fsub+0x322>
 80010c4:	464b      	mov	r3, r9
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_fsub+0x234>
 80010ca:	e091      	b.n	80011f0 <__aeabi_fsub+0x358>
 80010cc:	000a      	movs	r2, r1
 80010ce:	2500      	movs	r5, #0
 80010d0:	e7b5      	b.n	800103e <__aeabi_fsub+0x1a6>
 80010d2:	3e01      	subs	r6, #1
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d119      	bne.n	800110c <__aeabi_fsub+0x274>
 80010d8:	444b      	add	r3, r9
 80010da:	e76c      	b.n	8000fb6 <__aeabi_fsub+0x11e>
 80010dc:	2cff      	cmp	r4, #255	; 0xff
 80010de:	d184      	bne.n	8000fea <__aeabi_fsub+0x152>
 80010e0:	25ff      	movs	r5, #255	; 0xff
 80010e2:	e7ac      	b.n	800103e <__aeabi_fsub+0x1a6>
 80010e4:	464a      	mov	r2, r9
 80010e6:	4688      	mov	r8, r1
 80010e8:	1ad4      	subs	r4, r2, r3
 80010ea:	e705      	b.n	8000ef8 <__aeabi_fsub+0x60>
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1c5      	bne.n	800107c <__aeabi_fsub+0x1e4>
 80010f0:	000a      	movs	r2, r1
 80010f2:	28ff      	cmp	r0, #255	; 0xff
 80010f4:	d0c8      	beq.n	8001088 <__aeabi_fsub+0x1f0>
 80010f6:	0005      	movs	r5, r0
 80010f8:	464b      	mov	r3, r9
 80010fa:	e7a0      	b.n	800103e <__aeabi_fsub+0x1a6>
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d149      	bne.n	8001194 <__aeabi_fsub+0x2fc>
 8001100:	464b      	mov	r3, r9
 8001102:	2b00      	cmp	r3, #0
 8001104:	d077      	beq.n	80011f6 <__aeabi_fsub+0x35e>
 8001106:	000a      	movs	r2, r1
 8001108:	25ff      	movs	r5, #255	; 0xff
 800110a:	e798      	b.n	800103e <__aeabi_fsub+0x1a6>
 800110c:	2cff      	cmp	r4, #255	; 0xff
 800110e:	d000      	beq.n	8001112 <__aeabi_fsub+0x27a>
 8001110:	e743      	b.n	8000f9a <__aeabi_fsub+0x102>
 8001112:	e787      	b.n	8001024 <__aeabi_fsub+0x18c>
 8001114:	000a      	movs	r2, r1
 8001116:	24ff      	movs	r4, #255	; 0xff
 8001118:	2300      	movs	r3, #0
 800111a:	e716      	b.n	8000f4a <__aeabi_fsub+0xb2>
 800111c:	2c00      	cmp	r4, #0
 800111e:	d115      	bne.n	800114c <__aeabi_fsub+0x2b4>
 8001120:	2b00      	cmp	r3, #0
 8001122:	d157      	bne.n	80011d4 <__aeabi_fsub+0x33c>
 8001124:	28ff      	cmp	r0, #255	; 0xff
 8001126:	d1e6      	bne.n	80010f6 <__aeabi_fsub+0x25e>
 8001128:	464b      	mov	r3, r9
 800112a:	e77b      	b.n	8001024 <__aeabi_fsub+0x18c>
 800112c:	2c00      	cmp	r4, #0
 800112e:	d120      	bne.n	8001172 <__aeabi_fsub+0x2da>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d057      	beq.n	80011e4 <__aeabi_fsub+0x34c>
 8001134:	4649      	mov	r1, r9
 8001136:	2900      	cmp	r1, #0
 8001138:	d053      	beq.n	80011e2 <__aeabi_fsub+0x34a>
 800113a:	444b      	add	r3, r9
 800113c:	015a      	lsls	r2, r3, #5
 800113e:	d568      	bpl.n	8001212 <__aeabi_fsub+0x37a>
 8001140:	2407      	movs	r4, #7
 8001142:	4a36      	ldr	r2, [pc, #216]	; (800121c <__aeabi_fsub+0x384>)
 8001144:	401c      	ands	r4, r3
 8001146:	2501      	movs	r5, #1
 8001148:	4013      	ands	r3, r2
 800114a:	e6ea      	b.n	8000f22 <__aeabi_fsub+0x8a>
 800114c:	28ff      	cmp	r0, #255	; 0xff
 800114e:	d0eb      	beq.n	8001128 <__aeabi_fsub+0x290>
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	04d2      	lsls	r2, r2, #19
 8001154:	4276      	negs	r6, r6
 8001156:	4313      	orrs	r3, r2
 8001158:	2e1b      	cmp	r6, #27
 800115a:	dc53      	bgt.n	8001204 <__aeabi_fsub+0x36c>
 800115c:	2520      	movs	r5, #32
 800115e:	1bad      	subs	r5, r5, r6
 8001160:	001a      	movs	r2, r3
 8001162:	40ab      	lsls	r3, r5
 8001164:	40f2      	lsrs	r2, r6
 8001166:	1e5c      	subs	r4, r3, #1
 8001168:	41a3      	sbcs	r3, r4
 800116a:	4313      	orrs	r3, r2
 800116c:	444b      	add	r3, r9
 800116e:	0005      	movs	r5, r0
 8001170:	e721      	b.n	8000fb6 <__aeabi_fsub+0x11e>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0d8      	beq.n	8001128 <__aeabi_fsub+0x290>
 8001176:	4649      	mov	r1, r9
 8001178:	2900      	cmp	r1, #0
 800117a:	d100      	bne.n	800117e <__aeabi_fsub+0x2e6>
 800117c:	e752      	b.n	8001024 <__aeabi_fsub+0x18c>
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	03c9      	lsls	r1, r1, #15
 8001182:	420f      	tst	r7, r1
 8001184:	d100      	bne.n	8001188 <__aeabi_fsub+0x2f0>
 8001186:	e74d      	b.n	8001024 <__aeabi_fsub+0x18c>
 8001188:	4660      	mov	r0, ip
 800118a:	4208      	tst	r0, r1
 800118c:	d000      	beq.n	8001190 <__aeabi_fsub+0x2f8>
 800118e:	e749      	b.n	8001024 <__aeabi_fsub+0x18c>
 8001190:	464b      	mov	r3, r9
 8001192:	e747      	b.n	8001024 <__aeabi_fsub+0x18c>
 8001194:	4648      	mov	r0, r9
 8001196:	25ff      	movs	r5, #255	; 0xff
 8001198:	2800      	cmp	r0, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x306>
 800119c:	e74f      	b.n	800103e <__aeabi_fsub+0x1a6>
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	03d2      	lsls	r2, r2, #15
 80011a2:	4217      	tst	r7, r2
 80011a4:	d004      	beq.n	80011b0 <__aeabi_fsub+0x318>
 80011a6:	4660      	mov	r0, ip
 80011a8:	4210      	tst	r0, r2
 80011aa:	d101      	bne.n	80011b0 <__aeabi_fsub+0x318>
 80011ac:	464b      	mov	r3, r9
 80011ae:	4688      	mov	r8, r1
 80011b0:	2201      	movs	r2, #1
 80011b2:	4641      	mov	r1, r8
 80011b4:	25ff      	movs	r5, #255	; 0xff
 80011b6:	400a      	ands	r2, r1
 80011b8:	e741      	b.n	800103e <__aeabi_fsub+0x1a6>
 80011ba:	4648      	mov	r0, r9
 80011bc:	2800      	cmp	r0, #0
 80011be:	d01f      	beq.n	8001200 <__aeabi_fsub+0x368>
 80011c0:	1a1a      	subs	r2, r3, r0
 80011c2:	0150      	lsls	r0, r2, #5
 80011c4:	d520      	bpl.n	8001208 <__aeabi_fsub+0x370>
 80011c6:	464a      	mov	r2, r9
 80011c8:	2407      	movs	r4, #7
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	401c      	ands	r4, r3
 80011ce:	4688      	mov	r8, r1
 80011d0:	2500      	movs	r5, #0
 80011d2:	e6a6      	b.n	8000f22 <__aeabi_fsub+0x8a>
 80011d4:	1c74      	adds	r4, r6, #1
 80011d6:	d0c9      	beq.n	800116c <__aeabi_fsub+0x2d4>
 80011d8:	43f6      	mvns	r6, r6
 80011da:	28ff      	cmp	r0, #255	; 0xff
 80011dc:	d1bc      	bne.n	8001158 <__aeabi_fsub+0x2c0>
 80011de:	464b      	mov	r3, r9
 80011e0:	e720      	b.n	8001024 <__aeabi_fsub+0x18c>
 80011e2:	4699      	mov	r9, r3
 80011e4:	464b      	mov	r3, r9
 80011e6:	2500      	movs	r5, #0
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	e72b      	b.n	8001044 <__aeabi_fsub+0x1ac>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e740      	b.n	8001072 <__aeabi_fsub+0x1da>
 80011f0:	2200      	movs	r2, #0
 80011f2:	2300      	movs	r3, #0
 80011f4:	e6a9      	b.n	8000f4a <__aeabi_fsub+0xb2>
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	2200      	movs	r2, #0
 80011fa:	03db      	lsls	r3, r3, #15
 80011fc:	24ff      	movs	r4, #255	; 0xff
 80011fe:	e6a4      	b.n	8000f4a <__aeabi_fsub+0xb2>
 8001200:	2500      	movs	r5, #0
 8001202:	e71c      	b.n	800103e <__aeabi_fsub+0x1a6>
 8001204:	2301      	movs	r3, #1
 8001206:	e7b1      	b.n	800116c <__aeabi_fsub+0x2d4>
 8001208:	2a00      	cmp	r2, #0
 800120a:	d0f1      	beq.n	80011f0 <__aeabi_fsub+0x358>
 800120c:	0013      	movs	r3, r2
 800120e:	2500      	movs	r5, #0
 8001210:	e6fc      	b.n	800100c <__aeabi_fsub+0x174>
 8001212:	2500      	movs	r5, #0
 8001214:	e6fa      	b.n	800100c <__aeabi_fsub+0x174>
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	7dffffff 	.word	0x7dffffff
 800121c:	fbffffff 	.word	0xfbffffff

08001220 <__aeabi_f2iz>:
 8001220:	0241      	lsls	r1, r0, #9
 8001222:	0042      	lsls	r2, r0, #1
 8001224:	0fc3      	lsrs	r3, r0, #31
 8001226:	0a49      	lsrs	r1, r1, #9
 8001228:	0e12      	lsrs	r2, r2, #24
 800122a:	2000      	movs	r0, #0
 800122c:	2a7e      	cmp	r2, #126	; 0x7e
 800122e:	d90d      	bls.n	800124c <__aeabi_f2iz+0x2c>
 8001230:	2a9d      	cmp	r2, #157	; 0x9d
 8001232:	d80c      	bhi.n	800124e <__aeabi_f2iz+0x2e>
 8001234:	2080      	movs	r0, #128	; 0x80
 8001236:	0400      	lsls	r0, r0, #16
 8001238:	4301      	orrs	r1, r0
 800123a:	2a95      	cmp	r2, #149	; 0x95
 800123c:	dc0a      	bgt.n	8001254 <__aeabi_f2iz+0x34>
 800123e:	2096      	movs	r0, #150	; 0x96
 8001240:	1a82      	subs	r2, r0, r2
 8001242:	40d1      	lsrs	r1, r2
 8001244:	4248      	negs	r0, r1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d100      	bne.n	800124c <__aeabi_f2iz+0x2c>
 800124a:	0008      	movs	r0, r1
 800124c:	4770      	bx	lr
 800124e:	4a03      	ldr	r2, [pc, #12]	; (800125c <__aeabi_f2iz+0x3c>)
 8001250:	1898      	adds	r0, r3, r2
 8001252:	e7fb      	b.n	800124c <__aeabi_f2iz+0x2c>
 8001254:	3a96      	subs	r2, #150	; 0x96
 8001256:	4091      	lsls	r1, r2
 8001258:	e7f4      	b.n	8001244 <__aeabi_f2iz+0x24>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	7fffffff 	.word	0x7fffffff

08001260 <__aeabi_i2f>:
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	2800      	cmp	r0, #0
 8001264:	d03d      	beq.n	80012e2 <__aeabi_i2f+0x82>
 8001266:	17c3      	asrs	r3, r0, #31
 8001268:	18c5      	adds	r5, r0, r3
 800126a:	405d      	eors	r5, r3
 800126c:	0fc4      	lsrs	r4, r0, #31
 800126e:	0028      	movs	r0, r5
 8001270:	f001 fea6 	bl	8002fc0 <__clzsi2>
 8001274:	229e      	movs	r2, #158	; 0x9e
 8001276:	1a12      	subs	r2, r2, r0
 8001278:	2a96      	cmp	r2, #150	; 0x96
 800127a:	dc07      	bgt.n	800128c <__aeabi_i2f+0x2c>
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	2808      	cmp	r0, #8
 8001280:	dd33      	ble.n	80012ea <__aeabi_i2f+0x8a>
 8001282:	3808      	subs	r0, #8
 8001284:	4085      	lsls	r5, r0
 8001286:	0268      	lsls	r0, r5, #9
 8001288:	0a40      	lsrs	r0, r0, #9
 800128a:	e023      	b.n	80012d4 <__aeabi_i2f+0x74>
 800128c:	2a99      	cmp	r2, #153	; 0x99
 800128e:	dd0b      	ble.n	80012a8 <__aeabi_i2f+0x48>
 8001290:	2305      	movs	r3, #5
 8001292:	0029      	movs	r1, r5
 8001294:	1a1b      	subs	r3, r3, r0
 8001296:	40d9      	lsrs	r1, r3
 8001298:	0003      	movs	r3, r0
 800129a:	331b      	adds	r3, #27
 800129c:	409d      	lsls	r5, r3
 800129e:	002b      	movs	r3, r5
 80012a0:	1e5d      	subs	r5, r3, #1
 80012a2:	41ab      	sbcs	r3, r5
 80012a4:	4319      	orrs	r1, r3
 80012a6:	000d      	movs	r5, r1
 80012a8:	2805      	cmp	r0, #5
 80012aa:	dd01      	ble.n	80012b0 <__aeabi_i2f+0x50>
 80012ac:	1f43      	subs	r3, r0, #5
 80012ae:	409d      	lsls	r5, r3
 80012b0:	002b      	movs	r3, r5
 80012b2:	490f      	ldr	r1, [pc, #60]	; (80012f0 <__aeabi_i2f+0x90>)
 80012b4:	400b      	ands	r3, r1
 80012b6:	076e      	lsls	r6, r5, #29
 80012b8:	d009      	beq.n	80012ce <__aeabi_i2f+0x6e>
 80012ba:	260f      	movs	r6, #15
 80012bc:	4035      	ands	r5, r6
 80012be:	2d04      	cmp	r5, #4
 80012c0:	d005      	beq.n	80012ce <__aeabi_i2f+0x6e>
 80012c2:	3304      	adds	r3, #4
 80012c4:	015d      	lsls	r5, r3, #5
 80012c6:	d502      	bpl.n	80012ce <__aeabi_i2f+0x6e>
 80012c8:	229f      	movs	r2, #159	; 0x9f
 80012ca:	400b      	ands	r3, r1
 80012cc:	1a12      	subs	r2, r2, r0
 80012ce:	019b      	lsls	r3, r3, #6
 80012d0:	0a58      	lsrs	r0, r3, #9
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	0240      	lsls	r0, r0, #9
 80012d6:	05d2      	lsls	r2, r2, #23
 80012d8:	0a40      	lsrs	r0, r0, #9
 80012da:	07e4      	lsls	r4, r4, #31
 80012dc:	4310      	orrs	r0, r2
 80012de:	4320      	orrs	r0, r4
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
 80012e2:	2400      	movs	r4, #0
 80012e4:	2200      	movs	r2, #0
 80012e6:	2000      	movs	r0, #0
 80012e8:	e7f4      	b.n	80012d4 <__aeabi_i2f+0x74>
 80012ea:	0268      	lsls	r0, r5, #9
 80012ec:	0a40      	lsrs	r0, r0, #9
 80012ee:	e7f1      	b.n	80012d4 <__aeabi_i2f+0x74>
 80012f0:	fbffffff 	.word	0xfbffffff

080012f4 <__aeabi_ui2f>:
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	1e04      	subs	r4, r0, #0
 80012f8:	d034      	beq.n	8001364 <__aeabi_ui2f+0x70>
 80012fa:	f001 fe61 	bl	8002fc0 <__clzsi2>
 80012fe:	229e      	movs	r2, #158	; 0x9e
 8001300:	1a12      	subs	r2, r2, r0
 8001302:	2a96      	cmp	r2, #150	; 0x96
 8001304:	dc07      	bgt.n	8001316 <__aeabi_ui2f+0x22>
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	2808      	cmp	r0, #8
 800130a:	dd2e      	ble.n	800136a <__aeabi_ui2f+0x76>
 800130c:	3808      	subs	r0, #8
 800130e:	4084      	lsls	r4, r0
 8001310:	0260      	lsls	r0, r4, #9
 8001312:	0a40      	lsrs	r0, r0, #9
 8001314:	e021      	b.n	800135a <__aeabi_ui2f+0x66>
 8001316:	2a99      	cmp	r2, #153	; 0x99
 8001318:	dd09      	ble.n	800132e <__aeabi_ui2f+0x3a>
 800131a:	0003      	movs	r3, r0
 800131c:	0021      	movs	r1, r4
 800131e:	331b      	adds	r3, #27
 8001320:	4099      	lsls	r1, r3
 8001322:	1e4b      	subs	r3, r1, #1
 8001324:	4199      	sbcs	r1, r3
 8001326:	2305      	movs	r3, #5
 8001328:	1a1b      	subs	r3, r3, r0
 800132a:	40dc      	lsrs	r4, r3
 800132c:	430c      	orrs	r4, r1
 800132e:	2805      	cmp	r0, #5
 8001330:	dd01      	ble.n	8001336 <__aeabi_ui2f+0x42>
 8001332:	1f43      	subs	r3, r0, #5
 8001334:	409c      	lsls	r4, r3
 8001336:	0023      	movs	r3, r4
 8001338:	490d      	ldr	r1, [pc, #52]	; (8001370 <__aeabi_ui2f+0x7c>)
 800133a:	400b      	ands	r3, r1
 800133c:	0765      	lsls	r5, r4, #29
 800133e:	d009      	beq.n	8001354 <__aeabi_ui2f+0x60>
 8001340:	250f      	movs	r5, #15
 8001342:	402c      	ands	r4, r5
 8001344:	2c04      	cmp	r4, #4
 8001346:	d005      	beq.n	8001354 <__aeabi_ui2f+0x60>
 8001348:	3304      	adds	r3, #4
 800134a:	015c      	lsls	r4, r3, #5
 800134c:	d502      	bpl.n	8001354 <__aeabi_ui2f+0x60>
 800134e:	229f      	movs	r2, #159	; 0x9f
 8001350:	400b      	ands	r3, r1
 8001352:	1a12      	subs	r2, r2, r0
 8001354:	019b      	lsls	r3, r3, #6
 8001356:	0a58      	lsrs	r0, r3, #9
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	0240      	lsls	r0, r0, #9
 800135c:	05d2      	lsls	r2, r2, #23
 800135e:	0a40      	lsrs	r0, r0, #9
 8001360:	4310      	orrs	r0, r2
 8001362:	bd70      	pop	{r4, r5, r6, pc}
 8001364:	2200      	movs	r2, #0
 8001366:	2000      	movs	r0, #0
 8001368:	e7f7      	b.n	800135a <__aeabi_ui2f+0x66>
 800136a:	0260      	lsls	r0, r4, #9
 800136c:	0a40      	lsrs	r0, r0, #9
 800136e:	e7f4      	b.n	800135a <__aeabi_ui2f+0x66>
 8001370:	fbffffff 	.word	0xfbffffff

08001374 <__aeabi_dadd>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	464f      	mov	r7, r9
 8001378:	4646      	mov	r6, r8
 800137a:	46d6      	mov	lr, sl
 800137c:	000c      	movs	r4, r1
 800137e:	0309      	lsls	r1, r1, #12
 8001380:	b5c0      	push	{r6, r7, lr}
 8001382:	0a49      	lsrs	r1, r1, #9
 8001384:	0f47      	lsrs	r7, r0, #29
 8001386:	005e      	lsls	r6, r3, #1
 8001388:	4339      	orrs	r1, r7
 800138a:	031f      	lsls	r7, r3, #12
 800138c:	0fdb      	lsrs	r3, r3, #31
 800138e:	469c      	mov	ip, r3
 8001390:	0065      	lsls	r5, r4, #1
 8001392:	0a7b      	lsrs	r3, r7, #9
 8001394:	0f57      	lsrs	r7, r2, #29
 8001396:	431f      	orrs	r7, r3
 8001398:	0d6d      	lsrs	r5, r5, #21
 800139a:	0fe4      	lsrs	r4, r4, #31
 800139c:	0d76      	lsrs	r6, r6, #21
 800139e:	46a1      	mov	r9, r4
 80013a0:	00c0      	lsls	r0, r0, #3
 80013a2:	46b8      	mov	r8, r7
 80013a4:	00d2      	lsls	r2, r2, #3
 80013a6:	1bab      	subs	r3, r5, r6
 80013a8:	4564      	cmp	r4, ip
 80013aa:	d07b      	beq.n	80014a4 <__aeabi_dadd+0x130>
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd5f      	ble.n	8001470 <__aeabi_dadd+0xfc>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d000      	beq.n	80013b6 <__aeabi_dadd+0x42>
 80013b4:	e0a4      	b.n	8001500 <__aeabi_dadd+0x18c>
 80013b6:	003e      	movs	r6, r7
 80013b8:	4316      	orrs	r6, r2
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x4a>
 80013bc:	e112      	b.n	80015e4 <__aeabi_dadd+0x270>
 80013be:	1e5e      	subs	r6, r3, #1
 80013c0:	2e00      	cmp	r6, #0
 80013c2:	d000      	beq.n	80013c6 <__aeabi_dadd+0x52>
 80013c4:	e19e      	b.n	8001704 <__aeabi_dadd+0x390>
 80013c6:	1a87      	subs	r7, r0, r2
 80013c8:	4643      	mov	r3, r8
 80013ca:	42b8      	cmp	r0, r7
 80013cc:	4180      	sbcs	r0, r0
 80013ce:	2501      	movs	r5, #1
 80013d0:	1ac9      	subs	r1, r1, r3
 80013d2:	4240      	negs	r0, r0
 80013d4:	1a09      	subs	r1, r1, r0
 80013d6:	020b      	lsls	r3, r1, #8
 80013d8:	d400      	bmi.n	80013dc <__aeabi_dadd+0x68>
 80013da:	e131      	b.n	8001640 <__aeabi_dadd+0x2cc>
 80013dc:	0249      	lsls	r1, r1, #9
 80013de:	0a4e      	lsrs	r6, r1, #9
 80013e0:	2e00      	cmp	r6, #0
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x72>
 80013e4:	e16e      	b.n	80016c4 <__aeabi_dadd+0x350>
 80013e6:	0030      	movs	r0, r6
 80013e8:	f001 fdea 	bl	8002fc0 <__clzsi2>
 80013ec:	0003      	movs	r3, r0
 80013ee:	3b08      	subs	r3, #8
 80013f0:	2b1f      	cmp	r3, #31
 80013f2:	dd00      	ble.n	80013f6 <__aeabi_dadd+0x82>
 80013f4:	e161      	b.n	80016ba <__aeabi_dadd+0x346>
 80013f6:	2220      	movs	r2, #32
 80013f8:	0039      	movs	r1, r7
 80013fa:	1ad2      	subs	r2, r2, r3
 80013fc:	409e      	lsls	r6, r3
 80013fe:	40d1      	lsrs	r1, r2
 8001400:	409f      	lsls	r7, r3
 8001402:	430e      	orrs	r6, r1
 8001404:	429d      	cmp	r5, r3
 8001406:	dd00      	ble.n	800140a <__aeabi_dadd+0x96>
 8001408:	e151      	b.n	80016ae <__aeabi_dadd+0x33a>
 800140a:	1b5d      	subs	r5, r3, r5
 800140c:	1c6b      	adds	r3, r5, #1
 800140e:	2b1f      	cmp	r3, #31
 8001410:	dd00      	ble.n	8001414 <__aeabi_dadd+0xa0>
 8001412:	e17c      	b.n	800170e <__aeabi_dadd+0x39a>
 8001414:	2120      	movs	r1, #32
 8001416:	1ac9      	subs	r1, r1, r3
 8001418:	003d      	movs	r5, r7
 800141a:	0030      	movs	r0, r6
 800141c:	408f      	lsls	r7, r1
 800141e:	4088      	lsls	r0, r1
 8001420:	40dd      	lsrs	r5, r3
 8001422:	1e79      	subs	r1, r7, #1
 8001424:	418f      	sbcs	r7, r1
 8001426:	0031      	movs	r1, r6
 8001428:	2207      	movs	r2, #7
 800142a:	4328      	orrs	r0, r5
 800142c:	40d9      	lsrs	r1, r3
 800142e:	2500      	movs	r5, #0
 8001430:	4307      	orrs	r7, r0
 8001432:	403a      	ands	r2, r7
 8001434:	2a00      	cmp	r2, #0
 8001436:	d009      	beq.n	800144c <__aeabi_dadd+0xd8>
 8001438:	230f      	movs	r3, #15
 800143a:	403b      	ands	r3, r7
 800143c:	2b04      	cmp	r3, #4
 800143e:	d005      	beq.n	800144c <__aeabi_dadd+0xd8>
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	42bb      	cmp	r3, r7
 8001444:	41bf      	sbcs	r7, r7
 8001446:	427f      	negs	r7, r7
 8001448:	19c9      	adds	r1, r1, r7
 800144a:	001f      	movs	r7, r3
 800144c:	020b      	lsls	r3, r1, #8
 800144e:	d400      	bmi.n	8001452 <__aeabi_dadd+0xde>
 8001450:	e226      	b.n	80018a0 <__aeabi_dadd+0x52c>
 8001452:	1c6a      	adds	r2, r5, #1
 8001454:	4bc6      	ldr	r3, [pc, #792]	; (8001770 <__aeabi_dadd+0x3fc>)
 8001456:	0555      	lsls	r5, r2, #21
 8001458:	0d6d      	lsrs	r5, r5, #21
 800145a:	429a      	cmp	r2, r3
 800145c:	d100      	bne.n	8001460 <__aeabi_dadd+0xec>
 800145e:	e106      	b.n	800166e <__aeabi_dadd+0x2fa>
 8001460:	4ac4      	ldr	r2, [pc, #784]	; (8001774 <__aeabi_dadd+0x400>)
 8001462:	08ff      	lsrs	r7, r7, #3
 8001464:	400a      	ands	r2, r1
 8001466:	0753      	lsls	r3, r2, #29
 8001468:	0252      	lsls	r2, r2, #9
 800146a:	433b      	orrs	r3, r7
 800146c:	0b12      	lsrs	r2, r2, #12
 800146e:	e08e      	b.n	800158e <__aeabi_dadd+0x21a>
 8001470:	2b00      	cmp	r3, #0
 8001472:	d000      	beq.n	8001476 <__aeabi_dadd+0x102>
 8001474:	e0b8      	b.n	80015e8 <__aeabi_dadd+0x274>
 8001476:	1c6b      	adds	r3, r5, #1
 8001478:	055b      	lsls	r3, r3, #21
 800147a:	0d5b      	lsrs	r3, r3, #21
 800147c:	2b01      	cmp	r3, #1
 800147e:	dc00      	bgt.n	8001482 <__aeabi_dadd+0x10e>
 8001480:	e130      	b.n	80016e4 <__aeabi_dadd+0x370>
 8001482:	1a87      	subs	r7, r0, r2
 8001484:	4643      	mov	r3, r8
 8001486:	42b8      	cmp	r0, r7
 8001488:	41b6      	sbcs	r6, r6
 800148a:	1acb      	subs	r3, r1, r3
 800148c:	4276      	negs	r6, r6
 800148e:	1b9e      	subs	r6, r3, r6
 8001490:	0233      	lsls	r3, r6, #8
 8001492:	d500      	bpl.n	8001496 <__aeabi_dadd+0x122>
 8001494:	e14c      	b.n	8001730 <__aeabi_dadd+0x3bc>
 8001496:	003b      	movs	r3, r7
 8001498:	4333      	orrs	r3, r6
 800149a:	d1a1      	bne.n	80013e0 <__aeabi_dadd+0x6c>
 800149c:	2200      	movs	r2, #0
 800149e:	2400      	movs	r4, #0
 80014a0:	2500      	movs	r5, #0
 80014a2:	e070      	b.n	8001586 <__aeabi_dadd+0x212>
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dc00      	bgt.n	80014aa <__aeabi_dadd+0x136>
 80014a8:	e0e5      	b.n	8001676 <__aeabi_dadd+0x302>
 80014aa:	2e00      	cmp	r6, #0
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x13c>
 80014ae:	e083      	b.n	80015b8 <__aeabi_dadd+0x244>
 80014b0:	4eaf      	ldr	r6, [pc, #700]	; (8001770 <__aeabi_dadd+0x3fc>)
 80014b2:	42b5      	cmp	r5, r6
 80014b4:	d060      	beq.n	8001578 <__aeabi_dadd+0x204>
 80014b6:	2680      	movs	r6, #128	; 0x80
 80014b8:	0436      	lsls	r6, r6, #16
 80014ba:	4337      	orrs	r7, r6
 80014bc:	46b8      	mov	r8, r7
 80014be:	2b38      	cmp	r3, #56	; 0x38
 80014c0:	dc00      	bgt.n	80014c4 <__aeabi_dadd+0x150>
 80014c2:	e13e      	b.n	8001742 <__aeabi_dadd+0x3ce>
 80014c4:	4643      	mov	r3, r8
 80014c6:	4313      	orrs	r3, r2
 80014c8:	001f      	movs	r7, r3
 80014ca:	1e7a      	subs	r2, r7, #1
 80014cc:	4197      	sbcs	r7, r2
 80014ce:	183f      	adds	r7, r7, r0
 80014d0:	4287      	cmp	r7, r0
 80014d2:	4180      	sbcs	r0, r0
 80014d4:	4240      	negs	r0, r0
 80014d6:	1809      	adds	r1, r1, r0
 80014d8:	020b      	lsls	r3, r1, #8
 80014da:	d400      	bmi.n	80014de <__aeabi_dadd+0x16a>
 80014dc:	e0b0      	b.n	8001640 <__aeabi_dadd+0x2cc>
 80014de:	4ba4      	ldr	r3, [pc, #656]	; (8001770 <__aeabi_dadd+0x3fc>)
 80014e0:	3501      	adds	r5, #1
 80014e2:	429d      	cmp	r5, r3
 80014e4:	d100      	bne.n	80014e8 <__aeabi_dadd+0x174>
 80014e6:	e0c3      	b.n	8001670 <__aeabi_dadd+0x2fc>
 80014e8:	4aa2      	ldr	r2, [pc, #648]	; (8001774 <__aeabi_dadd+0x400>)
 80014ea:	087b      	lsrs	r3, r7, #1
 80014ec:	400a      	ands	r2, r1
 80014ee:	2101      	movs	r1, #1
 80014f0:	400f      	ands	r7, r1
 80014f2:	431f      	orrs	r7, r3
 80014f4:	0851      	lsrs	r1, r2, #1
 80014f6:	07d3      	lsls	r3, r2, #31
 80014f8:	2207      	movs	r2, #7
 80014fa:	431f      	orrs	r7, r3
 80014fc:	403a      	ands	r2, r7
 80014fe:	e799      	b.n	8001434 <__aeabi_dadd+0xc0>
 8001500:	4e9b      	ldr	r6, [pc, #620]	; (8001770 <__aeabi_dadd+0x3fc>)
 8001502:	42b5      	cmp	r5, r6
 8001504:	d038      	beq.n	8001578 <__aeabi_dadd+0x204>
 8001506:	2680      	movs	r6, #128	; 0x80
 8001508:	0436      	lsls	r6, r6, #16
 800150a:	4337      	orrs	r7, r6
 800150c:	46b8      	mov	r8, r7
 800150e:	2b38      	cmp	r3, #56	; 0x38
 8001510:	dd00      	ble.n	8001514 <__aeabi_dadd+0x1a0>
 8001512:	e0dc      	b.n	80016ce <__aeabi_dadd+0x35a>
 8001514:	2b1f      	cmp	r3, #31
 8001516:	dc00      	bgt.n	800151a <__aeabi_dadd+0x1a6>
 8001518:	e130      	b.n	800177c <__aeabi_dadd+0x408>
 800151a:	001e      	movs	r6, r3
 800151c:	4647      	mov	r7, r8
 800151e:	3e20      	subs	r6, #32
 8001520:	40f7      	lsrs	r7, r6
 8001522:	46bc      	mov	ip, r7
 8001524:	2b20      	cmp	r3, #32
 8001526:	d004      	beq.n	8001532 <__aeabi_dadd+0x1be>
 8001528:	2640      	movs	r6, #64	; 0x40
 800152a:	1af3      	subs	r3, r6, r3
 800152c:	4646      	mov	r6, r8
 800152e:	409e      	lsls	r6, r3
 8001530:	4332      	orrs	r2, r6
 8001532:	0017      	movs	r7, r2
 8001534:	4663      	mov	r3, ip
 8001536:	1e7a      	subs	r2, r7, #1
 8001538:	4197      	sbcs	r7, r2
 800153a:	431f      	orrs	r7, r3
 800153c:	e0cc      	b.n	80016d8 <__aeabi_dadd+0x364>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_dadd+0x1d0>
 8001542:	e204      	b.n	800194e <__aeabi_dadd+0x5da>
 8001544:	4643      	mov	r3, r8
 8001546:	4313      	orrs	r3, r2
 8001548:	d100      	bne.n	800154c <__aeabi_dadd+0x1d8>
 800154a:	e159      	b.n	8001800 <__aeabi_dadd+0x48c>
 800154c:	074b      	lsls	r3, r1, #29
 800154e:	08c0      	lsrs	r0, r0, #3
 8001550:	4318      	orrs	r0, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	08c9      	lsrs	r1, r1, #3
 8001556:	031b      	lsls	r3, r3, #12
 8001558:	4219      	tst	r1, r3
 800155a:	d008      	beq.n	800156e <__aeabi_dadd+0x1fa>
 800155c:	4645      	mov	r5, r8
 800155e:	08ed      	lsrs	r5, r5, #3
 8001560:	421d      	tst	r5, r3
 8001562:	d104      	bne.n	800156e <__aeabi_dadd+0x1fa>
 8001564:	4643      	mov	r3, r8
 8001566:	08d0      	lsrs	r0, r2, #3
 8001568:	0759      	lsls	r1, r3, #29
 800156a:	4308      	orrs	r0, r1
 800156c:	0029      	movs	r1, r5
 800156e:	0f42      	lsrs	r2, r0, #29
 8001570:	00c9      	lsls	r1, r1, #3
 8001572:	4d7f      	ldr	r5, [pc, #508]	; (8001770 <__aeabi_dadd+0x3fc>)
 8001574:	4311      	orrs	r1, r2
 8001576:	00c0      	lsls	r0, r0, #3
 8001578:	074b      	lsls	r3, r1, #29
 800157a:	08ca      	lsrs	r2, r1, #3
 800157c:	497c      	ldr	r1, [pc, #496]	; (8001770 <__aeabi_dadd+0x3fc>)
 800157e:	08c0      	lsrs	r0, r0, #3
 8001580:	4303      	orrs	r3, r0
 8001582:	428d      	cmp	r5, r1
 8001584:	d068      	beq.n	8001658 <__aeabi_dadd+0x2e4>
 8001586:	0312      	lsls	r2, r2, #12
 8001588:	056d      	lsls	r5, r5, #21
 800158a:	0b12      	lsrs	r2, r2, #12
 800158c:	0d6d      	lsrs	r5, r5, #21
 800158e:	2100      	movs	r1, #0
 8001590:	0312      	lsls	r2, r2, #12
 8001592:	0018      	movs	r0, r3
 8001594:	0b13      	lsrs	r3, r2, #12
 8001596:	0d0a      	lsrs	r2, r1, #20
 8001598:	0512      	lsls	r2, r2, #20
 800159a:	431a      	orrs	r2, r3
 800159c:	4b76      	ldr	r3, [pc, #472]	; (8001778 <__aeabi_dadd+0x404>)
 800159e:	052d      	lsls	r5, r5, #20
 80015a0:	4013      	ands	r3, r2
 80015a2:	432b      	orrs	r3, r5
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	07e4      	lsls	r4, r4, #31
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	4323      	orrs	r3, r4
 80015ac:	0019      	movs	r1, r3
 80015ae:	bc1c      	pop	{r2, r3, r4}
 80015b0:	4690      	mov	r8, r2
 80015b2:	4699      	mov	r9, r3
 80015b4:	46a2      	mov	sl, r4
 80015b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b8:	003e      	movs	r6, r7
 80015ba:	4316      	orrs	r6, r2
 80015bc:	d012      	beq.n	80015e4 <__aeabi_dadd+0x270>
 80015be:	1e5e      	subs	r6, r3, #1
 80015c0:	2e00      	cmp	r6, #0
 80015c2:	d000      	beq.n	80015c6 <__aeabi_dadd+0x252>
 80015c4:	e100      	b.n	80017c8 <__aeabi_dadd+0x454>
 80015c6:	1887      	adds	r7, r0, r2
 80015c8:	4287      	cmp	r7, r0
 80015ca:	4180      	sbcs	r0, r0
 80015cc:	4441      	add	r1, r8
 80015ce:	4240      	negs	r0, r0
 80015d0:	1809      	adds	r1, r1, r0
 80015d2:	2501      	movs	r5, #1
 80015d4:	020b      	lsls	r3, r1, #8
 80015d6:	d533      	bpl.n	8001640 <__aeabi_dadd+0x2cc>
 80015d8:	2502      	movs	r5, #2
 80015da:	e785      	b.n	80014e8 <__aeabi_dadd+0x174>
 80015dc:	4664      	mov	r4, ip
 80015de:	0033      	movs	r3, r6
 80015e0:	4641      	mov	r1, r8
 80015e2:	0010      	movs	r0, r2
 80015e4:	001d      	movs	r5, r3
 80015e6:	e7c7      	b.n	8001578 <__aeabi_dadd+0x204>
 80015e8:	2d00      	cmp	r5, #0
 80015ea:	d000      	beq.n	80015ee <__aeabi_dadd+0x27a>
 80015ec:	e0da      	b.n	80017a4 <__aeabi_dadd+0x430>
 80015ee:	000c      	movs	r4, r1
 80015f0:	4304      	orrs	r4, r0
 80015f2:	d0f3      	beq.n	80015dc <__aeabi_dadd+0x268>
 80015f4:	1c5c      	adds	r4, r3, #1
 80015f6:	d100      	bne.n	80015fa <__aeabi_dadd+0x286>
 80015f8:	e19f      	b.n	800193a <__aeabi_dadd+0x5c6>
 80015fa:	4c5d      	ldr	r4, [pc, #372]	; (8001770 <__aeabi_dadd+0x3fc>)
 80015fc:	42a6      	cmp	r6, r4
 80015fe:	d100      	bne.n	8001602 <__aeabi_dadd+0x28e>
 8001600:	e12f      	b.n	8001862 <__aeabi_dadd+0x4ee>
 8001602:	43db      	mvns	r3, r3
 8001604:	2b38      	cmp	r3, #56	; 0x38
 8001606:	dd00      	ble.n	800160a <__aeabi_dadd+0x296>
 8001608:	e166      	b.n	80018d8 <__aeabi_dadd+0x564>
 800160a:	2b1f      	cmp	r3, #31
 800160c:	dd00      	ble.n	8001610 <__aeabi_dadd+0x29c>
 800160e:	e183      	b.n	8001918 <__aeabi_dadd+0x5a4>
 8001610:	2420      	movs	r4, #32
 8001612:	0005      	movs	r5, r0
 8001614:	1ae4      	subs	r4, r4, r3
 8001616:	000f      	movs	r7, r1
 8001618:	40dd      	lsrs	r5, r3
 800161a:	40d9      	lsrs	r1, r3
 800161c:	40a0      	lsls	r0, r4
 800161e:	4643      	mov	r3, r8
 8001620:	40a7      	lsls	r7, r4
 8001622:	1a5b      	subs	r3, r3, r1
 8001624:	1e44      	subs	r4, r0, #1
 8001626:	41a0      	sbcs	r0, r4
 8001628:	4698      	mov	r8, r3
 800162a:	432f      	orrs	r7, r5
 800162c:	4338      	orrs	r0, r7
 800162e:	1a17      	subs	r7, r2, r0
 8001630:	42ba      	cmp	r2, r7
 8001632:	4192      	sbcs	r2, r2
 8001634:	4643      	mov	r3, r8
 8001636:	4252      	negs	r2, r2
 8001638:	1a99      	subs	r1, r3, r2
 800163a:	4664      	mov	r4, ip
 800163c:	0035      	movs	r5, r6
 800163e:	e6ca      	b.n	80013d6 <__aeabi_dadd+0x62>
 8001640:	2207      	movs	r2, #7
 8001642:	403a      	ands	r2, r7
 8001644:	2a00      	cmp	r2, #0
 8001646:	d000      	beq.n	800164a <__aeabi_dadd+0x2d6>
 8001648:	e6f6      	b.n	8001438 <__aeabi_dadd+0xc4>
 800164a:	074b      	lsls	r3, r1, #29
 800164c:	08ca      	lsrs	r2, r1, #3
 800164e:	4948      	ldr	r1, [pc, #288]	; (8001770 <__aeabi_dadd+0x3fc>)
 8001650:	08ff      	lsrs	r7, r7, #3
 8001652:	433b      	orrs	r3, r7
 8001654:	428d      	cmp	r5, r1
 8001656:	d196      	bne.n	8001586 <__aeabi_dadd+0x212>
 8001658:	0019      	movs	r1, r3
 800165a:	4311      	orrs	r1, r2
 800165c:	d100      	bne.n	8001660 <__aeabi_dadd+0x2ec>
 800165e:	e19e      	b.n	800199e <__aeabi_dadd+0x62a>
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0309      	lsls	r1, r1, #12
 8001664:	430a      	orrs	r2, r1
 8001666:	0312      	lsls	r2, r2, #12
 8001668:	0b12      	lsrs	r2, r2, #12
 800166a:	4d41      	ldr	r5, [pc, #260]	; (8001770 <__aeabi_dadd+0x3fc>)
 800166c:	e78f      	b.n	800158e <__aeabi_dadd+0x21a>
 800166e:	0015      	movs	r5, r2
 8001670:	2200      	movs	r2, #0
 8001672:	2300      	movs	r3, #0
 8001674:	e78b      	b.n	800158e <__aeabi_dadd+0x21a>
 8001676:	2b00      	cmp	r3, #0
 8001678:	d000      	beq.n	800167c <__aeabi_dadd+0x308>
 800167a:	e0c7      	b.n	800180c <__aeabi_dadd+0x498>
 800167c:	1c6b      	adds	r3, r5, #1
 800167e:	055f      	lsls	r7, r3, #21
 8001680:	0d7f      	lsrs	r7, r7, #21
 8001682:	2f01      	cmp	r7, #1
 8001684:	dc00      	bgt.n	8001688 <__aeabi_dadd+0x314>
 8001686:	e0f1      	b.n	800186c <__aeabi_dadd+0x4f8>
 8001688:	4d39      	ldr	r5, [pc, #228]	; (8001770 <__aeabi_dadd+0x3fc>)
 800168a:	42ab      	cmp	r3, r5
 800168c:	d100      	bne.n	8001690 <__aeabi_dadd+0x31c>
 800168e:	e0b9      	b.n	8001804 <__aeabi_dadd+0x490>
 8001690:	1885      	adds	r5, r0, r2
 8001692:	000a      	movs	r2, r1
 8001694:	4285      	cmp	r5, r0
 8001696:	4189      	sbcs	r1, r1
 8001698:	4442      	add	r2, r8
 800169a:	4249      	negs	r1, r1
 800169c:	1851      	adds	r1, r2, r1
 800169e:	2207      	movs	r2, #7
 80016a0:	07cf      	lsls	r7, r1, #31
 80016a2:	086d      	lsrs	r5, r5, #1
 80016a4:	432f      	orrs	r7, r5
 80016a6:	0849      	lsrs	r1, r1, #1
 80016a8:	403a      	ands	r2, r7
 80016aa:	001d      	movs	r5, r3
 80016ac:	e6c2      	b.n	8001434 <__aeabi_dadd+0xc0>
 80016ae:	2207      	movs	r2, #7
 80016b0:	4930      	ldr	r1, [pc, #192]	; (8001774 <__aeabi_dadd+0x400>)
 80016b2:	1aed      	subs	r5, r5, r3
 80016b4:	4031      	ands	r1, r6
 80016b6:	403a      	ands	r2, r7
 80016b8:	e6bc      	b.n	8001434 <__aeabi_dadd+0xc0>
 80016ba:	003e      	movs	r6, r7
 80016bc:	3828      	subs	r0, #40	; 0x28
 80016be:	4086      	lsls	r6, r0
 80016c0:	2700      	movs	r7, #0
 80016c2:	e69f      	b.n	8001404 <__aeabi_dadd+0x90>
 80016c4:	0038      	movs	r0, r7
 80016c6:	f001 fc7b 	bl	8002fc0 <__clzsi2>
 80016ca:	3020      	adds	r0, #32
 80016cc:	e68e      	b.n	80013ec <__aeabi_dadd+0x78>
 80016ce:	4643      	mov	r3, r8
 80016d0:	4313      	orrs	r3, r2
 80016d2:	001f      	movs	r7, r3
 80016d4:	1e7a      	subs	r2, r7, #1
 80016d6:	4197      	sbcs	r7, r2
 80016d8:	1bc7      	subs	r7, r0, r7
 80016da:	42b8      	cmp	r0, r7
 80016dc:	4180      	sbcs	r0, r0
 80016de:	4240      	negs	r0, r0
 80016e0:	1a09      	subs	r1, r1, r0
 80016e2:	e678      	b.n	80013d6 <__aeabi_dadd+0x62>
 80016e4:	000e      	movs	r6, r1
 80016e6:	003b      	movs	r3, r7
 80016e8:	4306      	orrs	r6, r0
 80016ea:	4313      	orrs	r3, r2
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	d161      	bne.n	80017b4 <__aeabi_dadd+0x440>
 80016f0:	2e00      	cmp	r6, #0
 80016f2:	d000      	beq.n	80016f6 <__aeabi_dadd+0x382>
 80016f4:	e0f4      	b.n	80018e0 <__aeabi_dadd+0x56c>
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d100      	bne.n	80016fc <__aeabi_dadd+0x388>
 80016fa:	e11b      	b.n	8001934 <__aeabi_dadd+0x5c0>
 80016fc:	4664      	mov	r4, ip
 80016fe:	0039      	movs	r1, r7
 8001700:	0010      	movs	r0, r2
 8001702:	e739      	b.n	8001578 <__aeabi_dadd+0x204>
 8001704:	4f1a      	ldr	r7, [pc, #104]	; (8001770 <__aeabi_dadd+0x3fc>)
 8001706:	42bb      	cmp	r3, r7
 8001708:	d07a      	beq.n	8001800 <__aeabi_dadd+0x48c>
 800170a:	0033      	movs	r3, r6
 800170c:	e6ff      	b.n	800150e <__aeabi_dadd+0x19a>
 800170e:	0030      	movs	r0, r6
 8001710:	3d1f      	subs	r5, #31
 8001712:	40e8      	lsrs	r0, r5
 8001714:	2b20      	cmp	r3, #32
 8001716:	d003      	beq.n	8001720 <__aeabi_dadd+0x3ac>
 8001718:	2140      	movs	r1, #64	; 0x40
 800171a:	1acb      	subs	r3, r1, r3
 800171c:	409e      	lsls	r6, r3
 800171e:	4337      	orrs	r7, r6
 8001720:	1e7b      	subs	r3, r7, #1
 8001722:	419f      	sbcs	r7, r3
 8001724:	2207      	movs	r2, #7
 8001726:	4307      	orrs	r7, r0
 8001728:	403a      	ands	r2, r7
 800172a:	2100      	movs	r1, #0
 800172c:	2500      	movs	r5, #0
 800172e:	e789      	b.n	8001644 <__aeabi_dadd+0x2d0>
 8001730:	1a17      	subs	r7, r2, r0
 8001732:	4643      	mov	r3, r8
 8001734:	42ba      	cmp	r2, r7
 8001736:	41b6      	sbcs	r6, r6
 8001738:	1a59      	subs	r1, r3, r1
 800173a:	4276      	negs	r6, r6
 800173c:	1b8e      	subs	r6, r1, r6
 800173e:	4664      	mov	r4, ip
 8001740:	e64e      	b.n	80013e0 <__aeabi_dadd+0x6c>
 8001742:	2b1f      	cmp	r3, #31
 8001744:	dd00      	ble.n	8001748 <__aeabi_dadd+0x3d4>
 8001746:	e0ad      	b.n	80018a4 <__aeabi_dadd+0x530>
 8001748:	2620      	movs	r6, #32
 800174a:	4647      	mov	r7, r8
 800174c:	1af6      	subs	r6, r6, r3
 800174e:	40b7      	lsls	r7, r6
 8001750:	46b9      	mov	r9, r7
 8001752:	0017      	movs	r7, r2
 8001754:	46b2      	mov	sl, r6
 8001756:	40df      	lsrs	r7, r3
 8001758:	464e      	mov	r6, r9
 800175a:	433e      	orrs	r6, r7
 800175c:	0037      	movs	r7, r6
 800175e:	4656      	mov	r6, sl
 8001760:	40b2      	lsls	r2, r6
 8001762:	1e56      	subs	r6, r2, #1
 8001764:	41b2      	sbcs	r2, r6
 8001766:	4317      	orrs	r7, r2
 8001768:	4642      	mov	r2, r8
 800176a:	40da      	lsrs	r2, r3
 800176c:	1889      	adds	r1, r1, r2
 800176e:	e6ae      	b.n	80014ce <__aeabi_dadd+0x15a>
 8001770:	000007ff 	.word	0x000007ff
 8001774:	ff7fffff 	.word	0xff7fffff
 8001778:	800fffff 	.word	0x800fffff
 800177c:	2620      	movs	r6, #32
 800177e:	4647      	mov	r7, r8
 8001780:	1af6      	subs	r6, r6, r3
 8001782:	40b7      	lsls	r7, r6
 8001784:	46b9      	mov	r9, r7
 8001786:	0017      	movs	r7, r2
 8001788:	46b2      	mov	sl, r6
 800178a:	40df      	lsrs	r7, r3
 800178c:	464e      	mov	r6, r9
 800178e:	433e      	orrs	r6, r7
 8001790:	0037      	movs	r7, r6
 8001792:	4656      	mov	r6, sl
 8001794:	40b2      	lsls	r2, r6
 8001796:	1e56      	subs	r6, r2, #1
 8001798:	41b2      	sbcs	r2, r6
 800179a:	4317      	orrs	r7, r2
 800179c:	4642      	mov	r2, r8
 800179e:	40da      	lsrs	r2, r3
 80017a0:	1a89      	subs	r1, r1, r2
 80017a2:	e799      	b.n	80016d8 <__aeabi_dadd+0x364>
 80017a4:	4c7f      	ldr	r4, [pc, #508]	; (80019a4 <__aeabi_dadd+0x630>)
 80017a6:	42a6      	cmp	r6, r4
 80017a8:	d05b      	beq.n	8001862 <__aeabi_dadd+0x4ee>
 80017aa:	2480      	movs	r4, #128	; 0x80
 80017ac:	0424      	lsls	r4, r4, #16
 80017ae:	425b      	negs	r3, r3
 80017b0:	4321      	orrs	r1, r4
 80017b2:	e727      	b.n	8001604 <__aeabi_dadd+0x290>
 80017b4:	2e00      	cmp	r6, #0
 80017b6:	d10c      	bne.n	80017d2 <__aeabi_dadd+0x45e>
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d100      	bne.n	80017be <__aeabi_dadd+0x44a>
 80017bc:	e0cb      	b.n	8001956 <__aeabi_dadd+0x5e2>
 80017be:	4664      	mov	r4, ip
 80017c0:	0039      	movs	r1, r7
 80017c2:	0010      	movs	r0, r2
 80017c4:	4d77      	ldr	r5, [pc, #476]	; (80019a4 <__aeabi_dadd+0x630>)
 80017c6:	e6d7      	b.n	8001578 <__aeabi_dadd+0x204>
 80017c8:	4f76      	ldr	r7, [pc, #472]	; (80019a4 <__aeabi_dadd+0x630>)
 80017ca:	42bb      	cmp	r3, r7
 80017cc:	d018      	beq.n	8001800 <__aeabi_dadd+0x48c>
 80017ce:	0033      	movs	r3, r6
 80017d0:	e675      	b.n	80014be <__aeabi_dadd+0x14a>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d014      	beq.n	8001800 <__aeabi_dadd+0x48c>
 80017d6:	074b      	lsls	r3, r1, #29
 80017d8:	08c0      	lsrs	r0, r0, #3
 80017da:	4318      	orrs	r0, r3
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	08c9      	lsrs	r1, r1, #3
 80017e0:	031b      	lsls	r3, r3, #12
 80017e2:	4219      	tst	r1, r3
 80017e4:	d007      	beq.n	80017f6 <__aeabi_dadd+0x482>
 80017e6:	08fc      	lsrs	r4, r7, #3
 80017e8:	421c      	tst	r4, r3
 80017ea:	d104      	bne.n	80017f6 <__aeabi_dadd+0x482>
 80017ec:	0779      	lsls	r1, r7, #29
 80017ee:	08d0      	lsrs	r0, r2, #3
 80017f0:	4308      	orrs	r0, r1
 80017f2:	46e1      	mov	r9, ip
 80017f4:	0021      	movs	r1, r4
 80017f6:	464c      	mov	r4, r9
 80017f8:	0f42      	lsrs	r2, r0, #29
 80017fa:	00c9      	lsls	r1, r1, #3
 80017fc:	4311      	orrs	r1, r2
 80017fe:	00c0      	lsls	r0, r0, #3
 8001800:	4d68      	ldr	r5, [pc, #416]	; (80019a4 <__aeabi_dadd+0x630>)
 8001802:	e6b9      	b.n	8001578 <__aeabi_dadd+0x204>
 8001804:	001d      	movs	r5, r3
 8001806:	2200      	movs	r2, #0
 8001808:	2300      	movs	r3, #0
 800180a:	e6c0      	b.n	800158e <__aeabi_dadd+0x21a>
 800180c:	2d00      	cmp	r5, #0
 800180e:	d15b      	bne.n	80018c8 <__aeabi_dadd+0x554>
 8001810:	000d      	movs	r5, r1
 8001812:	4305      	orrs	r5, r0
 8001814:	d100      	bne.n	8001818 <__aeabi_dadd+0x4a4>
 8001816:	e6e2      	b.n	80015de <__aeabi_dadd+0x26a>
 8001818:	1c5d      	adds	r5, r3, #1
 800181a:	d100      	bne.n	800181e <__aeabi_dadd+0x4aa>
 800181c:	e0b0      	b.n	8001980 <__aeabi_dadd+0x60c>
 800181e:	4d61      	ldr	r5, [pc, #388]	; (80019a4 <__aeabi_dadd+0x630>)
 8001820:	42ae      	cmp	r6, r5
 8001822:	d01f      	beq.n	8001864 <__aeabi_dadd+0x4f0>
 8001824:	43db      	mvns	r3, r3
 8001826:	2b38      	cmp	r3, #56	; 0x38
 8001828:	dc71      	bgt.n	800190e <__aeabi_dadd+0x59a>
 800182a:	2b1f      	cmp	r3, #31
 800182c:	dd00      	ble.n	8001830 <__aeabi_dadd+0x4bc>
 800182e:	e096      	b.n	800195e <__aeabi_dadd+0x5ea>
 8001830:	2520      	movs	r5, #32
 8001832:	000f      	movs	r7, r1
 8001834:	1aed      	subs	r5, r5, r3
 8001836:	40af      	lsls	r7, r5
 8001838:	46b9      	mov	r9, r7
 800183a:	0007      	movs	r7, r0
 800183c:	46aa      	mov	sl, r5
 800183e:	40df      	lsrs	r7, r3
 8001840:	464d      	mov	r5, r9
 8001842:	433d      	orrs	r5, r7
 8001844:	002f      	movs	r7, r5
 8001846:	4655      	mov	r5, sl
 8001848:	40a8      	lsls	r0, r5
 800184a:	40d9      	lsrs	r1, r3
 800184c:	1e45      	subs	r5, r0, #1
 800184e:	41a8      	sbcs	r0, r5
 8001850:	4488      	add	r8, r1
 8001852:	4307      	orrs	r7, r0
 8001854:	18bf      	adds	r7, r7, r2
 8001856:	4297      	cmp	r7, r2
 8001858:	4192      	sbcs	r2, r2
 800185a:	4251      	negs	r1, r2
 800185c:	4441      	add	r1, r8
 800185e:	0035      	movs	r5, r6
 8001860:	e63a      	b.n	80014d8 <__aeabi_dadd+0x164>
 8001862:	4664      	mov	r4, ip
 8001864:	0035      	movs	r5, r6
 8001866:	4641      	mov	r1, r8
 8001868:	0010      	movs	r0, r2
 800186a:	e685      	b.n	8001578 <__aeabi_dadd+0x204>
 800186c:	000b      	movs	r3, r1
 800186e:	4303      	orrs	r3, r0
 8001870:	2d00      	cmp	r5, #0
 8001872:	d000      	beq.n	8001876 <__aeabi_dadd+0x502>
 8001874:	e663      	b.n	800153e <__aeabi_dadd+0x1ca>
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f5      	beq.n	8001866 <__aeabi_dadd+0x4f2>
 800187a:	4643      	mov	r3, r8
 800187c:	4313      	orrs	r3, r2
 800187e:	d100      	bne.n	8001882 <__aeabi_dadd+0x50e>
 8001880:	e67a      	b.n	8001578 <__aeabi_dadd+0x204>
 8001882:	1887      	adds	r7, r0, r2
 8001884:	4287      	cmp	r7, r0
 8001886:	4180      	sbcs	r0, r0
 8001888:	2207      	movs	r2, #7
 800188a:	4441      	add	r1, r8
 800188c:	4240      	negs	r0, r0
 800188e:	1809      	adds	r1, r1, r0
 8001890:	403a      	ands	r2, r7
 8001892:	020b      	lsls	r3, r1, #8
 8001894:	d400      	bmi.n	8001898 <__aeabi_dadd+0x524>
 8001896:	e6d5      	b.n	8001644 <__aeabi_dadd+0x2d0>
 8001898:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <__aeabi_dadd+0x634>)
 800189a:	3501      	adds	r5, #1
 800189c:	4019      	ands	r1, r3
 800189e:	e5c9      	b.n	8001434 <__aeabi_dadd+0xc0>
 80018a0:	0038      	movs	r0, r7
 80018a2:	e669      	b.n	8001578 <__aeabi_dadd+0x204>
 80018a4:	001e      	movs	r6, r3
 80018a6:	4647      	mov	r7, r8
 80018a8:	3e20      	subs	r6, #32
 80018aa:	40f7      	lsrs	r7, r6
 80018ac:	46bc      	mov	ip, r7
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d004      	beq.n	80018bc <__aeabi_dadd+0x548>
 80018b2:	2640      	movs	r6, #64	; 0x40
 80018b4:	1af3      	subs	r3, r6, r3
 80018b6:	4646      	mov	r6, r8
 80018b8:	409e      	lsls	r6, r3
 80018ba:	4332      	orrs	r2, r6
 80018bc:	0017      	movs	r7, r2
 80018be:	4663      	mov	r3, ip
 80018c0:	1e7a      	subs	r2, r7, #1
 80018c2:	4197      	sbcs	r7, r2
 80018c4:	431f      	orrs	r7, r3
 80018c6:	e602      	b.n	80014ce <__aeabi_dadd+0x15a>
 80018c8:	4d36      	ldr	r5, [pc, #216]	; (80019a4 <__aeabi_dadd+0x630>)
 80018ca:	42ae      	cmp	r6, r5
 80018cc:	d0ca      	beq.n	8001864 <__aeabi_dadd+0x4f0>
 80018ce:	2580      	movs	r5, #128	; 0x80
 80018d0:	042d      	lsls	r5, r5, #16
 80018d2:	425b      	negs	r3, r3
 80018d4:	4329      	orrs	r1, r5
 80018d6:	e7a6      	b.n	8001826 <__aeabi_dadd+0x4b2>
 80018d8:	4308      	orrs	r0, r1
 80018da:	1e41      	subs	r1, r0, #1
 80018dc:	4188      	sbcs	r0, r1
 80018de:	e6a6      	b.n	800162e <__aeabi_dadd+0x2ba>
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dadd+0x572>
 80018e4:	e648      	b.n	8001578 <__aeabi_dadd+0x204>
 80018e6:	1a87      	subs	r7, r0, r2
 80018e8:	4643      	mov	r3, r8
 80018ea:	42b8      	cmp	r0, r7
 80018ec:	41b6      	sbcs	r6, r6
 80018ee:	1acb      	subs	r3, r1, r3
 80018f0:	4276      	negs	r6, r6
 80018f2:	1b9e      	subs	r6, r3, r6
 80018f4:	0233      	lsls	r3, r6, #8
 80018f6:	d54b      	bpl.n	8001990 <__aeabi_dadd+0x61c>
 80018f8:	1a17      	subs	r7, r2, r0
 80018fa:	4643      	mov	r3, r8
 80018fc:	42ba      	cmp	r2, r7
 80018fe:	4192      	sbcs	r2, r2
 8001900:	1a59      	subs	r1, r3, r1
 8001902:	4252      	negs	r2, r2
 8001904:	1a89      	subs	r1, r1, r2
 8001906:	2207      	movs	r2, #7
 8001908:	4664      	mov	r4, ip
 800190a:	403a      	ands	r2, r7
 800190c:	e592      	b.n	8001434 <__aeabi_dadd+0xc0>
 800190e:	4301      	orrs	r1, r0
 8001910:	000f      	movs	r7, r1
 8001912:	1e79      	subs	r1, r7, #1
 8001914:	418f      	sbcs	r7, r1
 8001916:	e79d      	b.n	8001854 <__aeabi_dadd+0x4e0>
 8001918:	001c      	movs	r4, r3
 800191a:	000f      	movs	r7, r1
 800191c:	3c20      	subs	r4, #32
 800191e:	40e7      	lsrs	r7, r4
 8001920:	2b20      	cmp	r3, #32
 8001922:	d003      	beq.n	800192c <__aeabi_dadd+0x5b8>
 8001924:	2440      	movs	r4, #64	; 0x40
 8001926:	1ae3      	subs	r3, r4, r3
 8001928:	4099      	lsls	r1, r3
 800192a:	4308      	orrs	r0, r1
 800192c:	1e41      	subs	r1, r0, #1
 800192e:	4188      	sbcs	r0, r1
 8001930:	4338      	orrs	r0, r7
 8001932:	e67c      	b.n	800162e <__aeabi_dadd+0x2ba>
 8001934:	2200      	movs	r2, #0
 8001936:	2400      	movs	r4, #0
 8001938:	e625      	b.n	8001586 <__aeabi_dadd+0x212>
 800193a:	1a17      	subs	r7, r2, r0
 800193c:	4643      	mov	r3, r8
 800193e:	42ba      	cmp	r2, r7
 8001940:	4192      	sbcs	r2, r2
 8001942:	1a59      	subs	r1, r3, r1
 8001944:	4252      	negs	r2, r2
 8001946:	1a89      	subs	r1, r1, r2
 8001948:	4664      	mov	r4, ip
 800194a:	0035      	movs	r5, r6
 800194c:	e543      	b.n	80013d6 <__aeabi_dadd+0x62>
 800194e:	4641      	mov	r1, r8
 8001950:	0010      	movs	r0, r2
 8001952:	4d14      	ldr	r5, [pc, #80]	; (80019a4 <__aeabi_dadd+0x630>)
 8001954:	e610      	b.n	8001578 <__aeabi_dadd+0x204>
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	2400      	movs	r4, #0
 800195a:	0312      	lsls	r2, r2, #12
 800195c:	e680      	b.n	8001660 <__aeabi_dadd+0x2ec>
 800195e:	001d      	movs	r5, r3
 8001960:	000f      	movs	r7, r1
 8001962:	3d20      	subs	r5, #32
 8001964:	40ef      	lsrs	r7, r5
 8001966:	46bc      	mov	ip, r7
 8001968:	2b20      	cmp	r3, #32
 800196a:	d003      	beq.n	8001974 <__aeabi_dadd+0x600>
 800196c:	2540      	movs	r5, #64	; 0x40
 800196e:	1aeb      	subs	r3, r5, r3
 8001970:	4099      	lsls	r1, r3
 8001972:	4308      	orrs	r0, r1
 8001974:	0007      	movs	r7, r0
 8001976:	4663      	mov	r3, ip
 8001978:	1e78      	subs	r0, r7, #1
 800197a:	4187      	sbcs	r7, r0
 800197c:	431f      	orrs	r7, r3
 800197e:	e769      	b.n	8001854 <__aeabi_dadd+0x4e0>
 8001980:	1887      	adds	r7, r0, r2
 8001982:	4297      	cmp	r7, r2
 8001984:	419b      	sbcs	r3, r3
 8001986:	4441      	add	r1, r8
 8001988:	425b      	negs	r3, r3
 800198a:	18c9      	adds	r1, r1, r3
 800198c:	0035      	movs	r5, r6
 800198e:	e5a3      	b.n	80014d8 <__aeabi_dadd+0x164>
 8001990:	003b      	movs	r3, r7
 8001992:	4333      	orrs	r3, r6
 8001994:	d0ce      	beq.n	8001934 <__aeabi_dadd+0x5c0>
 8001996:	2207      	movs	r2, #7
 8001998:	0031      	movs	r1, r6
 800199a:	403a      	ands	r2, r7
 800199c:	e652      	b.n	8001644 <__aeabi_dadd+0x2d0>
 800199e:	2300      	movs	r3, #0
 80019a0:	001a      	movs	r2, r3
 80019a2:	e5f4      	b.n	800158e <__aeabi_dadd+0x21a>
 80019a4:	000007ff 	.word	0x000007ff
 80019a8:	ff7fffff 	.word	0xff7fffff

080019ac <__aeabi_ddiv>:
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	4657      	mov	r7, sl
 80019b0:	46de      	mov	lr, fp
 80019b2:	464e      	mov	r6, r9
 80019b4:	4645      	mov	r5, r8
 80019b6:	b5e0      	push	{r5, r6, r7, lr}
 80019b8:	4683      	mov	fp, r0
 80019ba:	0007      	movs	r7, r0
 80019bc:	030e      	lsls	r6, r1, #12
 80019be:	0048      	lsls	r0, r1, #1
 80019c0:	b085      	sub	sp, #20
 80019c2:	4692      	mov	sl, r2
 80019c4:	001c      	movs	r4, r3
 80019c6:	0b36      	lsrs	r6, r6, #12
 80019c8:	0d40      	lsrs	r0, r0, #21
 80019ca:	0fcd      	lsrs	r5, r1, #31
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_ddiv+0x26>
 80019d0:	e09d      	b.n	8001b0e <__aeabi_ddiv+0x162>
 80019d2:	4b95      	ldr	r3, [pc, #596]	; (8001c28 <__aeabi_ddiv+0x27c>)
 80019d4:	4298      	cmp	r0, r3
 80019d6:	d039      	beq.n	8001a4c <__aeabi_ddiv+0xa0>
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	00f6      	lsls	r6, r6, #3
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	431e      	orrs	r6, r3
 80019e0:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <__aeabi_ddiv+0x280>)
 80019e2:	0f7b      	lsrs	r3, r7, #29
 80019e4:	4333      	orrs	r3, r6
 80019e6:	4699      	mov	r9, r3
 80019e8:	4694      	mov	ip, r2
 80019ea:	0003      	movs	r3, r0
 80019ec:	4463      	add	r3, ip
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2300      	movs	r3, #0
 80019f2:	2600      	movs	r6, #0
 80019f4:	00ff      	lsls	r7, r7, #3
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	0323      	lsls	r3, r4, #12
 80019fa:	0b1b      	lsrs	r3, r3, #12
 80019fc:	4698      	mov	r8, r3
 80019fe:	0063      	lsls	r3, r4, #1
 8001a00:	0fe4      	lsrs	r4, r4, #31
 8001a02:	4652      	mov	r2, sl
 8001a04:	0d5b      	lsrs	r3, r3, #21
 8001a06:	9401      	str	r4, [sp, #4]
 8001a08:	d100      	bne.n	8001a0c <__aeabi_ddiv+0x60>
 8001a0a:	e0b3      	b.n	8001b74 <__aeabi_ddiv+0x1c8>
 8001a0c:	4986      	ldr	r1, [pc, #536]	; (8001c28 <__aeabi_ddiv+0x27c>)
 8001a0e:	428b      	cmp	r3, r1
 8001a10:	d100      	bne.n	8001a14 <__aeabi_ddiv+0x68>
 8001a12:	e09e      	b.n	8001b52 <__aeabi_ddiv+0x1a6>
 8001a14:	4642      	mov	r2, r8
 8001a16:	00d1      	lsls	r1, r2, #3
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	0412      	lsls	r2, r2, #16
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	4651      	mov	r1, sl
 8001a20:	0f49      	lsrs	r1, r1, #29
 8001a22:	4311      	orrs	r1, r2
 8001a24:	468b      	mov	fp, r1
 8001a26:	4981      	ldr	r1, [pc, #516]	; (8001c2c <__aeabi_ddiv+0x280>)
 8001a28:	4652      	mov	r2, sl
 8001a2a:	468c      	mov	ip, r1
 8001a2c:	9900      	ldr	r1, [sp, #0]
 8001a2e:	4463      	add	r3, ip
 8001a30:	1acb      	subs	r3, r1, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	00d2      	lsls	r2, r2, #3
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	002b      	movs	r3, r5
 8001a3a:	4063      	eors	r3, r4
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	2e0f      	cmp	r6, #15
 8001a40:	d900      	bls.n	8001a44 <__aeabi_ddiv+0x98>
 8001a42:	e105      	b.n	8001c50 <__aeabi_ddiv+0x2a4>
 8001a44:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <__aeabi_ddiv+0x284>)
 8001a46:	00b6      	lsls	r6, r6, #2
 8001a48:	599b      	ldr	r3, [r3, r6]
 8001a4a:	469f      	mov	pc, r3
 8001a4c:	465b      	mov	r3, fp
 8001a4e:	4333      	orrs	r3, r6
 8001a50:	4699      	mov	r9, r3
 8001a52:	d000      	beq.n	8001a56 <__aeabi_ddiv+0xaa>
 8001a54:	e0b8      	b.n	8001bc8 <__aeabi_ddiv+0x21c>
 8001a56:	2302      	movs	r3, #2
 8001a58:	2608      	movs	r6, #8
 8001a5a:	2700      	movs	r7, #0
 8001a5c:	9000      	str	r0, [sp, #0]
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	e7ca      	b.n	80019f8 <__aeabi_ddiv+0x4c>
 8001a62:	46cb      	mov	fp, r9
 8001a64:	003a      	movs	r2, r7
 8001a66:	9902      	ldr	r1, [sp, #8]
 8001a68:	9501      	str	r5, [sp, #4]
 8001a6a:	9b01      	ldr	r3, [sp, #4]
 8001a6c:	469a      	mov	sl, r3
 8001a6e:	2902      	cmp	r1, #2
 8001a70:	d027      	beq.n	8001ac2 <__aeabi_ddiv+0x116>
 8001a72:	2903      	cmp	r1, #3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_ddiv+0xcc>
 8001a76:	e280      	b.n	8001f7a <__aeabi_ddiv+0x5ce>
 8001a78:	2901      	cmp	r1, #1
 8001a7a:	d044      	beq.n	8001b06 <__aeabi_ddiv+0x15a>
 8001a7c:	496d      	ldr	r1, [pc, #436]	; (8001c34 <__aeabi_ddiv+0x288>)
 8001a7e:	9b00      	ldr	r3, [sp, #0]
 8001a80:	468c      	mov	ip, r1
 8001a82:	4463      	add	r3, ip
 8001a84:	001c      	movs	r4, r3
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	dd38      	ble.n	8001afc <__aeabi_ddiv+0x150>
 8001a8a:	0753      	lsls	r3, r2, #29
 8001a8c:	d000      	beq.n	8001a90 <__aeabi_ddiv+0xe4>
 8001a8e:	e213      	b.n	8001eb8 <__aeabi_ddiv+0x50c>
 8001a90:	08d2      	lsrs	r2, r2, #3
 8001a92:	465b      	mov	r3, fp
 8001a94:	01db      	lsls	r3, r3, #7
 8001a96:	d509      	bpl.n	8001aac <__aeabi_ddiv+0x100>
 8001a98:	4659      	mov	r1, fp
 8001a9a:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <__aeabi_ddiv+0x28c>)
 8001a9c:	4019      	ands	r1, r3
 8001a9e:	468b      	mov	fp, r1
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	00c9      	lsls	r1, r1, #3
 8001aa4:	468c      	mov	ip, r1
 8001aa6:	9b00      	ldr	r3, [sp, #0]
 8001aa8:	4463      	add	r3, ip
 8001aaa:	001c      	movs	r4, r3
 8001aac:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <__aeabi_ddiv+0x290>)
 8001aae:	429c      	cmp	r4, r3
 8001ab0:	dc07      	bgt.n	8001ac2 <__aeabi_ddiv+0x116>
 8001ab2:	465b      	mov	r3, fp
 8001ab4:	0564      	lsls	r4, r4, #21
 8001ab6:	075f      	lsls	r7, r3, #29
 8001ab8:	025b      	lsls	r3, r3, #9
 8001aba:	4317      	orrs	r7, r2
 8001abc:	0b1b      	lsrs	r3, r3, #12
 8001abe:	0d62      	lsrs	r2, r4, #21
 8001ac0:	e002      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2700      	movs	r7, #0
 8001ac6:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <__aeabi_ddiv+0x27c>)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	031b      	lsls	r3, r3, #12
 8001acc:	0b1c      	lsrs	r4, r3, #12
 8001ace:	0d0b      	lsrs	r3, r1, #20
 8001ad0:	051b      	lsls	r3, r3, #20
 8001ad2:	4323      	orrs	r3, r4
 8001ad4:	0514      	lsls	r4, r2, #20
 8001ad6:	4a5a      	ldr	r2, [pc, #360]	; (8001c40 <__aeabi_ddiv+0x294>)
 8001ad8:	0038      	movs	r0, r7
 8001ada:	4013      	ands	r3, r2
 8001adc:	431c      	orrs	r4, r3
 8001ade:	4653      	mov	r3, sl
 8001ae0:	0064      	lsls	r4, r4, #1
 8001ae2:	07db      	lsls	r3, r3, #31
 8001ae4:	0864      	lsrs	r4, r4, #1
 8001ae6:	431c      	orrs	r4, r3
 8001ae8:	0021      	movs	r1, r4
 8001aea:	b005      	add	sp, #20
 8001aec:	bc3c      	pop	{r2, r3, r4, r5}
 8001aee:	4690      	mov	r8, r2
 8001af0:	4699      	mov	r9, r3
 8001af2:	46a2      	mov	sl, r4
 8001af4:	46ab      	mov	fp, r5
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af8:	2201      	movs	r2, #1
 8001afa:	4252      	negs	r2, r2
 8001afc:	2301      	movs	r3, #1
 8001afe:	1b1b      	subs	r3, r3, r4
 8001b00:	2b38      	cmp	r3, #56	; 0x38
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_ddiv+0x15a>
 8001b04:	e1ad      	b.n	8001e62 <__aeabi_ddiv+0x4b6>
 8001b06:	2200      	movs	r2, #0
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2700      	movs	r7, #0
 8001b0c:	e7dc      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001b0e:	465b      	mov	r3, fp
 8001b10:	4333      	orrs	r3, r6
 8001b12:	4699      	mov	r9, r3
 8001b14:	d05e      	beq.n	8001bd4 <__aeabi_ddiv+0x228>
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x170>
 8001b1a:	e18a      	b.n	8001e32 <__aeabi_ddiv+0x486>
 8001b1c:	0030      	movs	r0, r6
 8001b1e:	f001 fa4f 	bl	8002fc0 <__clzsi2>
 8001b22:	0003      	movs	r3, r0
 8001b24:	3b0b      	subs	r3, #11
 8001b26:	2b1c      	cmp	r3, #28
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_ddiv+0x180>
 8001b2a:	e17b      	b.n	8001e24 <__aeabi_ddiv+0x478>
 8001b2c:	221d      	movs	r2, #29
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	465a      	mov	r2, fp
 8001b32:	0001      	movs	r1, r0
 8001b34:	40da      	lsrs	r2, r3
 8001b36:	3908      	subs	r1, #8
 8001b38:	408e      	lsls	r6, r1
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	465f      	mov	r7, fp
 8001b3e:	4333      	orrs	r3, r6
 8001b40:	4699      	mov	r9, r3
 8001b42:	408f      	lsls	r7, r1
 8001b44:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <__aeabi_ddiv+0x298>)
 8001b46:	2600      	movs	r6, #0
 8001b48:	1a1b      	subs	r3, r3, r0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	e752      	b.n	80019f8 <__aeabi_ddiv+0x4c>
 8001b52:	4641      	mov	r1, r8
 8001b54:	4653      	mov	r3, sl
 8001b56:	430b      	orrs	r3, r1
 8001b58:	493b      	ldr	r1, [pc, #236]	; (8001c48 <__aeabi_ddiv+0x29c>)
 8001b5a:	469b      	mov	fp, r3
 8001b5c:	468c      	mov	ip, r1
 8001b5e:	9b00      	ldr	r3, [sp, #0]
 8001b60:	4463      	add	r3, ip
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	465b      	mov	r3, fp
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d13b      	bne.n	8001be2 <__aeabi_ddiv+0x236>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	431e      	orrs	r6, r3
 8001b70:	2102      	movs	r1, #2
 8001b72:	e761      	b.n	8001a38 <__aeabi_ddiv+0x8c>
 8001b74:	4643      	mov	r3, r8
 8001b76:	4313      	orrs	r3, r2
 8001b78:	469b      	mov	fp, r3
 8001b7a:	d037      	beq.n	8001bec <__aeabi_ddiv+0x240>
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d100      	bne.n	8001b84 <__aeabi_ddiv+0x1d8>
 8001b82:	e162      	b.n	8001e4a <__aeabi_ddiv+0x49e>
 8001b84:	4640      	mov	r0, r8
 8001b86:	f001 fa1b 	bl	8002fc0 <__clzsi2>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	3b0b      	subs	r3, #11
 8001b8e:	2b1c      	cmp	r3, #28
 8001b90:	dd00      	ble.n	8001b94 <__aeabi_ddiv+0x1e8>
 8001b92:	e153      	b.n	8001e3c <__aeabi_ddiv+0x490>
 8001b94:	0002      	movs	r2, r0
 8001b96:	4641      	mov	r1, r8
 8001b98:	3a08      	subs	r2, #8
 8001b9a:	4091      	lsls	r1, r2
 8001b9c:	4688      	mov	r8, r1
 8001b9e:	211d      	movs	r1, #29
 8001ba0:	1acb      	subs	r3, r1, r3
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	40d9      	lsrs	r1, r3
 8001ba6:	000b      	movs	r3, r1
 8001ba8:	4641      	mov	r1, r8
 8001baa:	430b      	orrs	r3, r1
 8001bac:	469b      	mov	fp, r3
 8001bae:	4653      	mov	r3, sl
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	001a      	movs	r2, r3
 8001bb4:	9b00      	ldr	r3, [sp, #0]
 8001bb6:	4925      	ldr	r1, [pc, #148]	; (8001c4c <__aeabi_ddiv+0x2a0>)
 8001bb8:	469c      	mov	ip, r3
 8001bba:	4460      	add	r0, ip
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	468c      	mov	ip, r1
 8001bc0:	4463      	add	r3, ip
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	e737      	b.n	8001a38 <__aeabi_ddiv+0x8c>
 8001bc8:	2303      	movs	r3, #3
 8001bca:	46b1      	mov	r9, r6
 8001bcc:	9000      	str	r0, [sp, #0]
 8001bce:	260c      	movs	r6, #12
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	e711      	b.n	80019f8 <__aeabi_ddiv+0x4c>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	2604      	movs	r6, #4
 8001bdc:	2700      	movs	r7, #0
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	e70a      	b.n	80019f8 <__aeabi_ddiv+0x4c>
 8001be2:	2303      	movs	r3, #3
 8001be4:	46c3      	mov	fp, r8
 8001be6:	431e      	orrs	r6, r3
 8001be8:	2103      	movs	r1, #3
 8001bea:	e725      	b.n	8001a38 <__aeabi_ddiv+0x8c>
 8001bec:	3301      	adds	r3, #1
 8001bee:	431e      	orrs	r6, r3
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	e720      	b.n	8001a38 <__aeabi_ddiv+0x8c>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	469a      	mov	sl, r3
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	2700      	movs	r7, #0
 8001bfe:	031b      	lsls	r3, r3, #12
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <__aeabi_ddiv+0x27c>)
 8001c02:	e761      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	4649      	mov	r1, r9
 8001c08:	031b      	lsls	r3, r3, #12
 8001c0a:	4219      	tst	r1, r3
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_ddiv+0x264>
 8001c0e:	e0e2      	b.n	8001dd6 <__aeabi_ddiv+0x42a>
 8001c10:	4659      	mov	r1, fp
 8001c12:	4219      	tst	r1, r3
 8001c14:	d000      	beq.n	8001c18 <__aeabi_ddiv+0x26c>
 8001c16:	e0de      	b.n	8001dd6 <__aeabi_ddiv+0x42a>
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	031b      	lsls	r3, r3, #12
 8001c1c:	0017      	movs	r7, r2
 8001c1e:	0b1b      	lsrs	r3, r3, #12
 8001c20:	46a2      	mov	sl, r4
 8001c22:	4a01      	ldr	r2, [pc, #4]	; (8001c28 <__aeabi_ddiv+0x27c>)
 8001c24:	e750      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	000007ff 	.word	0x000007ff
 8001c2c:	fffffc01 	.word	0xfffffc01
 8001c30:	0800f410 	.word	0x0800f410
 8001c34:	000003ff 	.word	0x000003ff
 8001c38:	feffffff 	.word	0xfeffffff
 8001c3c:	000007fe 	.word	0x000007fe
 8001c40:	800fffff 	.word	0x800fffff
 8001c44:	fffffc0d 	.word	0xfffffc0d
 8001c48:	fffff801 	.word	0xfffff801
 8001c4c:	000003f3 	.word	0x000003f3
 8001c50:	45d9      	cmp	r9, fp
 8001c52:	d900      	bls.n	8001c56 <__aeabi_ddiv+0x2aa>
 8001c54:	e0cb      	b.n	8001dee <__aeabi_ddiv+0x442>
 8001c56:	d100      	bne.n	8001c5a <__aeabi_ddiv+0x2ae>
 8001c58:	e0c6      	b.n	8001de8 <__aeabi_ddiv+0x43c>
 8001c5a:	003c      	movs	r4, r7
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	2700      	movs	r7, #0
 8001c60:	9b00      	ldr	r3, [sp, #0]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	465b      	mov	r3, fp
 8001c68:	0e16      	lsrs	r6, r2, #24
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	431e      	orrs	r6, r3
 8001c6e:	0213      	lsls	r3, r2, #8
 8001c70:	4698      	mov	r8, r3
 8001c72:	0433      	lsls	r3, r6, #16
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	4699      	mov	r9, r3
 8001c78:	0c31      	lsrs	r1, r6, #16
 8001c7a:	9101      	str	r1, [sp, #4]
 8001c7c:	f7fe faca 	bl	8000214 <__aeabi_uidivmod>
 8001c80:	464a      	mov	r2, r9
 8001c82:	4342      	muls	r2, r0
 8001c84:	040b      	lsls	r3, r1, #16
 8001c86:	0c21      	lsrs	r1, r4, #16
 8001c88:	0005      	movs	r5, r0
 8001c8a:	4319      	orrs	r1, r3
 8001c8c:	428a      	cmp	r2, r1
 8001c8e:	d907      	bls.n	8001ca0 <__aeabi_ddiv+0x2f4>
 8001c90:	1989      	adds	r1, r1, r6
 8001c92:	3d01      	subs	r5, #1
 8001c94:	428e      	cmp	r6, r1
 8001c96:	d803      	bhi.n	8001ca0 <__aeabi_ddiv+0x2f4>
 8001c98:	428a      	cmp	r2, r1
 8001c9a:	d901      	bls.n	8001ca0 <__aeabi_ddiv+0x2f4>
 8001c9c:	1e85      	subs	r5, r0, #2
 8001c9e:	1989      	adds	r1, r1, r6
 8001ca0:	1a88      	subs	r0, r1, r2
 8001ca2:	9901      	ldr	r1, [sp, #4]
 8001ca4:	f7fe fab6 	bl	8000214 <__aeabi_uidivmod>
 8001ca8:	0409      	lsls	r1, r1, #16
 8001caa:	468c      	mov	ip, r1
 8001cac:	464a      	mov	r2, r9
 8001cae:	0421      	lsls	r1, r4, #16
 8001cb0:	4664      	mov	r4, ip
 8001cb2:	4342      	muls	r2, r0
 8001cb4:	0c09      	lsrs	r1, r1, #16
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	4321      	orrs	r1, r4
 8001cba:	428a      	cmp	r2, r1
 8001cbc:	d904      	bls.n	8001cc8 <__aeabi_ddiv+0x31c>
 8001cbe:	1989      	adds	r1, r1, r6
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	428e      	cmp	r6, r1
 8001cc4:	d800      	bhi.n	8001cc8 <__aeabi_ddiv+0x31c>
 8001cc6:	e0f1      	b.n	8001eac <__aeabi_ddiv+0x500>
 8001cc8:	042d      	lsls	r5, r5, #16
 8001cca:	431d      	orrs	r5, r3
 8001ccc:	46ab      	mov	fp, r5
 8001cce:	4643      	mov	r3, r8
 8001cd0:	1a89      	subs	r1, r1, r2
 8001cd2:	4642      	mov	r2, r8
 8001cd4:	0c28      	lsrs	r0, r5, #16
 8001cd6:	0412      	lsls	r2, r2, #16
 8001cd8:	0c1d      	lsrs	r5, r3, #16
 8001cda:	465b      	mov	r3, fp
 8001cdc:	0c14      	lsrs	r4, r2, #16
 8001cde:	0022      	movs	r2, r4
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	0c1b      	lsrs	r3, r3, #16
 8001ce4:	435a      	muls	r2, r3
 8001ce6:	9403      	str	r4, [sp, #12]
 8001ce8:	436b      	muls	r3, r5
 8001cea:	4344      	muls	r4, r0
 8001cec:	9502      	str	r5, [sp, #8]
 8001cee:	4368      	muls	r0, r5
 8001cf0:	191b      	adds	r3, r3, r4
 8001cf2:	0c15      	lsrs	r5, r2, #16
 8001cf4:	18eb      	adds	r3, r5, r3
 8001cf6:	429c      	cmp	r4, r3
 8001cf8:	d903      	bls.n	8001d02 <__aeabi_ddiv+0x356>
 8001cfa:	2480      	movs	r4, #128	; 0x80
 8001cfc:	0264      	lsls	r4, r4, #9
 8001cfe:	46a4      	mov	ip, r4
 8001d00:	4460      	add	r0, ip
 8001d02:	0c1c      	lsrs	r4, r3, #16
 8001d04:	0415      	lsls	r5, r2, #16
 8001d06:	041b      	lsls	r3, r3, #16
 8001d08:	0c2d      	lsrs	r5, r5, #16
 8001d0a:	1820      	adds	r0, r4, r0
 8001d0c:	195d      	adds	r5, r3, r5
 8001d0e:	4281      	cmp	r1, r0
 8001d10:	d377      	bcc.n	8001e02 <__aeabi_ddiv+0x456>
 8001d12:	d073      	beq.n	8001dfc <__aeabi_ddiv+0x450>
 8001d14:	1a0c      	subs	r4, r1, r0
 8001d16:	4aa2      	ldr	r2, [pc, #648]	; (8001fa0 <__aeabi_ddiv+0x5f4>)
 8001d18:	1b7d      	subs	r5, r7, r5
 8001d1a:	42af      	cmp	r7, r5
 8001d1c:	41bf      	sbcs	r7, r7
 8001d1e:	4694      	mov	ip, r2
 8001d20:	9b00      	ldr	r3, [sp, #0]
 8001d22:	427f      	negs	r7, r7
 8001d24:	4463      	add	r3, ip
 8001d26:	1be0      	subs	r0, r4, r7
 8001d28:	001c      	movs	r4, r3
 8001d2a:	4286      	cmp	r6, r0
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x384>
 8001d2e:	e0db      	b.n	8001ee8 <__aeabi_ddiv+0x53c>
 8001d30:	9901      	ldr	r1, [sp, #4]
 8001d32:	f7fe fa6f 	bl	8000214 <__aeabi_uidivmod>
 8001d36:	464a      	mov	r2, r9
 8001d38:	4342      	muls	r2, r0
 8001d3a:	040b      	lsls	r3, r1, #16
 8001d3c:	0c29      	lsrs	r1, r5, #16
 8001d3e:	0007      	movs	r7, r0
 8001d40:	4319      	orrs	r1, r3
 8001d42:	428a      	cmp	r2, r1
 8001d44:	d907      	bls.n	8001d56 <__aeabi_ddiv+0x3aa>
 8001d46:	1989      	adds	r1, r1, r6
 8001d48:	3f01      	subs	r7, #1
 8001d4a:	428e      	cmp	r6, r1
 8001d4c:	d803      	bhi.n	8001d56 <__aeabi_ddiv+0x3aa>
 8001d4e:	428a      	cmp	r2, r1
 8001d50:	d901      	bls.n	8001d56 <__aeabi_ddiv+0x3aa>
 8001d52:	1e87      	subs	r7, r0, #2
 8001d54:	1989      	adds	r1, r1, r6
 8001d56:	1a88      	subs	r0, r1, r2
 8001d58:	9901      	ldr	r1, [sp, #4]
 8001d5a:	f7fe fa5b 	bl	8000214 <__aeabi_uidivmod>
 8001d5e:	0409      	lsls	r1, r1, #16
 8001d60:	464a      	mov	r2, r9
 8001d62:	4689      	mov	r9, r1
 8001d64:	0429      	lsls	r1, r5, #16
 8001d66:	464d      	mov	r5, r9
 8001d68:	4342      	muls	r2, r0
 8001d6a:	0c09      	lsrs	r1, r1, #16
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	4329      	orrs	r1, r5
 8001d70:	428a      	cmp	r2, r1
 8001d72:	d907      	bls.n	8001d84 <__aeabi_ddiv+0x3d8>
 8001d74:	1989      	adds	r1, r1, r6
 8001d76:	3b01      	subs	r3, #1
 8001d78:	428e      	cmp	r6, r1
 8001d7a:	d803      	bhi.n	8001d84 <__aeabi_ddiv+0x3d8>
 8001d7c:	428a      	cmp	r2, r1
 8001d7e:	d901      	bls.n	8001d84 <__aeabi_ddiv+0x3d8>
 8001d80:	1e83      	subs	r3, r0, #2
 8001d82:	1989      	adds	r1, r1, r6
 8001d84:	043f      	lsls	r7, r7, #16
 8001d86:	1a89      	subs	r1, r1, r2
 8001d88:	003a      	movs	r2, r7
 8001d8a:	9f03      	ldr	r7, [sp, #12]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	0038      	movs	r0, r7
 8001d90:	0413      	lsls	r3, r2, #16
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	4358      	muls	r0, r3
 8001d96:	4681      	mov	r9, r0
 8001d98:	9802      	ldr	r0, [sp, #8]
 8001d9a:	0c15      	lsrs	r5, r2, #16
 8001d9c:	436f      	muls	r7, r5
 8001d9e:	4343      	muls	r3, r0
 8001da0:	4345      	muls	r5, r0
 8001da2:	4648      	mov	r0, r9
 8001da4:	0c00      	lsrs	r0, r0, #16
 8001da6:	4684      	mov	ip, r0
 8001da8:	19db      	adds	r3, r3, r7
 8001daa:	4463      	add	r3, ip
 8001dac:	429f      	cmp	r7, r3
 8001dae:	d903      	bls.n	8001db8 <__aeabi_ddiv+0x40c>
 8001db0:	2080      	movs	r0, #128	; 0x80
 8001db2:	0240      	lsls	r0, r0, #9
 8001db4:	4684      	mov	ip, r0
 8001db6:	4465      	add	r5, ip
 8001db8:	4648      	mov	r0, r9
 8001dba:	0c1f      	lsrs	r7, r3, #16
 8001dbc:	0400      	lsls	r0, r0, #16
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	0c00      	lsrs	r0, r0, #16
 8001dc2:	197d      	adds	r5, r7, r5
 8001dc4:	1818      	adds	r0, r3, r0
 8001dc6:	42a9      	cmp	r1, r5
 8001dc8:	d200      	bcs.n	8001dcc <__aeabi_ddiv+0x420>
 8001dca:	e084      	b.n	8001ed6 <__aeabi_ddiv+0x52a>
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_ddiv+0x424>
 8001dce:	e07f      	b.n	8001ed0 <__aeabi_ddiv+0x524>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	e657      	b.n	8001a86 <__aeabi_ddiv+0xda>
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	464a      	mov	r2, r9
 8001dda:	031b      	lsls	r3, r3, #12
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	031b      	lsls	r3, r3, #12
 8001de0:	0b1b      	lsrs	r3, r3, #12
 8001de2:	46aa      	mov	sl, r5
 8001de4:	4a6f      	ldr	r2, [pc, #444]	; (8001fa4 <__aeabi_ddiv+0x5f8>)
 8001de6:	e66f      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001de8:	42ba      	cmp	r2, r7
 8001dea:	d900      	bls.n	8001dee <__aeabi_ddiv+0x442>
 8001dec:	e735      	b.n	8001c5a <__aeabi_ddiv+0x2ae>
 8001dee:	464b      	mov	r3, r9
 8001df0:	07dc      	lsls	r4, r3, #31
 8001df2:	0858      	lsrs	r0, r3, #1
 8001df4:	087b      	lsrs	r3, r7, #1
 8001df6:	431c      	orrs	r4, r3
 8001df8:	07ff      	lsls	r7, r7, #31
 8001dfa:	e734      	b.n	8001c66 <__aeabi_ddiv+0x2ba>
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	42af      	cmp	r7, r5
 8001e00:	d289      	bcs.n	8001d16 <__aeabi_ddiv+0x36a>
 8001e02:	4447      	add	r7, r8
 8001e04:	4547      	cmp	r7, r8
 8001e06:	41a4      	sbcs	r4, r4
 8001e08:	465b      	mov	r3, fp
 8001e0a:	4264      	negs	r4, r4
 8001e0c:	19a4      	adds	r4, r4, r6
 8001e0e:	1864      	adds	r4, r4, r1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	42a6      	cmp	r6, r4
 8001e14:	d21e      	bcs.n	8001e54 <__aeabi_ddiv+0x4a8>
 8001e16:	42a0      	cmp	r0, r4
 8001e18:	d86d      	bhi.n	8001ef6 <__aeabi_ddiv+0x54a>
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_ddiv+0x472>
 8001e1c:	e0b6      	b.n	8001f8c <__aeabi_ddiv+0x5e0>
 8001e1e:	1a24      	subs	r4, r4, r0
 8001e20:	469b      	mov	fp, r3
 8001e22:	e778      	b.n	8001d16 <__aeabi_ddiv+0x36a>
 8001e24:	0003      	movs	r3, r0
 8001e26:	465a      	mov	r2, fp
 8001e28:	3b28      	subs	r3, #40	; 0x28
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	2700      	movs	r7, #0
 8001e2e:	4691      	mov	r9, r2
 8001e30:	e688      	b.n	8001b44 <__aeabi_ddiv+0x198>
 8001e32:	4658      	mov	r0, fp
 8001e34:	f001 f8c4 	bl	8002fc0 <__clzsi2>
 8001e38:	3020      	adds	r0, #32
 8001e3a:	e672      	b.n	8001b22 <__aeabi_ddiv+0x176>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	4652      	mov	r2, sl
 8001e40:	3b28      	subs	r3, #40	; 0x28
 8001e42:	409a      	lsls	r2, r3
 8001e44:	4693      	mov	fp, r2
 8001e46:	2200      	movs	r2, #0
 8001e48:	e6b4      	b.n	8001bb4 <__aeabi_ddiv+0x208>
 8001e4a:	4650      	mov	r0, sl
 8001e4c:	f001 f8b8 	bl	8002fc0 <__clzsi2>
 8001e50:	3020      	adds	r0, #32
 8001e52:	e69a      	b.n	8001b8a <__aeabi_ddiv+0x1de>
 8001e54:	42a6      	cmp	r6, r4
 8001e56:	d1e2      	bne.n	8001e1e <__aeabi_ddiv+0x472>
 8001e58:	45b8      	cmp	r8, r7
 8001e5a:	d9dc      	bls.n	8001e16 <__aeabi_ddiv+0x46a>
 8001e5c:	1a34      	subs	r4, r6, r0
 8001e5e:	469b      	mov	fp, r3
 8001e60:	e759      	b.n	8001d16 <__aeabi_ddiv+0x36a>
 8001e62:	2b1f      	cmp	r3, #31
 8001e64:	dc65      	bgt.n	8001f32 <__aeabi_ddiv+0x586>
 8001e66:	4c50      	ldr	r4, [pc, #320]	; (8001fa8 <__aeabi_ddiv+0x5fc>)
 8001e68:	9900      	ldr	r1, [sp, #0]
 8001e6a:	46a4      	mov	ip, r4
 8001e6c:	465c      	mov	r4, fp
 8001e6e:	4461      	add	r1, ip
 8001e70:	0008      	movs	r0, r1
 8001e72:	408c      	lsls	r4, r1
 8001e74:	0011      	movs	r1, r2
 8001e76:	4082      	lsls	r2, r0
 8001e78:	40d9      	lsrs	r1, r3
 8001e7a:	1e50      	subs	r0, r2, #1
 8001e7c:	4182      	sbcs	r2, r0
 8001e7e:	430c      	orrs	r4, r1
 8001e80:	4314      	orrs	r4, r2
 8001e82:	465a      	mov	r2, fp
 8001e84:	40da      	lsrs	r2, r3
 8001e86:	0013      	movs	r3, r2
 8001e88:	0762      	lsls	r2, r4, #29
 8001e8a:	d009      	beq.n	8001ea0 <__aeabi_ddiv+0x4f4>
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	4022      	ands	r2, r4
 8001e90:	2a04      	cmp	r2, #4
 8001e92:	d005      	beq.n	8001ea0 <__aeabi_ddiv+0x4f4>
 8001e94:	0022      	movs	r2, r4
 8001e96:	1d14      	adds	r4, r2, #4
 8001e98:	4294      	cmp	r4, r2
 8001e9a:	4189      	sbcs	r1, r1
 8001e9c:	4249      	negs	r1, r1
 8001e9e:	185b      	adds	r3, r3, r1
 8001ea0:	021a      	lsls	r2, r3, #8
 8001ea2:	d562      	bpl.n	8001f6a <__aeabi_ddiv+0x5be>
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2700      	movs	r7, #0
 8001eaa:	e60d      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001eac:	428a      	cmp	r2, r1
 8001eae:	d800      	bhi.n	8001eb2 <__aeabi_ddiv+0x506>
 8001eb0:	e70a      	b.n	8001cc8 <__aeabi_ddiv+0x31c>
 8001eb2:	1e83      	subs	r3, r0, #2
 8001eb4:	1989      	adds	r1, r1, r6
 8001eb6:	e707      	b.n	8001cc8 <__aeabi_ddiv+0x31c>
 8001eb8:	230f      	movs	r3, #15
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_ddiv+0x516>
 8001ec0:	e5e6      	b.n	8001a90 <__aeabi_ddiv+0xe4>
 8001ec2:	1d17      	adds	r7, r2, #4
 8001ec4:	4297      	cmp	r7, r2
 8001ec6:	4192      	sbcs	r2, r2
 8001ec8:	4253      	negs	r3, r2
 8001eca:	449b      	add	fp, r3
 8001ecc:	08fa      	lsrs	r2, r7, #3
 8001ece:	e5e0      	b.n	8001a92 <__aeabi_ddiv+0xe6>
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d100      	bne.n	8001ed6 <__aeabi_ddiv+0x52a>
 8001ed4:	e5d7      	b.n	8001a86 <__aeabi_ddiv+0xda>
 8001ed6:	1871      	adds	r1, r6, r1
 8001ed8:	1e53      	subs	r3, r2, #1
 8001eda:	42b1      	cmp	r1, r6
 8001edc:	d327      	bcc.n	8001f2e <__aeabi_ddiv+0x582>
 8001ede:	42a9      	cmp	r1, r5
 8001ee0:	d315      	bcc.n	8001f0e <__aeabi_ddiv+0x562>
 8001ee2:	d058      	beq.n	8001f96 <__aeabi_ddiv+0x5ea>
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	e773      	b.n	8001dd0 <__aeabi_ddiv+0x424>
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	dc00      	bgt.n	8001eee <__aeabi_ddiv+0x542>
 8001eec:	e604      	b.n	8001af8 <__aeabi_ddiv+0x14c>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	449b      	add	fp, r3
 8001ef4:	e5cd      	b.n	8001a92 <__aeabi_ddiv+0xe6>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	4447      	add	r7, r8
 8001efa:	4547      	cmp	r7, r8
 8001efc:	4189      	sbcs	r1, r1
 8001efe:	425b      	negs	r3, r3
 8001f00:	469c      	mov	ip, r3
 8001f02:	4249      	negs	r1, r1
 8001f04:	1989      	adds	r1, r1, r6
 8001f06:	190c      	adds	r4, r1, r4
 8001f08:	44e3      	add	fp, ip
 8001f0a:	1a24      	subs	r4, r4, r0
 8001f0c:	e703      	b.n	8001d16 <__aeabi_ddiv+0x36a>
 8001f0e:	4643      	mov	r3, r8
 8001f10:	005f      	lsls	r7, r3, #1
 8001f12:	4547      	cmp	r7, r8
 8001f14:	419b      	sbcs	r3, r3
 8001f16:	46b8      	mov	r8, r7
 8001f18:	425b      	negs	r3, r3
 8001f1a:	199e      	adds	r6, r3, r6
 8001f1c:	3a02      	subs	r2, #2
 8001f1e:	1989      	adds	r1, r1, r6
 8001f20:	42a9      	cmp	r1, r5
 8001f22:	d000      	beq.n	8001f26 <__aeabi_ddiv+0x57a>
 8001f24:	e754      	b.n	8001dd0 <__aeabi_ddiv+0x424>
 8001f26:	4540      	cmp	r0, r8
 8001f28:	d000      	beq.n	8001f2c <__aeabi_ddiv+0x580>
 8001f2a:	e751      	b.n	8001dd0 <__aeabi_ddiv+0x424>
 8001f2c:	e5ab      	b.n	8001a86 <__aeabi_ddiv+0xda>
 8001f2e:	001a      	movs	r2, r3
 8001f30:	e7f6      	b.n	8001f20 <__aeabi_ddiv+0x574>
 8001f32:	211f      	movs	r1, #31
 8001f34:	465f      	mov	r7, fp
 8001f36:	4249      	negs	r1, r1
 8001f38:	1b0c      	subs	r4, r1, r4
 8001f3a:	40e7      	lsrs	r7, r4
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d007      	beq.n	8001f50 <__aeabi_ddiv+0x5a4>
 8001f40:	491a      	ldr	r1, [pc, #104]	; (8001fac <__aeabi_ddiv+0x600>)
 8001f42:	9b00      	ldr	r3, [sp, #0]
 8001f44:	468c      	mov	ip, r1
 8001f46:	4463      	add	r3, ip
 8001f48:	0018      	movs	r0, r3
 8001f4a:	465b      	mov	r3, fp
 8001f4c:	4083      	lsls	r3, r0
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	1e50      	subs	r0, r2, #1
 8001f52:	4182      	sbcs	r2, r0
 8001f54:	433a      	orrs	r2, r7
 8001f56:	2707      	movs	r7, #7
 8001f58:	2300      	movs	r3, #0
 8001f5a:	4017      	ands	r7, r2
 8001f5c:	d009      	beq.n	8001f72 <__aeabi_ddiv+0x5c6>
 8001f5e:	210f      	movs	r1, #15
 8001f60:	2300      	movs	r3, #0
 8001f62:	4011      	ands	r1, r2
 8001f64:	0014      	movs	r4, r2
 8001f66:	2904      	cmp	r1, #4
 8001f68:	d195      	bne.n	8001e96 <__aeabi_ddiv+0x4ea>
 8001f6a:	0022      	movs	r2, r4
 8001f6c:	075f      	lsls	r7, r3, #29
 8001f6e:	025b      	lsls	r3, r3, #9
 8001f70:	0b1b      	lsrs	r3, r3, #12
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	4317      	orrs	r7, r2
 8001f76:	2200      	movs	r2, #0
 8001f78:	e5a6      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	031b      	lsls	r3, r3, #12
 8001f80:	430b      	orrs	r3, r1
 8001f82:	031b      	lsls	r3, r3, #12
 8001f84:	0017      	movs	r7, r2
 8001f86:	0b1b      	lsrs	r3, r3, #12
 8001f88:	4a06      	ldr	r2, [pc, #24]	; (8001fa4 <__aeabi_ddiv+0x5f8>)
 8001f8a:	e59d      	b.n	8001ac8 <__aeabi_ddiv+0x11c>
 8001f8c:	42bd      	cmp	r5, r7
 8001f8e:	d8b2      	bhi.n	8001ef6 <__aeabi_ddiv+0x54a>
 8001f90:	469b      	mov	fp, r3
 8001f92:	2400      	movs	r4, #0
 8001f94:	e6bf      	b.n	8001d16 <__aeabi_ddiv+0x36a>
 8001f96:	4580      	cmp	r8, r0
 8001f98:	d3b9      	bcc.n	8001f0e <__aeabi_ddiv+0x562>
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	e7c3      	b.n	8001f26 <__aeabi_ddiv+0x57a>
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	000003ff 	.word	0x000003ff
 8001fa4:	000007ff 	.word	0x000007ff
 8001fa8:	0000041e 	.word	0x0000041e
 8001fac:	0000043e 	.word	0x0000043e

08001fb0 <__eqdf2>:
 8001fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb2:	464f      	mov	r7, r9
 8001fb4:	4646      	mov	r6, r8
 8001fb6:	46d6      	mov	lr, sl
 8001fb8:	4684      	mov	ip, r0
 8001fba:	b5c0      	push	{r6, r7, lr}
 8001fbc:	4680      	mov	r8, r0
 8001fbe:	4e19      	ldr	r6, [pc, #100]	; (8002024 <__eqdf2+0x74>)
 8001fc0:	0318      	lsls	r0, r3, #12
 8001fc2:	030f      	lsls	r7, r1, #12
 8001fc4:	004d      	lsls	r5, r1, #1
 8001fc6:	0b00      	lsrs	r0, r0, #12
 8001fc8:	005c      	lsls	r4, r3, #1
 8001fca:	4682      	mov	sl, r0
 8001fcc:	0b3f      	lsrs	r7, r7, #12
 8001fce:	0d6d      	lsrs	r5, r5, #21
 8001fd0:	0fc9      	lsrs	r1, r1, #31
 8001fd2:	4691      	mov	r9, r2
 8001fd4:	0d64      	lsrs	r4, r4, #21
 8001fd6:	0fdb      	lsrs	r3, r3, #31
 8001fd8:	2001      	movs	r0, #1
 8001fda:	42b5      	cmp	r5, r6
 8001fdc:	d00a      	beq.n	8001ff4 <__eqdf2+0x44>
 8001fde:	42b4      	cmp	r4, r6
 8001fe0:	d003      	beq.n	8001fea <__eqdf2+0x3a>
 8001fe2:	42a5      	cmp	r5, r4
 8001fe4:	d101      	bne.n	8001fea <__eqdf2+0x3a>
 8001fe6:	4557      	cmp	r7, sl
 8001fe8:	d00c      	beq.n	8002004 <__eqdf2+0x54>
 8001fea:	bc1c      	pop	{r2, r3, r4}
 8001fec:	4690      	mov	r8, r2
 8001fee:	4699      	mov	r9, r3
 8001ff0:	46a2      	mov	sl, r4
 8001ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff4:	4666      	mov	r6, ip
 8001ff6:	433e      	orrs	r6, r7
 8001ff8:	d1f7      	bne.n	8001fea <__eqdf2+0x3a>
 8001ffa:	42ac      	cmp	r4, r5
 8001ffc:	d1f5      	bne.n	8001fea <__eqdf2+0x3a>
 8001ffe:	4654      	mov	r4, sl
 8002000:	4314      	orrs	r4, r2
 8002002:	d1f2      	bne.n	8001fea <__eqdf2+0x3a>
 8002004:	2001      	movs	r0, #1
 8002006:	45c8      	cmp	r8, r9
 8002008:	d1ef      	bne.n	8001fea <__eqdf2+0x3a>
 800200a:	4299      	cmp	r1, r3
 800200c:	d007      	beq.n	800201e <__eqdf2+0x6e>
 800200e:	2d00      	cmp	r5, #0
 8002010:	d1eb      	bne.n	8001fea <__eqdf2+0x3a>
 8002012:	4663      	mov	r3, ip
 8002014:	431f      	orrs	r7, r3
 8002016:	0038      	movs	r0, r7
 8002018:	1e47      	subs	r7, r0, #1
 800201a:	41b8      	sbcs	r0, r7
 800201c:	e7e5      	b.n	8001fea <__eqdf2+0x3a>
 800201e:	2000      	movs	r0, #0
 8002020:	e7e3      	b.n	8001fea <__eqdf2+0x3a>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	000007ff 	.word	0x000007ff

08002028 <__gedf2>:
 8002028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202a:	464f      	mov	r7, r9
 800202c:	4646      	mov	r6, r8
 800202e:	46d6      	mov	lr, sl
 8002030:	004d      	lsls	r5, r1, #1
 8002032:	b5c0      	push	{r6, r7, lr}
 8002034:	030e      	lsls	r6, r1, #12
 8002036:	0fc9      	lsrs	r1, r1, #31
 8002038:	468a      	mov	sl, r1
 800203a:	492c      	ldr	r1, [pc, #176]	; (80020ec <__gedf2+0xc4>)
 800203c:	031f      	lsls	r7, r3, #12
 800203e:	005c      	lsls	r4, r3, #1
 8002040:	4680      	mov	r8, r0
 8002042:	0b36      	lsrs	r6, r6, #12
 8002044:	0d6d      	lsrs	r5, r5, #21
 8002046:	4691      	mov	r9, r2
 8002048:	0b3f      	lsrs	r7, r7, #12
 800204a:	0d64      	lsrs	r4, r4, #21
 800204c:	0fdb      	lsrs	r3, r3, #31
 800204e:	428d      	cmp	r5, r1
 8002050:	d01e      	beq.n	8002090 <__gedf2+0x68>
 8002052:	428c      	cmp	r4, r1
 8002054:	d016      	beq.n	8002084 <__gedf2+0x5c>
 8002056:	2d00      	cmp	r5, #0
 8002058:	d11e      	bne.n	8002098 <__gedf2+0x70>
 800205a:	4330      	orrs	r0, r6
 800205c:	4684      	mov	ip, r0
 800205e:	2c00      	cmp	r4, #0
 8002060:	d101      	bne.n	8002066 <__gedf2+0x3e>
 8002062:	433a      	orrs	r2, r7
 8002064:	d023      	beq.n	80020ae <__gedf2+0x86>
 8002066:	4662      	mov	r2, ip
 8002068:	2a00      	cmp	r2, #0
 800206a:	d01a      	beq.n	80020a2 <__gedf2+0x7a>
 800206c:	459a      	cmp	sl, r3
 800206e:	d029      	beq.n	80020c4 <__gedf2+0x9c>
 8002070:	4651      	mov	r1, sl
 8002072:	2002      	movs	r0, #2
 8002074:	3901      	subs	r1, #1
 8002076:	4008      	ands	r0, r1
 8002078:	3801      	subs	r0, #1
 800207a:	bc1c      	pop	{r2, r3, r4}
 800207c:	4690      	mov	r8, r2
 800207e:	4699      	mov	r9, r3
 8002080:	46a2      	mov	sl, r4
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002084:	0039      	movs	r1, r7
 8002086:	4311      	orrs	r1, r2
 8002088:	d0e5      	beq.n	8002056 <__gedf2+0x2e>
 800208a:	2002      	movs	r0, #2
 800208c:	4240      	negs	r0, r0
 800208e:	e7f4      	b.n	800207a <__gedf2+0x52>
 8002090:	4330      	orrs	r0, r6
 8002092:	d1fa      	bne.n	800208a <__gedf2+0x62>
 8002094:	42ac      	cmp	r4, r5
 8002096:	d00f      	beq.n	80020b8 <__gedf2+0x90>
 8002098:	2c00      	cmp	r4, #0
 800209a:	d10f      	bne.n	80020bc <__gedf2+0x94>
 800209c:	433a      	orrs	r2, r7
 800209e:	d0e7      	beq.n	8002070 <__gedf2+0x48>
 80020a0:	e00c      	b.n	80020bc <__gedf2+0x94>
 80020a2:	2201      	movs	r2, #1
 80020a4:	3b01      	subs	r3, #1
 80020a6:	4393      	bics	r3, r2
 80020a8:	0018      	movs	r0, r3
 80020aa:	3001      	adds	r0, #1
 80020ac:	e7e5      	b.n	800207a <__gedf2+0x52>
 80020ae:	4663      	mov	r3, ip
 80020b0:	2000      	movs	r0, #0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0e1      	beq.n	800207a <__gedf2+0x52>
 80020b6:	e7db      	b.n	8002070 <__gedf2+0x48>
 80020b8:	433a      	orrs	r2, r7
 80020ba:	d1e6      	bne.n	800208a <__gedf2+0x62>
 80020bc:	459a      	cmp	sl, r3
 80020be:	d1d7      	bne.n	8002070 <__gedf2+0x48>
 80020c0:	42a5      	cmp	r5, r4
 80020c2:	dcd5      	bgt.n	8002070 <__gedf2+0x48>
 80020c4:	42a5      	cmp	r5, r4
 80020c6:	db05      	blt.n	80020d4 <__gedf2+0xac>
 80020c8:	42be      	cmp	r6, r7
 80020ca:	d8d1      	bhi.n	8002070 <__gedf2+0x48>
 80020cc:	d008      	beq.n	80020e0 <__gedf2+0xb8>
 80020ce:	2000      	movs	r0, #0
 80020d0:	42be      	cmp	r6, r7
 80020d2:	d2d2      	bcs.n	800207a <__gedf2+0x52>
 80020d4:	4650      	mov	r0, sl
 80020d6:	2301      	movs	r3, #1
 80020d8:	3801      	subs	r0, #1
 80020da:	4398      	bics	r0, r3
 80020dc:	3001      	adds	r0, #1
 80020de:	e7cc      	b.n	800207a <__gedf2+0x52>
 80020e0:	45c8      	cmp	r8, r9
 80020e2:	d8c5      	bhi.n	8002070 <__gedf2+0x48>
 80020e4:	2000      	movs	r0, #0
 80020e6:	45c8      	cmp	r8, r9
 80020e8:	d3f4      	bcc.n	80020d4 <__gedf2+0xac>
 80020ea:	e7c6      	b.n	800207a <__gedf2+0x52>
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__ledf2>:
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	464f      	mov	r7, r9
 80020f4:	4646      	mov	r6, r8
 80020f6:	46d6      	mov	lr, sl
 80020f8:	004d      	lsls	r5, r1, #1
 80020fa:	b5c0      	push	{r6, r7, lr}
 80020fc:	030e      	lsls	r6, r1, #12
 80020fe:	0fc9      	lsrs	r1, r1, #31
 8002100:	468a      	mov	sl, r1
 8002102:	492e      	ldr	r1, [pc, #184]	; (80021bc <__ledf2+0xcc>)
 8002104:	031f      	lsls	r7, r3, #12
 8002106:	005c      	lsls	r4, r3, #1
 8002108:	4680      	mov	r8, r0
 800210a:	0b36      	lsrs	r6, r6, #12
 800210c:	0d6d      	lsrs	r5, r5, #21
 800210e:	4691      	mov	r9, r2
 8002110:	0b3f      	lsrs	r7, r7, #12
 8002112:	0d64      	lsrs	r4, r4, #21
 8002114:	0fdb      	lsrs	r3, r3, #31
 8002116:	428d      	cmp	r5, r1
 8002118:	d018      	beq.n	800214c <__ledf2+0x5c>
 800211a:	428c      	cmp	r4, r1
 800211c:	d011      	beq.n	8002142 <__ledf2+0x52>
 800211e:	2d00      	cmp	r5, #0
 8002120:	d118      	bne.n	8002154 <__ledf2+0x64>
 8002122:	4330      	orrs	r0, r6
 8002124:	4684      	mov	ip, r0
 8002126:	2c00      	cmp	r4, #0
 8002128:	d11e      	bne.n	8002168 <__ledf2+0x78>
 800212a:	433a      	orrs	r2, r7
 800212c:	d11c      	bne.n	8002168 <__ledf2+0x78>
 800212e:	4663      	mov	r3, ip
 8002130:	2000      	movs	r0, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d030      	beq.n	8002198 <__ledf2+0xa8>
 8002136:	4651      	mov	r1, sl
 8002138:	2002      	movs	r0, #2
 800213a:	3901      	subs	r1, #1
 800213c:	4008      	ands	r0, r1
 800213e:	3801      	subs	r0, #1
 8002140:	e02a      	b.n	8002198 <__ledf2+0xa8>
 8002142:	0039      	movs	r1, r7
 8002144:	4311      	orrs	r1, r2
 8002146:	d0ea      	beq.n	800211e <__ledf2+0x2e>
 8002148:	2002      	movs	r0, #2
 800214a:	e025      	b.n	8002198 <__ledf2+0xa8>
 800214c:	4330      	orrs	r0, r6
 800214e:	d1fb      	bne.n	8002148 <__ledf2+0x58>
 8002150:	42ac      	cmp	r4, r5
 8002152:	d026      	beq.n	80021a2 <__ledf2+0xb2>
 8002154:	2c00      	cmp	r4, #0
 8002156:	d126      	bne.n	80021a6 <__ledf2+0xb6>
 8002158:	433a      	orrs	r2, r7
 800215a:	d124      	bne.n	80021a6 <__ledf2+0xb6>
 800215c:	4651      	mov	r1, sl
 800215e:	2002      	movs	r0, #2
 8002160:	3901      	subs	r1, #1
 8002162:	4008      	ands	r0, r1
 8002164:	3801      	subs	r0, #1
 8002166:	e017      	b.n	8002198 <__ledf2+0xa8>
 8002168:	4662      	mov	r2, ip
 800216a:	2a00      	cmp	r2, #0
 800216c:	d00f      	beq.n	800218e <__ledf2+0x9e>
 800216e:	459a      	cmp	sl, r3
 8002170:	d1e1      	bne.n	8002136 <__ledf2+0x46>
 8002172:	42a5      	cmp	r5, r4
 8002174:	db05      	blt.n	8002182 <__ledf2+0x92>
 8002176:	42be      	cmp	r6, r7
 8002178:	d8dd      	bhi.n	8002136 <__ledf2+0x46>
 800217a:	d019      	beq.n	80021b0 <__ledf2+0xc0>
 800217c:	2000      	movs	r0, #0
 800217e:	42be      	cmp	r6, r7
 8002180:	d20a      	bcs.n	8002198 <__ledf2+0xa8>
 8002182:	4650      	mov	r0, sl
 8002184:	2301      	movs	r3, #1
 8002186:	3801      	subs	r0, #1
 8002188:	4398      	bics	r0, r3
 800218a:	3001      	adds	r0, #1
 800218c:	e004      	b.n	8002198 <__ledf2+0xa8>
 800218e:	2201      	movs	r2, #1
 8002190:	3b01      	subs	r3, #1
 8002192:	4393      	bics	r3, r2
 8002194:	0018      	movs	r0, r3
 8002196:	3001      	adds	r0, #1
 8002198:	bc1c      	pop	{r2, r3, r4}
 800219a:	4690      	mov	r8, r2
 800219c:	4699      	mov	r9, r3
 800219e:	46a2      	mov	sl, r4
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a2:	433a      	orrs	r2, r7
 80021a4:	d1d0      	bne.n	8002148 <__ledf2+0x58>
 80021a6:	459a      	cmp	sl, r3
 80021a8:	d1c5      	bne.n	8002136 <__ledf2+0x46>
 80021aa:	42a5      	cmp	r5, r4
 80021ac:	dcc3      	bgt.n	8002136 <__ledf2+0x46>
 80021ae:	e7e0      	b.n	8002172 <__ledf2+0x82>
 80021b0:	45c8      	cmp	r8, r9
 80021b2:	d8c0      	bhi.n	8002136 <__ledf2+0x46>
 80021b4:	2000      	movs	r0, #0
 80021b6:	45c8      	cmp	r8, r9
 80021b8:	d3e3      	bcc.n	8002182 <__ledf2+0x92>
 80021ba:	e7ed      	b.n	8002198 <__ledf2+0xa8>
 80021bc:	000007ff 	.word	0x000007ff

080021c0 <__aeabi_dmul>:
 80021c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c2:	4657      	mov	r7, sl
 80021c4:	46de      	mov	lr, fp
 80021c6:	464e      	mov	r6, r9
 80021c8:	4645      	mov	r5, r8
 80021ca:	b5e0      	push	{r5, r6, r7, lr}
 80021cc:	4683      	mov	fp, r0
 80021ce:	0006      	movs	r6, r0
 80021d0:	030f      	lsls	r7, r1, #12
 80021d2:	0048      	lsls	r0, r1, #1
 80021d4:	b087      	sub	sp, #28
 80021d6:	4692      	mov	sl, r2
 80021d8:	001d      	movs	r5, r3
 80021da:	0b3f      	lsrs	r7, r7, #12
 80021dc:	0d40      	lsrs	r0, r0, #21
 80021de:	0fcc      	lsrs	r4, r1, #31
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d100      	bne.n	80021e6 <__aeabi_dmul+0x26>
 80021e4:	e06f      	b.n	80022c6 <__aeabi_dmul+0x106>
 80021e6:	4bde      	ldr	r3, [pc, #888]	; (8002560 <__aeabi_dmul+0x3a0>)
 80021e8:	4298      	cmp	r0, r3
 80021ea:	d038      	beq.n	800225e <__aeabi_dmul+0x9e>
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	00ff      	lsls	r7, r7, #3
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	431f      	orrs	r7, r3
 80021f4:	0f73      	lsrs	r3, r6, #29
 80021f6:	433b      	orrs	r3, r7
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	4bda      	ldr	r3, [pc, #872]	; (8002564 <__aeabi_dmul+0x3a4>)
 80021fc:	2700      	movs	r7, #0
 80021fe:	4699      	mov	r9, r3
 8002200:	2300      	movs	r3, #0
 8002202:	469b      	mov	fp, r3
 8002204:	00f6      	lsls	r6, r6, #3
 8002206:	4481      	add	r9, r0
 8002208:	032b      	lsls	r3, r5, #12
 800220a:	0069      	lsls	r1, r5, #1
 800220c:	0b1b      	lsrs	r3, r3, #12
 800220e:	4652      	mov	r2, sl
 8002210:	4698      	mov	r8, r3
 8002212:	0d49      	lsrs	r1, r1, #21
 8002214:	0fed      	lsrs	r5, r5, #31
 8002216:	2900      	cmp	r1, #0
 8002218:	d100      	bne.n	800221c <__aeabi_dmul+0x5c>
 800221a:	e085      	b.n	8002328 <__aeabi_dmul+0x168>
 800221c:	4bd0      	ldr	r3, [pc, #832]	; (8002560 <__aeabi_dmul+0x3a0>)
 800221e:	4299      	cmp	r1, r3
 8002220:	d100      	bne.n	8002224 <__aeabi_dmul+0x64>
 8002222:	e073      	b.n	800230c <__aeabi_dmul+0x14c>
 8002224:	4643      	mov	r3, r8
 8002226:	00da      	lsls	r2, r3, #3
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	4313      	orrs	r3, r2
 800222e:	4652      	mov	r2, sl
 8002230:	48cc      	ldr	r0, [pc, #816]	; (8002564 <__aeabi_dmul+0x3a4>)
 8002232:	0f52      	lsrs	r2, r2, #29
 8002234:	4684      	mov	ip, r0
 8002236:	4313      	orrs	r3, r2
 8002238:	4652      	mov	r2, sl
 800223a:	2000      	movs	r0, #0
 800223c:	4461      	add	r1, ip
 800223e:	00d2      	lsls	r2, r2, #3
 8002240:	4489      	add	r9, r1
 8002242:	0021      	movs	r1, r4
 8002244:	4069      	eors	r1, r5
 8002246:	9100      	str	r1, [sp, #0]
 8002248:	468c      	mov	ip, r1
 800224a:	2101      	movs	r1, #1
 800224c:	4449      	add	r1, r9
 800224e:	468a      	mov	sl, r1
 8002250:	2f0f      	cmp	r7, #15
 8002252:	d900      	bls.n	8002256 <__aeabi_dmul+0x96>
 8002254:	e090      	b.n	8002378 <__aeabi_dmul+0x1b8>
 8002256:	49c4      	ldr	r1, [pc, #784]	; (8002568 <__aeabi_dmul+0x3a8>)
 8002258:	00bf      	lsls	r7, r7, #2
 800225a:	59cf      	ldr	r7, [r1, r7]
 800225c:	46bf      	mov	pc, r7
 800225e:	465b      	mov	r3, fp
 8002260:	433b      	orrs	r3, r7
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	d000      	beq.n	8002268 <__aeabi_dmul+0xa8>
 8002266:	e16a      	b.n	800253e <__aeabi_dmul+0x37e>
 8002268:	2302      	movs	r3, #2
 800226a:	2708      	movs	r7, #8
 800226c:	2600      	movs	r6, #0
 800226e:	4681      	mov	r9, r0
 8002270:	469b      	mov	fp, r3
 8002272:	e7c9      	b.n	8002208 <__aeabi_dmul+0x48>
 8002274:	0032      	movs	r2, r6
 8002276:	4658      	mov	r0, fp
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	4661      	mov	r1, ip
 800227c:	9100      	str	r1, [sp, #0]
 800227e:	2802      	cmp	r0, #2
 8002280:	d100      	bne.n	8002284 <__aeabi_dmul+0xc4>
 8002282:	e075      	b.n	8002370 <__aeabi_dmul+0x1b0>
 8002284:	2803      	cmp	r0, #3
 8002286:	d100      	bne.n	800228a <__aeabi_dmul+0xca>
 8002288:	e1fe      	b.n	8002688 <__aeabi_dmul+0x4c8>
 800228a:	2801      	cmp	r0, #1
 800228c:	d000      	beq.n	8002290 <__aeabi_dmul+0xd0>
 800228e:	e12c      	b.n	80024ea <__aeabi_dmul+0x32a>
 8002290:	2300      	movs	r3, #0
 8002292:	2700      	movs	r7, #0
 8002294:	2600      	movs	r6, #0
 8002296:	2500      	movs	r5, #0
 8002298:	033f      	lsls	r7, r7, #12
 800229a:	0d2a      	lsrs	r2, r5, #20
 800229c:	0b3f      	lsrs	r7, r7, #12
 800229e:	48b3      	ldr	r0, [pc, #716]	; (800256c <__aeabi_dmul+0x3ac>)
 80022a0:	0512      	lsls	r2, r2, #20
 80022a2:	433a      	orrs	r2, r7
 80022a4:	4002      	ands	r2, r0
 80022a6:	051b      	lsls	r3, r3, #20
 80022a8:	4313      	orrs	r3, r2
 80022aa:	9a00      	ldr	r2, [sp, #0]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	07d1      	lsls	r1, r2, #31
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	430b      	orrs	r3, r1
 80022b4:	0030      	movs	r0, r6
 80022b6:	0019      	movs	r1, r3
 80022b8:	b007      	add	sp, #28
 80022ba:	bc3c      	pop	{r2, r3, r4, r5}
 80022bc:	4690      	mov	r8, r2
 80022be:	4699      	mov	r9, r3
 80022c0:	46a2      	mov	sl, r4
 80022c2:	46ab      	mov	fp, r5
 80022c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c6:	465b      	mov	r3, fp
 80022c8:	433b      	orrs	r3, r7
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dmul+0x110>
 80022ce:	e12f      	b.n	8002530 <__aeabi_dmul+0x370>
 80022d0:	2f00      	cmp	r7, #0
 80022d2:	d100      	bne.n	80022d6 <__aeabi_dmul+0x116>
 80022d4:	e1a5      	b.n	8002622 <__aeabi_dmul+0x462>
 80022d6:	0038      	movs	r0, r7
 80022d8:	f000 fe72 	bl	8002fc0 <__clzsi2>
 80022dc:	0003      	movs	r3, r0
 80022de:	3b0b      	subs	r3, #11
 80022e0:	2b1c      	cmp	r3, #28
 80022e2:	dd00      	ble.n	80022e6 <__aeabi_dmul+0x126>
 80022e4:	e196      	b.n	8002614 <__aeabi_dmul+0x454>
 80022e6:	221d      	movs	r2, #29
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	465a      	mov	r2, fp
 80022ec:	0001      	movs	r1, r0
 80022ee:	40da      	lsrs	r2, r3
 80022f0:	465e      	mov	r6, fp
 80022f2:	3908      	subs	r1, #8
 80022f4:	408f      	lsls	r7, r1
 80022f6:	0013      	movs	r3, r2
 80022f8:	408e      	lsls	r6, r1
 80022fa:	433b      	orrs	r3, r7
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	4b9c      	ldr	r3, [pc, #624]	; (8002570 <__aeabi_dmul+0x3b0>)
 8002300:	2700      	movs	r7, #0
 8002302:	1a1b      	subs	r3, r3, r0
 8002304:	4699      	mov	r9, r3
 8002306:	2300      	movs	r3, #0
 8002308:	469b      	mov	fp, r3
 800230a:	e77d      	b.n	8002208 <__aeabi_dmul+0x48>
 800230c:	4641      	mov	r1, r8
 800230e:	4653      	mov	r3, sl
 8002310:	430b      	orrs	r3, r1
 8002312:	4993      	ldr	r1, [pc, #588]	; (8002560 <__aeabi_dmul+0x3a0>)
 8002314:	468c      	mov	ip, r1
 8002316:	44e1      	add	r9, ip
 8002318:	2b00      	cmp	r3, #0
 800231a:	d000      	beq.n	800231e <__aeabi_dmul+0x15e>
 800231c:	e11a      	b.n	8002554 <__aeabi_dmul+0x394>
 800231e:	2202      	movs	r2, #2
 8002320:	2002      	movs	r0, #2
 8002322:	4317      	orrs	r7, r2
 8002324:	2200      	movs	r2, #0
 8002326:	e78c      	b.n	8002242 <__aeabi_dmul+0x82>
 8002328:	4313      	orrs	r3, r2
 800232a:	d100      	bne.n	800232e <__aeabi_dmul+0x16e>
 800232c:	e10d      	b.n	800254a <__aeabi_dmul+0x38a>
 800232e:	4643      	mov	r3, r8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d100      	bne.n	8002336 <__aeabi_dmul+0x176>
 8002334:	e181      	b.n	800263a <__aeabi_dmul+0x47a>
 8002336:	4640      	mov	r0, r8
 8002338:	f000 fe42 	bl	8002fc0 <__clzsi2>
 800233c:	0002      	movs	r2, r0
 800233e:	3a0b      	subs	r2, #11
 8002340:	2a1c      	cmp	r2, #28
 8002342:	dd00      	ble.n	8002346 <__aeabi_dmul+0x186>
 8002344:	e172      	b.n	800262c <__aeabi_dmul+0x46c>
 8002346:	0001      	movs	r1, r0
 8002348:	4643      	mov	r3, r8
 800234a:	3908      	subs	r1, #8
 800234c:	408b      	lsls	r3, r1
 800234e:	4698      	mov	r8, r3
 8002350:	231d      	movs	r3, #29
 8002352:	1a9a      	subs	r2, r3, r2
 8002354:	4653      	mov	r3, sl
 8002356:	40d3      	lsrs	r3, r2
 8002358:	001a      	movs	r2, r3
 800235a:	4643      	mov	r3, r8
 800235c:	4313      	orrs	r3, r2
 800235e:	4652      	mov	r2, sl
 8002360:	408a      	lsls	r2, r1
 8002362:	4649      	mov	r1, r9
 8002364:	1a08      	subs	r0, r1, r0
 8002366:	4982      	ldr	r1, [pc, #520]	; (8002570 <__aeabi_dmul+0x3b0>)
 8002368:	4689      	mov	r9, r1
 800236a:	4481      	add	r9, r0
 800236c:	2000      	movs	r0, #0
 800236e:	e768      	b.n	8002242 <__aeabi_dmul+0x82>
 8002370:	4b7b      	ldr	r3, [pc, #492]	; (8002560 <__aeabi_dmul+0x3a0>)
 8002372:	2700      	movs	r7, #0
 8002374:	2600      	movs	r6, #0
 8002376:	e78e      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002378:	0c14      	lsrs	r4, r2, #16
 800237a:	0412      	lsls	r2, r2, #16
 800237c:	0c12      	lsrs	r2, r2, #16
 800237e:	0011      	movs	r1, r2
 8002380:	0c37      	lsrs	r7, r6, #16
 8002382:	0436      	lsls	r6, r6, #16
 8002384:	0c35      	lsrs	r5, r6, #16
 8002386:	4379      	muls	r1, r7
 8002388:	0028      	movs	r0, r5
 800238a:	468c      	mov	ip, r1
 800238c:	002e      	movs	r6, r5
 800238e:	4360      	muls	r0, r4
 8002390:	4460      	add	r0, ip
 8002392:	4683      	mov	fp, r0
 8002394:	4356      	muls	r6, r2
 8002396:	0021      	movs	r1, r4
 8002398:	0c30      	lsrs	r0, r6, #16
 800239a:	4680      	mov	r8, r0
 800239c:	4658      	mov	r0, fp
 800239e:	4379      	muls	r1, r7
 80023a0:	4440      	add	r0, r8
 80023a2:	9102      	str	r1, [sp, #8]
 80023a4:	4584      	cmp	ip, r0
 80023a6:	d906      	bls.n	80023b6 <__aeabi_dmul+0x1f6>
 80023a8:	4688      	mov	r8, r1
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0249      	lsls	r1, r1, #9
 80023ae:	468c      	mov	ip, r1
 80023b0:	44e0      	add	r8, ip
 80023b2:	4641      	mov	r1, r8
 80023b4:	9102      	str	r1, [sp, #8]
 80023b6:	0436      	lsls	r6, r6, #16
 80023b8:	0c01      	lsrs	r1, r0, #16
 80023ba:	0c36      	lsrs	r6, r6, #16
 80023bc:	0400      	lsls	r0, r0, #16
 80023be:	468b      	mov	fp, r1
 80023c0:	1981      	adds	r1, r0, r6
 80023c2:	0c1e      	lsrs	r6, r3, #16
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	0c1b      	lsrs	r3, r3, #16
 80023c8:	9103      	str	r1, [sp, #12]
 80023ca:	0019      	movs	r1, r3
 80023cc:	4379      	muls	r1, r7
 80023ce:	468c      	mov	ip, r1
 80023d0:	0028      	movs	r0, r5
 80023d2:	4375      	muls	r5, r6
 80023d4:	4465      	add	r5, ip
 80023d6:	46a8      	mov	r8, r5
 80023d8:	4358      	muls	r0, r3
 80023da:	0c05      	lsrs	r5, r0, #16
 80023dc:	4445      	add	r5, r8
 80023de:	4377      	muls	r7, r6
 80023e0:	42a9      	cmp	r1, r5
 80023e2:	d903      	bls.n	80023ec <__aeabi_dmul+0x22c>
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0249      	lsls	r1, r1, #9
 80023e8:	468c      	mov	ip, r1
 80023ea:	4467      	add	r7, ip
 80023ec:	0c29      	lsrs	r1, r5, #16
 80023ee:	468c      	mov	ip, r1
 80023f0:	0039      	movs	r1, r7
 80023f2:	0400      	lsls	r0, r0, #16
 80023f4:	0c00      	lsrs	r0, r0, #16
 80023f6:	042d      	lsls	r5, r5, #16
 80023f8:	182d      	adds	r5, r5, r0
 80023fa:	4461      	add	r1, ip
 80023fc:	44ab      	add	fp, r5
 80023fe:	9105      	str	r1, [sp, #20]
 8002400:	4659      	mov	r1, fp
 8002402:	9104      	str	r1, [sp, #16]
 8002404:	9901      	ldr	r1, [sp, #4]
 8002406:	040f      	lsls	r7, r1, #16
 8002408:	0c3f      	lsrs	r7, r7, #16
 800240a:	0c08      	lsrs	r0, r1, #16
 800240c:	0039      	movs	r1, r7
 800240e:	4351      	muls	r1, r2
 8002410:	4342      	muls	r2, r0
 8002412:	4690      	mov	r8, r2
 8002414:	0002      	movs	r2, r0
 8002416:	468c      	mov	ip, r1
 8002418:	0c09      	lsrs	r1, r1, #16
 800241a:	468b      	mov	fp, r1
 800241c:	4362      	muls	r2, r4
 800241e:	437c      	muls	r4, r7
 8002420:	4444      	add	r4, r8
 8002422:	445c      	add	r4, fp
 8002424:	45a0      	cmp	r8, r4
 8002426:	d903      	bls.n	8002430 <__aeabi_dmul+0x270>
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	0249      	lsls	r1, r1, #9
 800242c:	4688      	mov	r8, r1
 800242e:	4442      	add	r2, r8
 8002430:	0c21      	lsrs	r1, r4, #16
 8002432:	4688      	mov	r8, r1
 8002434:	4661      	mov	r1, ip
 8002436:	0409      	lsls	r1, r1, #16
 8002438:	0c09      	lsrs	r1, r1, #16
 800243a:	468c      	mov	ip, r1
 800243c:	0039      	movs	r1, r7
 800243e:	4359      	muls	r1, r3
 8002440:	4343      	muls	r3, r0
 8002442:	4370      	muls	r0, r6
 8002444:	437e      	muls	r6, r7
 8002446:	0c0f      	lsrs	r7, r1, #16
 8002448:	18f6      	adds	r6, r6, r3
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	19be      	adds	r6, r7, r6
 800244e:	4464      	add	r4, ip
 8002450:	4442      	add	r2, r8
 8002452:	468c      	mov	ip, r1
 8002454:	42b3      	cmp	r3, r6
 8002456:	d903      	bls.n	8002460 <__aeabi_dmul+0x2a0>
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	025b      	lsls	r3, r3, #9
 800245c:	4698      	mov	r8, r3
 800245e:	4440      	add	r0, r8
 8002460:	9b02      	ldr	r3, [sp, #8]
 8002462:	4661      	mov	r1, ip
 8002464:	4698      	mov	r8, r3
 8002466:	9b04      	ldr	r3, [sp, #16]
 8002468:	0437      	lsls	r7, r6, #16
 800246a:	4443      	add	r3, r8
 800246c:	469b      	mov	fp, r3
 800246e:	45ab      	cmp	fp, r5
 8002470:	41ad      	sbcs	r5, r5
 8002472:	426b      	negs	r3, r5
 8002474:	040d      	lsls	r5, r1, #16
 8002476:	9905      	ldr	r1, [sp, #20]
 8002478:	0c2d      	lsrs	r5, r5, #16
 800247a:	468c      	mov	ip, r1
 800247c:	197f      	adds	r7, r7, r5
 800247e:	4467      	add	r7, ip
 8002480:	18fd      	adds	r5, r7, r3
 8002482:	46a8      	mov	r8, r5
 8002484:	465d      	mov	r5, fp
 8002486:	192d      	adds	r5, r5, r4
 8002488:	42a5      	cmp	r5, r4
 800248a:	41a4      	sbcs	r4, r4
 800248c:	4693      	mov	fp, r2
 800248e:	4264      	negs	r4, r4
 8002490:	46a4      	mov	ip, r4
 8002492:	44c3      	add	fp, r8
 8002494:	44dc      	add	ip, fp
 8002496:	428f      	cmp	r7, r1
 8002498:	41bf      	sbcs	r7, r7
 800249a:	4598      	cmp	r8, r3
 800249c:	419b      	sbcs	r3, r3
 800249e:	4593      	cmp	fp, r2
 80024a0:	4192      	sbcs	r2, r2
 80024a2:	45a4      	cmp	ip, r4
 80024a4:	41a4      	sbcs	r4, r4
 80024a6:	425b      	negs	r3, r3
 80024a8:	427f      	negs	r7, r7
 80024aa:	431f      	orrs	r7, r3
 80024ac:	0c36      	lsrs	r6, r6, #16
 80024ae:	4252      	negs	r2, r2
 80024b0:	4264      	negs	r4, r4
 80024b2:	19bf      	adds	r7, r7, r6
 80024b4:	4322      	orrs	r2, r4
 80024b6:	18bf      	adds	r7, r7, r2
 80024b8:	4662      	mov	r2, ip
 80024ba:	1838      	adds	r0, r7, r0
 80024bc:	0243      	lsls	r3, r0, #9
 80024be:	0dd2      	lsrs	r2, r2, #23
 80024c0:	9903      	ldr	r1, [sp, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	026a      	lsls	r2, r5, #9
 80024c6:	430a      	orrs	r2, r1
 80024c8:	1e50      	subs	r0, r2, #1
 80024ca:	4182      	sbcs	r2, r0
 80024cc:	4661      	mov	r1, ip
 80024ce:	0ded      	lsrs	r5, r5, #23
 80024d0:	432a      	orrs	r2, r5
 80024d2:	024e      	lsls	r6, r1, #9
 80024d4:	4332      	orrs	r2, r6
 80024d6:	01d9      	lsls	r1, r3, #7
 80024d8:	d400      	bmi.n	80024dc <__aeabi_dmul+0x31c>
 80024da:	e0b3      	b.n	8002644 <__aeabi_dmul+0x484>
 80024dc:	2601      	movs	r6, #1
 80024de:	0850      	lsrs	r0, r2, #1
 80024e0:	4032      	ands	r2, r6
 80024e2:	4302      	orrs	r2, r0
 80024e4:	07de      	lsls	r6, r3, #31
 80024e6:	4332      	orrs	r2, r6
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	4c22      	ldr	r4, [pc, #136]	; (8002574 <__aeabi_dmul+0x3b4>)
 80024ec:	4454      	add	r4, sl
 80024ee:	2c00      	cmp	r4, #0
 80024f0:	dd62      	ble.n	80025b8 <__aeabi_dmul+0x3f8>
 80024f2:	0751      	lsls	r1, r2, #29
 80024f4:	d009      	beq.n	800250a <__aeabi_dmul+0x34a>
 80024f6:	200f      	movs	r0, #15
 80024f8:	4010      	ands	r0, r2
 80024fa:	2804      	cmp	r0, #4
 80024fc:	d005      	beq.n	800250a <__aeabi_dmul+0x34a>
 80024fe:	1d10      	adds	r0, r2, #4
 8002500:	4290      	cmp	r0, r2
 8002502:	4192      	sbcs	r2, r2
 8002504:	4252      	negs	r2, r2
 8002506:	189b      	adds	r3, r3, r2
 8002508:	0002      	movs	r2, r0
 800250a:	01d9      	lsls	r1, r3, #7
 800250c:	d504      	bpl.n	8002518 <__aeabi_dmul+0x358>
 800250e:	2480      	movs	r4, #128	; 0x80
 8002510:	4819      	ldr	r0, [pc, #100]	; (8002578 <__aeabi_dmul+0x3b8>)
 8002512:	00e4      	lsls	r4, r4, #3
 8002514:	4003      	ands	r3, r0
 8002516:	4454      	add	r4, sl
 8002518:	4818      	ldr	r0, [pc, #96]	; (800257c <__aeabi_dmul+0x3bc>)
 800251a:	4284      	cmp	r4, r0
 800251c:	dd00      	ble.n	8002520 <__aeabi_dmul+0x360>
 800251e:	e727      	b.n	8002370 <__aeabi_dmul+0x1b0>
 8002520:	075e      	lsls	r6, r3, #29
 8002522:	025b      	lsls	r3, r3, #9
 8002524:	08d2      	lsrs	r2, r2, #3
 8002526:	0b1f      	lsrs	r7, r3, #12
 8002528:	0563      	lsls	r3, r4, #21
 800252a:	4316      	orrs	r6, r2
 800252c:	0d5b      	lsrs	r3, r3, #21
 800252e:	e6b2      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002530:	2300      	movs	r3, #0
 8002532:	4699      	mov	r9, r3
 8002534:	3301      	adds	r3, #1
 8002536:	2704      	movs	r7, #4
 8002538:	2600      	movs	r6, #0
 800253a:	469b      	mov	fp, r3
 800253c:	e664      	b.n	8002208 <__aeabi_dmul+0x48>
 800253e:	2303      	movs	r3, #3
 8002540:	9701      	str	r7, [sp, #4]
 8002542:	4681      	mov	r9, r0
 8002544:	270c      	movs	r7, #12
 8002546:	469b      	mov	fp, r3
 8002548:	e65e      	b.n	8002208 <__aeabi_dmul+0x48>
 800254a:	2201      	movs	r2, #1
 800254c:	2001      	movs	r0, #1
 800254e:	4317      	orrs	r7, r2
 8002550:	2200      	movs	r2, #0
 8002552:	e676      	b.n	8002242 <__aeabi_dmul+0x82>
 8002554:	2303      	movs	r3, #3
 8002556:	2003      	movs	r0, #3
 8002558:	431f      	orrs	r7, r3
 800255a:	4643      	mov	r3, r8
 800255c:	e671      	b.n	8002242 <__aeabi_dmul+0x82>
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	000007ff 	.word	0x000007ff
 8002564:	fffffc01 	.word	0xfffffc01
 8002568:	0800f450 	.word	0x0800f450
 800256c:	800fffff 	.word	0x800fffff
 8002570:	fffffc0d 	.word	0xfffffc0d
 8002574:	000003ff 	.word	0x000003ff
 8002578:	feffffff 	.word	0xfeffffff
 800257c:	000007fe 	.word	0x000007fe
 8002580:	2300      	movs	r3, #0
 8002582:	2780      	movs	r7, #128	; 0x80
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	033f      	lsls	r7, r7, #12
 8002588:	2600      	movs	r6, #0
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <__aeabi_dmul+0x4d8>)
 800258c:	e683      	b.n	8002296 <__aeabi_dmul+0xd6>
 800258e:	9b01      	ldr	r3, [sp, #4]
 8002590:	0032      	movs	r2, r6
 8002592:	46a4      	mov	ip, r4
 8002594:	4658      	mov	r0, fp
 8002596:	e670      	b.n	800227a <__aeabi_dmul+0xba>
 8002598:	46ac      	mov	ip, r5
 800259a:	e66e      	b.n	800227a <__aeabi_dmul+0xba>
 800259c:	2780      	movs	r7, #128	; 0x80
 800259e:	9901      	ldr	r1, [sp, #4]
 80025a0:	033f      	lsls	r7, r7, #12
 80025a2:	4239      	tst	r1, r7
 80025a4:	d02d      	beq.n	8002602 <__aeabi_dmul+0x442>
 80025a6:	423b      	tst	r3, r7
 80025a8:	d12b      	bne.n	8002602 <__aeabi_dmul+0x442>
 80025aa:	431f      	orrs	r7, r3
 80025ac:	033f      	lsls	r7, r7, #12
 80025ae:	0b3f      	lsrs	r7, r7, #12
 80025b0:	9500      	str	r5, [sp, #0]
 80025b2:	0016      	movs	r6, r2
 80025b4:	4b38      	ldr	r3, [pc, #224]	; (8002698 <__aeabi_dmul+0x4d8>)
 80025b6:	e66e      	b.n	8002296 <__aeabi_dmul+0xd6>
 80025b8:	2501      	movs	r5, #1
 80025ba:	1b2d      	subs	r5, r5, r4
 80025bc:	2d38      	cmp	r5, #56	; 0x38
 80025be:	dd00      	ble.n	80025c2 <__aeabi_dmul+0x402>
 80025c0:	e666      	b.n	8002290 <__aeabi_dmul+0xd0>
 80025c2:	2d1f      	cmp	r5, #31
 80025c4:	dc40      	bgt.n	8002648 <__aeabi_dmul+0x488>
 80025c6:	4835      	ldr	r0, [pc, #212]	; (800269c <__aeabi_dmul+0x4dc>)
 80025c8:	001c      	movs	r4, r3
 80025ca:	4450      	add	r0, sl
 80025cc:	0016      	movs	r6, r2
 80025ce:	4082      	lsls	r2, r0
 80025d0:	4084      	lsls	r4, r0
 80025d2:	40ee      	lsrs	r6, r5
 80025d4:	1e50      	subs	r0, r2, #1
 80025d6:	4182      	sbcs	r2, r0
 80025d8:	4334      	orrs	r4, r6
 80025da:	4314      	orrs	r4, r2
 80025dc:	40eb      	lsrs	r3, r5
 80025de:	0762      	lsls	r2, r4, #29
 80025e0:	d009      	beq.n	80025f6 <__aeabi_dmul+0x436>
 80025e2:	220f      	movs	r2, #15
 80025e4:	4022      	ands	r2, r4
 80025e6:	2a04      	cmp	r2, #4
 80025e8:	d005      	beq.n	80025f6 <__aeabi_dmul+0x436>
 80025ea:	0022      	movs	r2, r4
 80025ec:	1d14      	adds	r4, r2, #4
 80025ee:	4294      	cmp	r4, r2
 80025f0:	4180      	sbcs	r0, r0
 80025f2:	4240      	negs	r0, r0
 80025f4:	181b      	adds	r3, r3, r0
 80025f6:	021a      	lsls	r2, r3, #8
 80025f8:	d53e      	bpl.n	8002678 <__aeabi_dmul+0x4b8>
 80025fa:	2301      	movs	r3, #1
 80025fc:	2700      	movs	r7, #0
 80025fe:	2600      	movs	r6, #0
 8002600:	e649      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002602:	2780      	movs	r7, #128	; 0x80
 8002604:	9b01      	ldr	r3, [sp, #4]
 8002606:	033f      	lsls	r7, r7, #12
 8002608:	431f      	orrs	r7, r3
 800260a:	033f      	lsls	r7, r7, #12
 800260c:	0b3f      	lsrs	r7, r7, #12
 800260e:	9400      	str	r4, [sp, #0]
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <__aeabi_dmul+0x4d8>)
 8002612:	e640      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002614:	0003      	movs	r3, r0
 8002616:	465a      	mov	r2, fp
 8002618:	3b28      	subs	r3, #40	; 0x28
 800261a:	409a      	lsls	r2, r3
 800261c:	2600      	movs	r6, #0
 800261e:	9201      	str	r2, [sp, #4]
 8002620:	e66d      	b.n	80022fe <__aeabi_dmul+0x13e>
 8002622:	4658      	mov	r0, fp
 8002624:	f000 fccc 	bl	8002fc0 <__clzsi2>
 8002628:	3020      	adds	r0, #32
 800262a:	e657      	b.n	80022dc <__aeabi_dmul+0x11c>
 800262c:	0003      	movs	r3, r0
 800262e:	4652      	mov	r2, sl
 8002630:	3b28      	subs	r3, #40	; 0x28
 8002632:	409a      	lsls	r2, r3
 8002634:	0013      	movs	r3, r2
 8002636:	2200      	movs	r2, #0
 8002638:	e693      	b.n	8002362 <__aeabi_dmul+0x1a2>
 800263a:	4650      	mov	r0, sl
 800263c:	f000 fcc0 	bl	8002fc0 <__clzsi2>
 8002640:	3020      	adds	r0, #32
 8002642:	e67b      	b.n	800233c <__aeabi_dmul+0x17c>
 8002644:	46ca      	mov	sl, r9
 8002646:	e750      	b.n	80024ea <__aeabi_dmul+0x32a>
 8002648:	201f      	movs	r0, #31
 800264a:	001e      	movs	r6, r3
 800264c:	4240      	negs	r0, r0
 800264e:	1b04      	subs	r4, r0, r4
 8002650:	40e6      	lsrs	r6, r4
 8002652:	2d20      	cmp	r5, #32
 8002654:	d003      	beq.n	800265e <__aeabi_dmul+0x49e>
 8002656:	4c12      	ldr	r4, [pc, #72]	; (80026a0 <__aeabi_dmul+0x4e0>)
 8002658:	4454      	add	r4, sl
 800265a:	40a3      	lsls	r3, r4
 800265c:	431a      	orrs	r2, r3
 800265e:	1e50      	subs	r0, r2, #1
 8002660:	4182      	sbcs	r2, r0
 8002662:	4332      	orrs	r2, r6
 8002664:	2607      	movs	r6, #7
 8002666:	2700      	movs	r7, #0
 8002668:	4016      	ands	r6, r2
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x4c0>
 800266c:	200f      	movs	r0, #15
 800266e:	2300      	movs	r3, #0
 8002670:	4010      	ands	r0, r2
 8002672:	0014      	movs	r4, r2
 8002674:	2804      	cmp	r0, #4
 8002676:	d1b9      	bne.n	80025ec <__aeabi_dmul+0x42c>
 8002678:	0022      	movs	r2, r4
 800267a:	075e      	lsls	r6, r3, #29
 800267c:	025b      	lsls	r3, r3, #9
 800267e:	0b1f      	lsrs	r7, r3, #12
 8002680:	08d2      	lsrs	r2, r2, #3
 8002682:	4316      	orrs	r6, r2
 8002684:	2300      	movs	r3, #0
 8002686:	e606      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002688:	2780      	movs	r7, #128	; 0x80
 800268a:	033f      	lsls	r7, r7, #12
 800268c:	431f      	orrs	r7, r3
 800268e:	033f      	lsls	r7, r7, #12
 8002690:	0b3f      	lsrs	r7, r7, #12
 8002692:	0016      	movs	r6, r2
 8002694:	4b00      	ldr	r3, [pc, #0]	; (8002698 <__aeabi_dmul+0x4d8>)
 8002696:	e5fe      	b.n	8002296 <__aeabi_dmul+0xd6>
 8002698:	000007ff 	.word	0x000007ff
 800269c:	0000041e 	.word	0x0000041e
 80026a0:	0000043e 	.word	0x0000043e

080026a4 <__aeabi_dsub>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	4657      	mov	r7, sl
 80026a8:	464e      	mov	r6, r9
 80026aa:	4645      	mov	r5, r8
 80026ac:	46de      	mov	lr, fp
 80026ae:	000c      	movs	r4, r1
 80026b0:	0309      	lsls	r1, r1, #12
 80026b2:	b5e0      	push	{r5, r6, r7, lr}
 80026b4:	0a49      	lsrs	r1, r1, #9
 80026b6:	0f46      	lsrs	r6, r0, #29
 80026b8:	005f      	lsls	r7, r3, #1
 80026ba:	4331      	orrs	r1, r6
 80026bc:	031e      	lsls	r6, r3, #12
 80026be:	0fdb      	lsrs	r3, r3, #31
 80026c0:	0a76      	lsrs	r6, r6, #9
 80026c2:	469b      	mov	fp, r3
 80026c4:	0f53      	lsrs	r3, r2, #29
 80026c6:	4333      	orrs	r3, r6
 80026c8:	4ec8      	ldr	r6, [pc, #800]	; (80029ec <__aeabi_dsub+0x348>)
 80026ca:	0065      	lsls	r5, r4, #1
 80026cc:	00c0      	lsls	r0, r0, #3
 80026ce:	0fe4      	lsrs	r4, r4, #31
 80026d0:	00d2      	lsls	r2, r2, #3
 80026d2:	0d6d      	lsrs	r5, r5, #21
 80026d4:	46a2      	mov	sl, r4
 80026d6:	4681      	mov	r9, r0
 80026d8:	0d7f      	lsrs	r7, r7, #21
 80026da:	469c      	mov	ip, r3
 80026dc:	4690      	mov	r8, r2
 80026de:	42b7      	cmp	r7, r6
 80026e0:	d100      	bne.n	80026e4 <__aeabi_dsub+0x40>
 80026e2:	e0b9      	b.n	8002858 <__aeabi_dsub+0x1b4>
 80026e4:	465b      	mov	r3, fp
 80026e6:	2601      	movs	r6, #1
 80026e8:	4073      	eors	r3, r6
 80026ea:	469b      	mov	fp, r3
 80026ec:	1bee      	subs	r6, r5, r7
 80026ee:	45a3      	cmp	fp, r4
 80026f0:	d100      	bne.n	80026f4 <__aeabi_dsub+0x50>
 80026f2:	e083      	b.n	80027fc <__aeabi_dsub+0x158>
 80026f4:	2e00      	cmp	r6, #0
 80026f6:	dd63      	ble.n	80027c0 <__aeabi_dsub+0x11c>
 80026f8:	2f00      	cmp	r7, #0
 80026fa:	d000      	beq.n	80026fe <__aeabi_dsub+0x5a>
 80026fc:	e0b1      	b.n	8002862 <__aeabi_dsub+0x1be>
 80026fe:	4663      	mov	r3, ip
 8002700:	4313      	orrs	r3, r2
 8002702:	d100      	bne.n	8002706 <__aeabi_dsub+0x62>
 8002704:	e123      	b.n	800294e <__aeabi_dsub+0x2aa>
 8002706:	1e73      	subs	r3, r6, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d000      	beq.n	800270e <__aeabi_dsub+0x6a>
 800270c:	e1ba      	b.n	8002a84 <__aeabi_dsub+0x3e0>
 800270e:	1a86      	subs	r6, r0, r2
 8002710:	4663      	mov	r3, ip
 8002712:	42b0      	cmp	r0, r6
 8002714:	4180      	sbcs	r0, r0
 8002716:	2501      	movs	r5, #1
 8002718:	1ac9      	subs	r1, r1, r3
 800271a:	4240      	negs	r0, r0
 800271c:	1a09      	subs	r1, r1, r0
 800271e:	020b      	lsls	r3, r1, #8
 8002720:	d400      	bmi.n	8002724 <__aeabi_dsub+0x80>
 8002722:	e147      	b.n	80029b4 <__aeabi_dsub+0x310>
 8002724:	0249      	lsls	r1, r1, #9
 8002726:	0a4b      	lsrs	r3, r1, #9
 8002728:	4698      	mov	r8, r3
 800272a:	4643      	mov	r3, r8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d100      	bne.n	8002732 <__aeabi_dsub+0x8e>
 8002730:	e189      	b.n	8002a46 <__aeabi_dsub+0x3a2>
 8002732:	4640      	mov	r0, r8
 8002734:	f000 fc44 	bl	8002fc0 <__clzsi2>
 8002738:	0003      	movs	r3, r0
 800273a:	3b08      	subs	r3, #8
 800273c:	2b1f      	cmp	r3, #31
 800273e:	dd00      	ble.n	8002742 <__aeabi_dsub+0x9e>
 8002740:	e17c      	b.n	8002a3c <__aeabi_dsub+0x398>
 8002742:	2220      	movs	r2, #32
 8002744:	0030      	movs	r0, r6
 8002746:	1ad2      	subs	r2, r2, r3
 8002748:	4641      	mov	r1, r8
 800274a:	40d0      	lsrs	r0, r2
 800274c:	4099      	lsls	r1, r3
 800274e:	0002      	movs	r2, r0
 8002750:	409e      	lsls	r6, r3
 8002752:	430a      	orrs	r2, r1
 8002754:	429d      	cmp	r5, r3
 8002756:	dd00      	ble.n	800275a <__aeabi_dsub+0xb6>
 8002758:	e16a      	b.n	8002a30 <__aeabi_dsub+0x38c>
 800275a:	1b5d      	subs	r5, r3, r5
 800275c:	1c6b      	adds	r3, r5, #1
 800275e:	2b1f      	cmp	r3, #31
 8002760:	dd00      	ble.n	8002764 <__aeabi_dsub+0xc0>
 8002762:	e194      	b.n	8002a8e <__aeabi_dsub+0x3ea>
 8002764:	2120      	movs	r1, #32
 8002766:	0010      	movs	r0, r2
 8002768:	0035      	movs	r5, r6
 800276a:	1ac9      	subs	r1, r1, r3
 800276c:	408e      	lsls	r6, r1
 800276e:	40da      	lsrs	r2, r3
 8002770:	4088      	lsls	r0, r1
 8002772:	40dd      	lsrs	r5, r3
 8002774:	1e71      	subs	r1, r6, #1
 8002776:	418e      	sbcs	r6, r1
 8002778:	0011      	movs	r1, r2
 800277a:	2207      	movs	r2, #7
 800277c:	4328      	orrs	r0, r5
 800277e:	2500      	movs	r5, #0
 8002780:	4306      	orrs	r6, r0
 8002782:	4032      	ands	r2, r6
 8002784:	2a00      	cmp	r2, #0
 8002786:	d009      	beq.n	800279c <__aeabi_dsub+0xf8>
 8002788:	230f      	movs	r3, #15
 800278a:	4033      	ands	r3, r6
 800278c:	2b04      	cmp	r3, #4
 800278e:	d005      	beq.n	800279c <__aeabi_dsub+0xf8>
 8002790:	1d33      	adds	r3, r6, #4
 8002792:	42b3      	cmp	r3, r6
 8002794:	41b6      	sbcs	r6, r6
 8002796:	4276      	negs	r6, r6
 8002798:	1989      	adds	r1, r1, r6
 800279a:	001e      	movs	r6, r3
 800279c:	020b      	lsls	r3, r1, #8
 800279e:	d400      	bmi.n	80027a2 <__aeabi_dsub+0xfe>
 80027a0:	e23d      	b.n	8002c1e <__aeabi_dsub+0x57a>
 80027a2:	1c6a      	adds	r2, r5, #1
 80027a4:	4b91      	ldr	r3, [pc, #580]	; (80029ec <__aeabi_dsub+0x348>)
 80027a6:	0555      	lsls	r5, r2, #21
 80027a8:	0d6d      	lsrs	r5, r5, #21
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x10c>
 80027ae:	e119      	b.n	80029e4 <__aeabi_dsub+0x340>
 80027b0:	4a8f      	ldr	r2, [pc, #572]	; (80029f0 <__aeabi_dsub+0x34c>)
 80027b2:	08f6      	lsrs	r6, r6, #3
 80027b4:	400a      	ands	r2, r1
 80027b6:	0757      	lsls	r7, r2, #29
 80027b8:	0252      	lsls	r2, r2, #9
 80027ba:	4337      	orrs	r7, r6
 80027bc:	0b12      	lsrs	r2, r2, #12
 80027be:	e09b      	b.n	80028f8 <__aeabi_dsub+0x254>
 80027c0:	2e00      	cmp	r6, #0
 80027c2:	d000      	beq.n	80027c6 <__aeabi_dsub+0x122>
 80027c4:	e0c5      	b.n	8002952 <__aeabi_dsub+0x2ae>
 80027c6:	1c6e      	adds	r6, r5, #1
 80027c8:	0576      	lsls	r6, r6, #21
 80027ca:	0d76      	lsrs	r6, r6, #21
 80027cc:	2e01      	cmp	r6, #1
 80027ce:	dc00      	bgt.n	80027d2 <__aeabi_dsub+0x12e>
 80027d0:	e148      	b.n	8002a64 <__aeabi_dsub+0x3c0>
 80027d2:	4667      	mov	r7, ip
 80027d4:	1a86      	subs	r6, r0, r2
 80027d6:	1bcb      	subs	r3, r1, r7
 80027d8:	42b0      	cmp	r0, r6
 80027da:	41bf      	sbcs	r7, r7
 80027dc:	427f      	negs	r7, r7
 80027de:	46b8      	mov	r8, r7
 80027e0:	001f      	movs	r7, r3
 80027e2:	4643      	mov	r3, r8
 80027e4:	1aff      	subs	r7, r7, r3
 80027e6:	003b      	movs	r3, r7
 80027e8:	46b8      	mov	r8, r7
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	d500      	bpl.n	80027f0 <__aeabi_dsub+0x14c>
 80027ee:	e15f      	b.n	8002ab0 <__aeabi_dsub+0x40c>
 80027f0:	4337      	orrs	r7, r6
 80027f2:	d19a      	bne.n	800272a <__aeabi_dsub+0x86>
 80027f4:	2200      	movs	r2, #0
 80027f6:	2400      	movs	r4, #0
 80027f8:	2500      	movs	r5, #0
 80027fa:	e079      	b.n	80028f0 <__aeabi_dsub+0x24c>
 80027fc:	2e00      	cmp	r6, #0
 80027fe:	dc00      	bgt.n	8002802 <__aeabi_dsub+0x15e>
 8002800:	e0fa      	b.n	80029f8 <__aeabi_dsub+0x354>
 8002802:	2f00      	cmp	r7, #0
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x164>
 8002806:	e08d      	b.n	8002924 <__aeabi_dsub+0x280>
 8002808:	4b78      	ldr	r3, [pc, #480]	; (80029ec <__aeabi_dsub+0x348>)
 800280a:	429d      	cmp	r5, r3
 800280c:	d067      	beq.n	80028de <__aeabi_dsub+0x23a>
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	4667      	mov	r7, ip
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	431f      	orrs	r7, r3
 8002816:	46bc      	mov	ip, r7
 8002818:	2e38      	cmp	r6, #56	; 0x38
 800281a:	dc00      	bgt.n	800281e <__aeabi_dsub+0x17a>
 800281c:	e152      	b.n	8002ac4 <__aeabi_dsub+0x420>
 800281e:	4663      	mov	r3, ip
 8002820:	4313      	orrs	r3, r2
 8002822:	1e5a      	subs	r2, r3, #1
 8002824:	4193      	sbcs	r3, r2
 8002826:	181e      	adds	r6, r3, r0
 8002828:	4286      	cmp	r6, r0
 800282a:	4180      	sbcs	r0, r0
 800282c:	4240      	negs	r0, r0
 800282e:	1809      	adds	r1, r1, r0
 8002830:	020b      	lsls	r3, r1, #8
 8002832:	d400      	bmi.n	8002836 <__aeabi_dsub+0x192>
 8002834:	e0be      	b.n	80029b4 <__aeabi_dsub+0x310>
 8002836:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <__aeabi_dsub+0x348>)
 8002838:	3501      	adds	r5, #1
 800283a:	429d      	cmp	r5, r3
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x19c>
 800283e:	e0d2      	b.n	80029e6 <__aeabi_dsub+0x342>
 8002840:	4a6b      	ldr	r2, [pc, #428]	; (80029f0 <__aeabi_dsub+0x34c>)
 8002842:	0873      	lsrs	r3, r6, #1
 8002844:	400a      	ands	r2, r1
 8002846:	2101      	movs	r1, #1
 8002848:	400e      	ands	r6, r1
 800284a:	431e      	orrs	r6, r3
 800284c:	0851      	lsrs	r1, r2, #1
 800284e:	07d3      	lsls	r3, r2, #31
 8002850:	2207      	movs	r2, #7
 8002852:	431e      	orrs	r6, r3
 8002854:	4032      	ands	r2, r6
 8002856:	e795      	b.n	8002784 <__aeabi_dsub+0xe0>
 8002858:	001e      	movs	r6, r3
 800285a:	4316      	orrs	r6, r2
 800285c:	d000      	beq.n	8002860 <__aeabi_dsub+0x1bc>
 800285e:	e745      	b.n	80026ec <__aeabi_dsub+0x48>
 8002860:	e740      	b.n	80026e4 <__aeabi_dsub+0x40>
 8002862:	4b62      	ldr	r3, [pc, #392]	; (80029ec <__aeabi_dsub+0x348>)
 8002864:	429d      	cmp	r5, r3
 8002866:	d03a      	beq.n	80028de <__aeabi_dsub+0x23a>
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	4667      	mov	r7, ip
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	431f      	orrs	r7, r3
 8002870:	46bc      	mov	ip, r7
 8002872:	2e38      	cmp	r6, #56	; 0x38
 8002874:	dd00      	ble.n	8002878 <__aeabi_dsub+0x1d4>
 8002876:	e0eb      	b.n	8002a50 <__aeabi_dsub+0x3ac>
 8002878:	2e1f      	cmp	r6, #31
 800287a:	dc00      	bgt.n	800287e <__aeabi_dsub+0x1da>
 800287c:	e13a      	b.n	8002af4 <__aeabi_dsub+0x450>
 800287e:	0033      	movs	r3, r6
 8002880:	4667      	mov	r7, ip
 8002882:	3b20      	subs	r3, #32
 8002884:	40df      	lsrs	r7, r3
 8002886:	003b      	movs	r3, r7
 8002888:	2e20      	cmp	r6, #32
 800288a:	d005      	beq.n	8002898 <__aeabi_dsub+0x1f4>
 800288c:	2740      	movs	r7, #64	; 0x40
 800288e:	1bbf      	subs	r7, r7, r6
 8002890:	4666      	mov	r6, ip
 8002892:	40be      	lsls	r6, r7
 8002894:	4332      	orrs	r2, r6
 8002896:	4690      	mov	r8, r2
 8002898:	4646      	mov	r6, r8
 800289a:	1e72      	subs	r2, r6, #1
 800289c:	4196      	sbcs	r6, r2
 800289e:	4333      	orrs	r3, r6
 80028a0:	e0da      	b.n	8002a58 <__aeabi_dsub+0x3b4>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x204>
 80028a6:	e214      	b.n	8002cd2 <__aeabi_dsub+0x62e>
 80028a8:	4663      	mov	r3, ip
 80028aa:	4313      	orrs	r3, r2
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x20c>
 80028ae:	e168      	b.n	8002b82 <__aeabi_dsub+0x4de>
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	074e      	lsls	r6, r1, #29
 80028b4:	08c0      	lsrs	r0, r0, #3
 80028b6:	08c9      	lsrs	r1, r1, #3
 80028b8:	031b      	lsls	r3, r3, #12
 80028ba:	4306      	orrs	r6, r0
 80028bc:	4219      	tst	r1, r3
 80028be:	d008      	beq.n	80028d2 <__aeabi_dsub+0x22e>
 80028c0:	4660      	mov	r0, ip
 80028c2:	08c0      	lsrs	r0, r0, #3
 80028c4:	4218      	tst	r0, r3
 80028c6:	d104      	bne.n	80028d2 <__aeabi_dsub+0x22e>
 80028c8:	4663      	mov	r3, ip
 80028ca:	0001      	movs	r1, r0
 80028cc:	08d2      	lsrs	r2, r2, #3
 80028ce:	075e      	lsls	r6, r3, #29
 80028d0:	4316      	orrs	r6, r2
 80028d2:	00f3      	lsls	r3, r6, #3
 80028d4:	4699      	mov	r9, r3
 80028d6:	00c9      	lsls	r1, r1, #3
 80028d8:	0f72      	lsrs	r2, r6, #29
 80028da:	4d44      	ldr	r5, [pc, #272]	; (80029ec <__aeabi_dsub+0x348>)
 80028dc:	4311      	orrs	r1, r2
 80028de:	464b      	mov	r3, r9
 80028e0:	08de      	lsrs	r6, r3, #3
 80028e2:	4b42      	ldr	r3, [pc, #264]	; (80029ec <__aeabi_dsub+0x348>)
 80028e4:	074f      	lsls	r7, r1, #29
 80028e6:	4337      	orrs	r7, r6
 80028e8:	08ca      	lsrs	r2, r1, #3
 80028ea:	429d      	cmp	r5, r3
 80028ec:	d100      	bne.n	80028f0 <__aeabi_dsub+0x24c>
 80028ee:	e06e      	b.n	80029ce <__aeabi_dsub+0x32a>
 80028f0:	0312      	lsls	r2, r2, #12
 80028f2:	056d      	lsls	r5, r5, #21
 80028f4:	0b12      	lsrs	r2, r2, #12
 80028f6:	0d6d      	lsrs	r5, r5, #21
 80028f8:	2100      	movs	r1, #0
 80028fa:	0312      	lsls	r2, r2, #12
 80028fc:	0b13      	lsrs	r3, r2, #12
 80028fe:	0d0a      	lsrs	r2, r1, #20
 8002900:	0512      	lsls	r2, r2, #20
 8002902:	431a      	orrs	r2, r3
 8002904:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <__aeabi_dsub+0x350>)
 8002906:	052d      	lsls	r5, r5, #20
 8002908:	4013      	ands	r3, r2
 800290a:	432b      	orrs	r3, r5
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	07e4      	lsls	r4, r4, #31
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	4323      	orrs	r3, r4
 8002914:	0038      	movs	r0, r7
 8002916:	0019      	movs	r1, r3
 8002918:	bc3c      	pop	{r2, r3, r4, r5}
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	46a2      	mov	sl, r4
 8002920:	46ab      	mov	fp, r5
 8002922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002924:	4663      	mov	r3, ip
 8002926:	4313      	orrs	r3, r2
 8002928:	d011      	beq.n	800294e <__aeabi_dsub+0x2aa>
 800292a:	1e73      	subs	r3, r6, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d000      	beq.n	8002932 <__aeabi_dsub+0x28e>
 8002930:	e107      	b.n	8002b42 <__aeabi_dsub+0x49e>
 8002932:	1886      	adds	r6, r0, r2
 8002934:	4286      	cmp	r6, r0
 8002936:	4180      	sbcs	r0, r0
 8002938:	4461      	add	r1, ip
 800293a:	4240      	negs	r0, r0
 800293c:	1809      	adds	r1, r1, r0
 800293e:	2501      	movs	r5, #1
 8002940:	020b      	lsls	r3, r1, #8
 8002942:	d537      	bpl.n	80029b4 <__aeabi_dsub+0x310>
 8002944:	2502      	movs	r5, #2
 8002946:	e77b      	b.n	8002840 <__aeabi_dsub+0x19c>
 8002948:	003e      	movs	r6, r7
 800294a:	4661      	mov	r1, ip
 800294c:	4691      	mov	r9, r2
 800294e:	0035      	movs	r5, r6
 8002950:	e7c5      	b.n	80028de <__aeabi_dsub+0x23a>
 8002952:	465c      	mov	r4, fp
 8002954:	2d00      	cmp	r5, #0
 8002956:	d000      	beq.n	800295a <__aeabi_dsub+0x2b6>
 8002958:	e0e1      	b.n	8002b1e <__aeabi_dsub+0x47a>
 800295a:	000b      	movs	r3, r1
 800295c:	4303      	orrs	r3, r0
 800295e:	d0f3      	beq.n	8002948 <__aeabi_dsub+0x2a4>
 8002960:	1c73      	adds	r3, r6, #1
 8002962:	d100      	bne.n	8002966 <__aeabi_dsub+0x2c2>
 8002964:	e1ac      	b.n	8002cc0 <__aeabi_dsub+0x61c>
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <__aeabi_dsub+0x348>)
 8002968:	429f      	cmp	r7, r3
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x2ca>
 800296c:	e13a      	b.n	8002be4 <__aeabi_dsub+0x540>
 800296e:	43f3      	mvns	r3, r6
 8002970:	2b38      	cmp	r3, #56	; 0x38
 8002972:	dd00      	ble.n	8002976 <__aeabi_dsub+0x2d2>
 8002974:	e16f      	b.n	8002c56 <__aeabi_dsub+0x5b2>
 8002976:	2b1f      	cmp	r3, #31
 8002978:	dd00      	ble.n	800297c <__aeabi_dsub+0x2d8>
 800297a:	e18c      	b.n	8002c96 <__aeabi_dsub+0x5f2>
 800297c:	2520      	movs	r5, #32
 800297e:	000e      	movs	r6, r1
 8002980:	1aed      	subs	r5, r5, r3
 8002982:	40ae      	lsls	r6, r5
 8002984:	46b0      	mov	r8, r6
 8002986:	0006      	movs	r6, r0
 8002988:	46aa      	mov	sl, r5
 800298a:	40de      	lsrs	r6, r3
 800298c:	4645      	mov	r5, r8
 800298e:	4335      	orrs	r5, r6
 8002990:	002e      	movs	r6, r5
 8002992:	4655      	mov	r5, sl
 8002994:	40d9      	lsrs	r1, r3
 8002996:	40a8      	lsls	r0, r5
 8002998:	4663      	mov	r3, ip
 800299a:	1e45      	subs	r5, r0, #1
 800299c:	41a8      	sbcs	r0, r5
 800299e:	1a5b      	subs	r3, r3, r1
 80029a0:	469c      	mov	ip, r3
 80029a2:	4330      	orrs	r0, r6
 80029a4:	1a16      	subs	r6, r2, r0
 80029a6:	42b2      	cmp	r2, r6
 80029a8:	4192      	sbcs	r2, r2
 80029aa:	4663      	mov	r3, ip
 80029ac:	4252      	negs	r2, r2
 80029ae:	1a99      	subs	r1, r3, r2
 80029b0:	003d      	movs	r5, r7
 80029b2:	e6b4      	b.n	800271e <__aeabi_dsub+0x7a>
 80029b4:	2207      	movs	r2, #7
 80029b6:	4032      	ands	r2, r6
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d000      	beq.n	80029be <__aeabi_dsub+0x31a>
 80029bc:	e6e4      	b.n	8002788 <__aeabi_dsub+0xe4>
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <__aeabi_dsub+0x348>)
 80029c0:	08f6      	lsrs	r6, r6, #3
 80029c2:	074f      	lsls	r7, r1, #29
 80029c4:	4337      	orrs	r7, r6
 80029c6:	08ca      	lsrs	r2, r1, #3
 80029c8:	429d      	cmp	r5, r3
 80029ca:	d000      	beq.n	80029ce <__aeabi_dsub+0x32a>
 80029cc:	e790      	b.n	80028f0 <__aeabi_dsub+0x24c>
 80029ce:	003b      	movs	r3, r7
 80029d0:	4313      	orrs	r3, r2
 80029d2:	d100      	bne.n	80029d6 <__aeabi_dsub+0x332>
 80029d4:	e1a6      	b.n	8002d24 <__aeabi_dsub+0x680>
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	031b      	lsls	r3, r3, #12
 80029da:	431a      	orrs	r2, r3
 80029dc:	0312      	lsls	r2, r2, #12
 80029de:	0b12      	lsrs	r2, r2, #12
 80029e0:	4d02      	ldr	r5, [pc, #8]	; (80029ec <__aeabi_dsub+0x348>)
 80029e2:	e789      	b.n	80028f8 <__aeabi_dsub+0x254>
 80029e4:	0015      	movs	r5, r2
 80029e6:	2200      	movs	r2, #0
 80029e8:	2700      	movs	r7, #0
 80029ea:	e785      	b.n	80028f8 <__aeabi_dsub+0x254>
 80029ec:	000007ff 	.word	0x000007ff
 80029f0:	ff7fffff 	.word	0xff7fffff
 80029f4:	800fffff 	.word	0x800fffff
 80029f8:	2e00      	cmp	r6, #0
 80029fa:	d000      	beq.n	80029fe <__aeabi_dsub+0x35a>
 80029fc:	e0c7      	b.n	8002b8e <__aeabi_dsub+0x4ea>
 80029fe:	1c6b      	adds	r3, r5, #1
 8002a00:	055e      	lsls	r6, r3, #21
 8002a02:	0d76      	lsrs	r6, r6, #21
 8002a04:	2e01      	cmp	r6, #1
 8002a06:	dc00      	bgt.n	8002a0a <__aeabi_dsub+0x366>
 8002a08:	e0f0      	b.n	8002bec <__aeabi_dsub+0x548>
 8002a0a:	4dc8      	ldr	r5, [pc, #800]	; (8002d2c <__aeabi_dsub+0x688>)
 8002a0c:	42ab      	cmp	r3, r5
 8002a0e:	d100      	bne.n	8002a12 <__aeabi_dsub+0x36e>
 8002a10:	e0b9      	b.n	8002b86 <__aeabi_dsub+0x4e2>
 8002a12:	1885      	adds	r5, r0, r2
 8002a14:	000a      	movs	r2, r1
 8002a16:	4285      	cmp	r5, r0
 8002a18:	4189      	sbcs	r1, r1
 8002a1a:	4462      	add	r2, ip
 8002a1c:	4249      	negs	r1, r1
 8002a1e:	1851      	adds	r1, r2, r1
 8002a20:	2207      	movs	r2, #7
 8002a22:	07ce      	lsls	r6, r1, #31
 8002a24:	086d      	lsrs	r5, r5, #1
 8002a26:	432e      	orrs	r6, r5
 8002a28:	0849      	lsrs	r1, r1, #1
 8002a2a:	4032      	ands	r2, r6
 8002a2c:	001d      	movs	r5, r3
 8002a2e:	e6a9      	b.n	8002784 <__aeabi_dsub+0xe0>
 8002a30:	49bf      	ldr	r1, [pc, #764]	; (8002d30 <__aeabi_dsub+0x68c>)
 8002a32:	1aed      	subs	r5, r5, r3
 8002a34:	4011      	ands	r1, r2
 8002a36:	2207      	movs	r2, #7
 8002a38:	4032      	ands	r2, r6
 8002a3a:	e6a3      	b.n	8002784 <__aeabi_dsub+0xe0>
 8002a3c:	0032      	movs	r2, r6
 8002a3e:	3828      	subs	r0, #40	; 0x28
 8002a40:	4082      	lsls	r2, r0
 8002a42:	2600      	movs	r6, #0
 8002a44:	e686      	b.n	8002754 <__aeabi_dsub+0xb0>
 8002a46:	0030      	movs	r0, r6
 8002a48:	f000 faba 	bl	8002fc0 <__clzsi2>
 8002a4c:	3020      	adds	r0, #32
 8002a4e:	e673      	b.n	8002738 <__aeabi_dsub+0x94>
 8002a50:	4663      	mov	r3, ip
 8002a52:	4313      	orrs	r3, r2
 8002a54:	1e5a      	subs	r2, r3, #1
 8002a56:	4193      	sbcs	r3, r2
 8002a58:	1ac6      	subs	r6, r0, r3
 8002a5a:	42b0      	cmp	r0, r6
 8002a5c:	4180      	sbcs	r0, r0
 8002a5e:	4240      	negs	r0, r0
 8002a60:	1a09      	subs	r1, r1, r0
 8002a62:	e65c      	b.n	800271e <__aeabi_dsub+0x7a>
 8002a64:	000e      	movs	r6, r1
 8002a66:	4667      	mov	r7, ip
 8002a68:	4306      	orrs	r6, r0
 8002a6a:	4317      	orrs	r7, r2
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	d15e      	bne.n	8002b2e <__aeabi_dsub+0x48a>
 8002a70:	2e00      	cmp	r6, #0
 8002a72:	d000      	beq.n	8002a76 <__aeabi_dsub+0x3d2>
 8002a74:	e0f3      	b.n	8002c5e <__aeabi_dsub+0x5ba>
 8002a76:	2f00      	cmp	r7, #0
 8002a78:	d100      	bne.n	8002a7c <__aeabi_dsub+0x3d8>
 8002a7a:	e11e      	b.n	8002cba <__aeabi_dsub+0x616>
 8002a7c:	465c      	mov	r4, fp
 8002a7e:	4661      	mov	r1, ip
 8002a80:	4691      	mov	r9, r2
 8002a82:	e72c      	b.n	80028de <__aeabi_dsub+0x23a>
 8002a84:	4fa9      	ldr	r7, [pc, #676]	; (8002d2c <__aeabi_dsub+0x688>)
 8002a86:	42be      	cmp	r6, r7
 8002a88:	d07b      	beq.n	8002b82 <__aeabi_dsub+0x4de>
 8002a8a:	001e      	movs	r6, r3
 8002a8c:	e6f1      	b.n	8002872 <__aeabi_dsub+0x1ce>
 8002a8e:	0010      	movs	r0, r2
 8002a90:	3d1f      	subs	r5, #31
 8002a92:	40e8      	lsrs	r0, r5
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d003      	beq.n	8002aa0 <__aeabi_dsub+0x3fc>
 8002a98:	2140      	movs	r1, #64	; 0x40
 8002a9a:	1acb      	subs	r3, r1, r3
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	4316      	orrs	r6, r2
 8002aa0:	1e73      	subs	r3, r6, #1
 8002aa2:	419e      	sbcs	r6, r3
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	4306      	orrs	r6, r0
 8002aa8:	4032      	ands	r2, r6
 8002aaa:	2100      	movs	r1, #0
 8002aac:	2500      	movs	r5, #0
 8002aae:	e783      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002ab0:	1a16      	subs	r6, r2, r0
 8002ab2:	4663      	mov	r3, ip
 8002ab4:	42b2      	cmp	r2, r6
 8002ab6:	4180      	sbcs	r0, r0
 8002ab8:	1a59      	subs	r1, r3, r1
 8002aba:	4240      	negs	r0, r0
 8002abc:	1a0b      	subs	r3, r1, r0
 8002abe:	4698      	mov	r8, r3
 8002ac0:	465c      	mov	r4, fp
 8002ac2:	e632      	b.n	800272a <__aeabi_dsub+0x86>
 8002ac4:	2e1f      	cmp	r6, #31
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dsub+0x426>
 8002ac8:	e0ab      	b.n	8002c22 <__aeabi_dsub+0x57e>
 8002aca:	2720      	movs	r7, #32
 8002acc:	1bbb      	subs	r3, r7, r6
 8002ace:	469a      	mov	sl, r3
 8002ad0:	4663      	mov	r3, ip
 8002ad2:	4657      	mov	r7, sl
 8002ad4:	40bb      	lsls	r3, r7
 8002ad6:	4699      	mov	r9, r3
 8002ad8:	0013      	movs	r3, r2
 8002ada:	464f      	mov	r7, r9
 8002adc:	40f3      	lsrs	r3, r6
 8002ade:	431f      	orrs	r7, r3
 8002ae0:	003b      	movs	r3, r7
 8002ae2:	4657      	mov	r7, sl
 8002ae4:	40ba      	lsls	r2, r7
 8002ae6:	1e57      	subs	r7, r2, #1
 8002ae8:	41ba      	sbcs	r2, r7
 8002aea:	4313      	orrs	r3, r2
 8002aec:	4662      	mov	r2, ip
 8002aee:	40f2      	lsrs	r2, r6
 8002af0:	1889      	adds	r1, r1, r2
 8002af2:	e698      	b.n	8002826 <__aeabi_dsub+0x182>
 8002af4:	2720      	movs	r7, #32
 8002af6:	1bbb      	subs	r3, r7, r6
 8002af8:	469a      	mov	sl, r3
 8002afa:	4663      	mov	r3, ip
 8002afc:	4657      	mov	r7, sl
 8002afe:	40bb      	lsls	r3, r7
 8002b00:	4699      	mov	r9, r3
 8002b02:	0013      	movs	r3, r2
 8002b04:	464f      	mov	r7, r9
 8002b06:	40f3      	lsrs	r3, r6
 8002b08:	431f      	orrs	r7, r3
 8002b0a:	003b      	movs	r3, r7
 8002b0c:	4657      	mov	r7, sl
 8002b0e:	40ba      	lsls	r2, r7
 8002b10:	1e57      	subs	r7, r2, #1
 8002b12:	41ba      	sbcs	r2, r7
 8002b14:	4313      	orrs	r3, r2
 8002b16:	4662      	mov	r2, ip
 8002b18:	40f2      	lsrs	r2, r6
 8002b1a:	1a89      	subs	r1, r1, r2
 8002b1c:	e79c      	b.n	8002a58 <__aeabi_dsub+0x3b4>
 8002b1e:	4b83      	ldr	r3, [pc, #524]	; (8002d2c <__aeabi_dsub+0x688>)
 8002b20:	429f      	cmp	r7, r3
 8002b22:	d05f      	beq.n	8002be4 <__aeabi_dsub+0x540>
 8002b24:	2580      	movs	r5, #128	; 0x80
 8002b26:	042d      	lsls	r5, r5, #16
 8002b28:	4273      	negs	r3, r6
 8002b2a:	4329      	orrs	r1, r5
 8002b2c:	e720      	b.n	8002970 <__aeabi_dsub+0x2cc>
 8002b2e:	2e00      	cmp	r6, #0
 8002b30:	d10c      	bne.n	8002b4c <__aeabi_dsub+0x4a8>
 8002b32:	2f00      	cmp	r7, #0
 8002b34:	d100      	bne.n	8002b38 <__aeabi_dsub+0x494>
 8002b36:	e0d0      	b.n	8002cda <__aeabi_dsub+0x636>
 8002b38:	465c      	mov	r4, fp
 8002b3a:	4661      	mov	r1, ip
 8002b3c:	4691      	mov	r9, r2
 8002b3e:	4d7b      	ldr	r5, [pc, #492]	; (8002d2c <__aeabi_dsub+0x688>)
 8002b40:	e6cd      	b.n	80028de <__aeabi_dsub+0x23a>
 8002b42:	4f7a      	ldr	r7, [pc, #488]	; (8002d2c <__aeabi_dsub+0x688>)
 8002b44:	42be      	cmp	r6, r7
 8002b46:	d01c      	beq.n	8002b82 <__aeabi_dsub+0x4de>
 8002b48:	001e      	movs	r6, r3
 8002b4a:	e665      	b.n	8002818 <__aeabi_dsub+0x174>
 8002b4c:	2f00      	cmp	r7, #0
 8002b4e:	d018      	beq.n	8002b82 <__aeabi_dsub+0x4de>
 8002b50:	08c0      	lsrs	r0, r0, #3
 8002b52:	074e      	lsls	r6, r1, #29
 8002b54:	4306      	orrs	r6, r0
 8002b56:	2080      	movs	r0, #128	; 0x80
 8002b58:	08c9      	lsrs	r1, r1, #3
 8002b5a:	0300      	lsls	r0, r0, #12
 8002b5c:	4201      	tst	r1, r0
 8002b5e:	d008      	beq.n	8002b72 <__aeabi_dsub+0x4ce>
 8002b60:	4663      	mov	r3, ip
 8002b62:	08dc      	lsrs	r4, r3, #3
 8002b64:	4204      	tst	r4, r0
 8002b66:	d104      	bne.n	8002b72 <__aeabi_dsub+0x4ce>
 8002b68:	0021      	movs	r1, r4
 8002b6a:	46da      	mov	sl, fp
 8002b6c:	08d2      	lsrs	r2, r2, #3
 8002b6e:	075e      	lsls	r6, r3, #29
 8002b70:	4316      	orrs	r6, r2
 8002b72:	00f3      	lsls	r3, r6, #3
 8002b74:	4699      	mov	r9, r3
 8002b76:	2401      	movs	r4, #1
 8002b78:	4653      	mov	r3, sl
 8002b7a:	00c9      	lsls	r1, r1, #3
 8002b7c:	0f72      	lsrs	r2, r6, #29
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	401c      	ands	r4, r3
 8002b82:	4d6a      	ldr	r5, [pc, #424]	; (8002d2c <__aeabi_dsub+0x688>)
 8002b84:	e6ab      	b.n	80028de <__aeabi_dsub+0x23a>
 8002b86:	001d      	movs	r5, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2700      	movs	r7, #0
 8002b8c:	e6b4      	b.n	80028f8 <__aeabi_dsub+0x254>
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	d159      	bne.n	8002c46 <__aeabi_dsub+0x5a2>
 8002b92:	000b      	movs	r3, r1
 8002b94:	4303      	orrs	r3, r0
 8002b96:	d100      	bne.n	8002b9a <__aeabi_dsub+0x4f6>
 8002b98:	e6d6      	b.n	8002948 <__aeabi_dsub+0x2a4>
 8002b9a:	1c73      	adds	r3, r6, #1
 8002b9c:	d100      	bne.n	8002ba0 <__aeabi_dsub+0x4fc>
 8002b9e:	e0b2      	b.n	8002d06 <__aeabi_dsub+0x662>
 8002ba0:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <__aeabi_dsub+0x688>)
 8002ba2:	429f      	cmp	r7, r3
 8002ba4:	d01e      	beq.n	8002be4 <__aeabi_dsub+0x540>
 8002ba6:	43f3      	mvns	r3, r6
 8002ba8:	2b38      	cmp	r3, #56	; 0x38
 8002baa:	dc6f      	bgt.n	8002c8c <__aeabi_dsub+0x5e8>
 8002bac:	2b1f      	cmp	r3, #31
 8002bae:	dd00      	ble.n	8002bb2 <__aeabi_dsub+0x50e>
 8002bb0:	e097      	b.n	8002ce2 <__aeabi_dsub+0x63e>
 8002bb2:	2520      	movs	r5, #32
 8002bb4:	000e      	movs	r6, r1
 8002bb6:	1aed      	subs	r5, r5, r3
 8002bb8:	40ae      	lsls	r6, r5
 8002bba:	46b0      	mov	r8, r6
 8002bbc:	0006      	movs	r6, r0
 8002bbe:	46aa      	mov	sl, r5
 8002bc0:	40de      	lsrs	r6, r3
 8002bc2:	4645      	mov	r5, r8
 8002bc4:	4335      	orrs	r5, r6
 8002bc6:	002e      	movs	r6, r5
 8002bc8:	4655      	mov	r5, sl
 8002bca:	40a8      	lsls	r0, r5
 8002bcc:	40d9      	lsrs	r1, r3
 8002bce:	1e45      	subs	r5, r0, #1
 8002bd0:	41a8      	sbcs	r0, r5
 8002bd2:	448c      	add	ip, r1
 8002bd4:	4306      	orrs	r6, r0
 8002bd6:	18b6      	adds	r6, r6, r2
 8002bd8:	4296      	cmp	r6, r2
 8002bda:	4192      	sbcs	r2, r2
 8002bdc:	4251      	negs	r1, r2
 8002bde:	4461      	add	r1, ip
 8002be0:	003d      	movs	r5, r7
 8002be2:	e625      	b.n	8002830 <__aeabi_dsub+0x18c>
 8002be4:	003d      	movs	r5, r7
 8002be6:	4661      	mov	r1, ip
 8002be8:	4691      	mov	r9, r2
 8002bea:	e678      	b.n	80028de <__aeabi_dsub+0x23a>
 8002bec:	000b      	movs	r3, r1
 8002bee:	4303      	orrs	r3, r0
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	d000      	beq.n	8002bf6 <__aeabi_dsub+0x552>
 8002bf4:	e655      	b.n	80028a2 <__aeabi_dsub+0x1fe>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f5      	beq.n	8002be6 <__aeabi_dsub+0x542>
 8002bfa:	4663      	mov	r3, ip
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x55e>
 8002c00:	e66d      	b.n	80028de <__aeabi_dsub+0x23a>
 8002c02:	1886      	adds	r6, r0, r2
 8002c04:	4286      	cmp	r6, r0
 8002c06:	4180      	sbcs	r0, r0
 8002c08:	4461      	add	r1, ip
 8002c0a:	4240      	negs	r0, r0
 8002c0c:	1809      	adds	r1, r1, r0
 8002c0e:	2200      	movs	r2, #0
 8002c10:	020b      	lsls	r3, r1, #8
 8002c12:	d400      	bmi.n	8002c16 <__aeabi_dsub+0x572>
 8002c14:	e6d0      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002c16:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <__aeabi_dsub+0x68c>)
 8002c18:	3501      	adds	r5, #1
 8002c1a:	4019      	ands	r1, r3
 8002c1c:	e5b2      	b.n	8002784 <__aeabi_dsub+0xe0>
 8002c1e:	46b1      	mov	r9, r6
 8002c20:	e65d      	b.n	80028de <__aeabi_dsub+0x23a>
 8002c22:	0033      	movs	r3, r6
 8002c24:	4667      	mov	r7, ip
 8002c26:	3b20      	subs	r3, #32
 8002c28:	40df      	lsrs	r7, r3
 8002c2a:	003b      	movs	r3, r7
 8002c2c:	2e20      	cmp	r6, #32
 8002c2e:	d005      	beq.n	8002c3c <__aeabi_dsub+0x598>
 8002c30:	2740      	movs	r7, #64	; 0x40
 8002c32:	1bbf      	subs	r7, r7, r6
 8002c34:	4666      	mov	r6, ip
 8002c36:	40be      	lsls	r6, r7
 8002c38:	4332      	orrs	r2, r6
 8002c3a:	4690      	mov	r8, r2
 8002c3c:	4646      	mov	r6, r8
 8002c3e:	1e72      	subs	r2, r6, #1
 8002c40:	4196      	sbcs	r6, r2
 8002c42:	4333      	orrs	r3, r6
 8002c44:	e5ef      	b.n	8002826 <__aeabi_dsub+0x182>
 8002c46:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <__aeabi_dsub+0x688>)
 8002c48:	429f      	cmp	r7, r3
 8002c4a:	d0cb      	beq.n	8002be4 <__aeabi_dsub+0x540>
 8002c4c:	2580      	movs	r5, #128	; 0x80
 8002c4e:	042d      	lsls	r5, r5, #16
 8002c50:	4273      	negs	r3, r6
 8002c52:	4329      	orrs	r1, r5
 8002c54:	e7a8      	b.n	8002ba8 <__aeabi_dsub+0x504>
 8002c56:	4308      	orrs	r0, r1
 8002c58:	1e41      	subs	r1, r0, #1
 8002c5a:	4188      	sbcs	r0, r1
 8002c5c:	e6a2      	b.n	80029a4 <__aeabi_dsub+0x300>
 8002c5e:	2f00      	cmp	r7, #0
 8002c60:	d100      	bne.n	8002c64 <__aeabi_dsub+0x5c0>
 8002c62:	e63c      	b.n	80028de <__aeabi_dsub+0x23a>
 8002c64:	4663      	mov	r3, ip
 8002c66:	1a86      	subs	r6, r0, r2
 8002c68:	1acf      	subs	r7, r1, r3
 8002c6a:	42b0      	cmp	r0, r6
 8002c6c:	419b      	sbcs	r3, r3
 8002c6e:	425b      	negs	r3, r3
 8002c70:	1afb      	subs	r3, r7, r3
 8002c72:	4698      	mov	r8, r3
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	d54e      	bpl.n	8002d16 <__aeabi_dsub+0x672>
 8002c78:	1a16      	subs	r6, r2, r0
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	42b2      	cmp	r2, r6
 8002c7e:	4192      	sbcs	r2, r2
 8002c80:	1a59      	subs	r1, r3, r1
 8002c82:	4252      	negs	r2, r2
 8002c84:	1a89      	subs	r1, r1, r2
 8002c86:	465c      	mov	r4, fp
 8002c88:	2200      	movs	r2, #0
 8002c8a:	e57b      	b.n	8002784 <__aeabi_dsub+0xe0>
 8002c8c:	4301      	orrs	r1, r0
 8002c8e:	000e      	movs	r6, r1
 8002c90:	1e71      	subs	r1, r6, #1
 8002c92:	418e      	sbcs	r6, r1
 8002c94:	e79f      	b.n	8002bd6 <__aeabi_dsub+0x532>
 8002c96:	001d      	movs	r5, r3
 8002c98:	000e      	movs	r6, r1
 8002c9a:	3d20      	subs	r5, #32
 8002c9c:	40ee      	lsrs	r6, r5
 8002c9e:	46b0      	mov	r8, r6
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d004      	beq.n	8002cae <__aeabi_dsub+0x60a>
 8002ca4:	2540      	movs	r5, #64	; 0x40
 8002ca6:	1aeb      	subs	r3, r5, r3
 8002ca8:	4099      	lsls	r1, r3
 8002caa:	4308      	orrs	r0, r1
 8002cac:	4681      	mov	r9, r0
 8002cae:	4648      	mov	r0, r9
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	1e41      	subs	r1, r0, #1
 8002cb4:	4188      	sbcs	r0, r1
 8002cb6:	4318      	orrs	r0, r3
 8002cb8:	e674      	b.n	80029a4 <__aeabi_dsub+0x300>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2400      	movs	r4, #0
 8002cbe:	e617      	b.n	80028f0 <__aeabi_dsub+0x24c>
 8002cc0:	1a16      	subs	r6, r2, r0
 8002cc2:	4663      	mov	r3, ip
 8002cc4:	42b2      	cmp	r2, r6
 8002cc6:	4192      	sbcs	r2, r2
 8002cc8:	1a59      	subs	r1, r3, r1
 8002cca:	4252      	negs	r2, r2
 8002ccc:	1a89      	subs	r1, r1, r2
 8002cce:	003d      	movs	r5, r7
 8002cd0:	e525      	b.n	800271e <__aeabi_dsub+0x7a>
 8002cd2:	4661      	mov	r1, ip
 8002cd4:	4691      	mov	r9, r2
 8002cd6:	4d15      	ldr	r5, [pc, #84]	; (8002d2c <__aeabi_dsub+0x688>)
 8002cd8:	e601      	b.n	80028de <__aeabi_dsub+0x23a>
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	2400      	movs	r4, #0
 8002cde:	0312      	lsls	r2, r2, #12
 8002ce0:	e679      	b.n	80029d6 <__aeabi_dsub+0x332>
 8002ce2:	001d      	movs	r5, r3
 8002ce4:	000e      	movs	r6, r1
 8002ce6:	3d20      	subs	r5, #32
 8002ce8:	40ee      	lsrs	r6, r5
 8002cea:	46b0      	mov	r8, r6
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d004      	beq.n	8002cfa <__aeabi_dsub+0x656>
 8002cf0:	2540      	movs	r5, #64	; 0x40
 8002cf2:	1aeb      	subs	r3, r5, r3
 8002cf4:	4099      	lsls	r1, r3
 8002cf6:	4308      	orrs	r0, r1
 8002cf8:	4681      	mov	r9, r0
 8002cfa:	464e      	mov	r6, r9
 8002cfc:	4643      	mov	r3, r8
 8002cfe:	1e71      	subs	r1, r6, #1
 8002d00:	418e      	sbcs	r6, r1
 8002d02:	431e      	orrs	r6, r3
 8002d04:	e767      	b.n	8002bd6 <__aeabi_dsub+0x532>
 8002d06:	1886      	adds	r6, r0, r2
 8002d08:	4296      	cmp	r6, r2
 8002d0a:	419b      	sbcs	r3, r3
 8002d0c:	4461      	add	r1, ip
 8002d0e:	425b      	negs	r3, r3
 8002d10:	18c9      	adds	r1, r1, r3
 8002d12:	003d      	movs	r5, r7
 8002d14:	e58c      	b.n	8002830 <__aeabi_dsub+0x18c>
 8002d16:	4647      	mov	r7, r8
 8002d18:	4337      	orrs	r7, r6
 8002d1a:	d0ce      	beq.n	8002cba <__aeabi_dsub+0x616>
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	4641      	mov	r1, r8
 8002d20:	4032      	ands	r2, r6
 8002d22:	e649      	b.n	80029b8 <__aeabi_dsub+0x314>
 8002d24:	2700      	movs	r7, #0
 8002d26:	003a      	movs	r2, r7
 8002d28:	e5e6      	b.n	80028f8 <__aeabi_dsub+0x254>
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	000007ff 	.word	0x000007ff
 8002d30:	ff7fffff 	.word	0xff7fffff

08002d34 <__aeabi_d2iz>:
 8002d34:	b530      	push	{r4, r5, lr}
 8002d36:	4d14      	ldr	r5, [pc, #80]	; (8002d88 <__aeabi_d2iz+0x54>)
 8002d38:	030a      	lsls	r2, r1, #12
 8002d3a:	004b      	lsls	r3, r1, #1
 8002d3c:	0b12      	lsrs	r2, r2, #12
 8002d3e:	0d5b      	lsrs	r3, r3, #21
 8002d40:	0fc9      	lsrs	r1, r1, #31
 8002d42:	2400      	movs	r4, #0
 8002d44:	42ab      	cmp	r3, r5
 8002d46:	dd11      	ble.n	8002d6c <__aeabi_d2iz+0x38>
 8002d48:	4c10      	ldr	r4, [pc, #64]	; (8002d8c <__aeabi_d2iz+0x58>)
 8002d4a:	42a3      	cmp	r3, r4
 8002d4c:	dc10      	bgt.n	8002d70 <__aeabi_d2iz+0x3c>
 8002d4e:	2480      	movs	r4, #128	; 0x80
 8002d50:	0364      	lsls	r4, r4, #13
 8002d52:	4322      	orrs	r2, r4
 8002d54:	4c0e      	ldr	r4, [pc, #56]	; (8002d90 <__aeabi_d2iz+0x5c>)
 8002d56:	1ae4      	subs	r4, r4, r3
 8002d58:	2c1f      	cmp	r4, #31
 8002d5a:	dd0c      	ble.n	8002d76 <__aeabi_d2iz+0x42>
 8002d5c:	480d      	ldr	r0, [pc, #52]	; (8002d94 <__aeabi_d2iz+0x60>)
 8002d5e:	1ac3      	subs	r3, r0, r3
 8002d60:	40da      	lsrs	r2, r3
 8002d62:	0013      	movs	r3, r2
 8002d64:	425c      	negs	r4, r3
 8002d66:	2900      	cmp	r1, #0
 8002d68:	d100      	bne.n	8002d6c <__aeabi_d2iz+0x38>
 8002d6a:	001c      	movs	r4, r3
 8002d6c:	0020      	movs	r0, r4
 8002d6e:	bd30      	pop	{r4, r5, pc}
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <__aeabi_d2iz+0x64>)
 8002d72:	18cc      	adds	r4, r1, r3
 8002d74:	e7fa      	b.n	8002d6c <__aeabi_d2iz+0x38>
 8002d76:	4d09      	ldr	r5, [pc, #36]	; (8002d9c <__aeabi_d2iz+0x68>)
 8002d78:	40e0      	lsrs	r0, r4
 8002d7a:	46ac      	mov	ip, r5
 8002d7c:	4463      	add	r3, ip
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	0013      	movs	r3, r2
 8002d82:	4303      	orrs	r3, r0
 8002d84:	e7ee      	b.n	8002d64 <__aeabi_d2iz+0x30>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	000003fe 	.word	0x000003fe
 8002d8c:	0000041d 	.word	0x0000041d
 8002d90:	00000433 	.word	0x00000433
 8002d94:	00000413 	.word	0x00000413
 8002d98:	7fffffff 	.word	0x7fffffff
 8002d9c:	fffffbed 	.word	0xfffffbed

08002da0 <__aeabi_i2d>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d02d      	beq.n	8002e02 <__aeabi_i2d+0x62>
 8002da6:	17c3      	asrs	r3, r0, #31
 8002da8:	18c5      	adds	r5, r0, r3
 8002daa:	405d      	eors	r5, r3
 8002dac:	0fc4      	lsrs	r4, r0, #31
 8002dae:	0028      	movs	r0, r5
 8002db0:	f000 f906 	bl	8002fc0 <__clzsi2>
 8002db4:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <__aeabi_i2d+0x6c>)
 8002db6:	1a1b      	subs	r3, r3, r0
 8002db8:	055b      	lsls	r3, r3, #21
 8002dba:	0d5b      	lsrs	r3, r3, #21
 8002dbc:	280a      	cmp	r0, #10
 8002dbe:	dd15      	ble.n	8002dec <__aeabi_i2d+0x4c>
 8002dc0:	380b      	subs	r0, #11
 8002dc2:	4085      	lsls	r5, r0
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	032d      	lsls	r5, r5, #12
 8002dc8:	0b2d      	lsrs	r5, r5, #12
 8002dca:	2100      	movs	r1, #0
 8002dcc:	0010      	movs	r0, r2
 8002dce:	032d      	lsls	r5, r5, #12
 8002dd0:	0d0a      	lsrs	r2, r1, #20
 8002dd2:	0b2d      	lsrs	r5, r5, #12
 8002dd4:	0512      	lsls	r2, r2, #20
 8002dd6:	432a      	orrs	r2, r5
 8002dd8:	4d0d      	ldr	r5, [pc, #52]	; (8002e10 <__aeabi_i2d+0x70>)
 8002dda:	051b      	lsls	r3, r3, #20
 8002ddc:	402a      	ands	r2, r5
 8002dde:	4313      	orrs	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	07e4      	lsls	r4, r4, #31
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	4323      	orrs	r3, r4
 8002de8:	0019      	movs	r1, r3
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	0002      	movs	r2, r0
 8002dee:	0029      	movs	r1, r5
 8002df0:	3215      	adds	r2, #21
 8002df2:	4091      	lsls	r1, r2
 8002df4:	000a      	movs	r2, r1
 8002df6:	210b      	movs	r1, #11
 8002df8:	1a08      	subs	r0, r1, r0
 8002dfa:	40c5      	lsrs	r5, r0
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	0b2d      	lsrs	r5, r5, #12
 8002e00:	e7e3      	b.n	8002dca <__aeabi_i2d+0x2a>
 8002e02:	2400      	movs	r4, #0
 8002e04:	2300      	movs	r3, #0
 8002e06:	2500      	movs	r5, #0
 8002e08:	2200      	movs	r2, #0
 8002e0a:	e7de      	b.n	8002dca <__aeabi_i2d+0x2a>
 8002e0c:	0000041e 	.word	0x0000041e
 8002e10:	800fffff 	.word	0x800fffff

08002e14 <__aeabi_f2d>:
 8002e14:	0041      	lsls	r1, r0, #1
 8002e16:	0e09      	lsrs	r1, r1, #24
 8002e18:	1c4b      	adds	r3, r1, #1
 8002e1a:	b570      	push	{r4, r5, r6, lr}
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	0246      	lsls	r6, r0, #9
 8002e20:	0a75      	lsrs	r5, r6, #9
 8002e22:	0fc4      	lsrs	r4, r0, #31
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	dd14      	ble.n	8002e52 <__aeabi_f2d+0x3e>
 8002e28:	23e0      	movs	r3, #224	; 0xe0
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	076d      	lsls	r5, r5, #29
 8002e2e:	0b36      	lsrs	r6, r6, #12
 8002e30:	18cb      	adds	r3, r1, r3
 8002e32:	2100      	movs	r1, #0
 8002e34:	0d0a      	lsrs	r2, r1, #20
 8002e36:	0028      	movs	r0, r5
 8002e38:	0512      	lsls	r2, r2, #20
 8002e3a:	4d1c      	ldr	r5, [pc, #112]	; (8002eac <__aeabi_f2d+0x98>)
 8002e3c:	4332      	orrs	r2, r6
 8002e3e:	055b      	lsls	r3, r3, #21
 8002e40:	402a      	ands	r2, r5
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	4313      	orrs	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	07e4      	lsls	r4, r4, #31
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	4323      	orrs	r3, r4
 8002e4e:	0019      	movs	r1, r3
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
 8002e52:	2900      	cmp	r1, #0
 8002e54:	d114      	bne.n	8002e80 <__aeabi_f2d+0x6c>
 8002e56:	2d00      	cmp	r5, #0
 8002e58:	d01e      	beq.n	8002e98 <__aeabi_f2d+0x84>
 8002e5a:	0028      	movs	r0, r5
 8002e5c:	f000 f8b0 	bl	8002fc0 <__clzsi2>
 8002e60:	280a      	cmp	r0, #10
 8002e62:	dc1c      	bgt.n	8002e9e <__aeabi_f2d+0x8a>
 8002e64:	230b      	movs	r3, #11
 8002e66:	002a      	movs	r2, r5
 8002e68:	1a1b      	subs	r3, r3, r0
 8002e6a:	40da      	lsrs	r2, r3
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	3315      	adds	r3, #21
 8002e70:	409d      	lsls	r5, r3
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <__aeabi_f2d+0x9c>)
 8002e74:	0312      	lsls	r2, r2, #12
 8002e76:	1a1b      	subs	r3, r3, r0
 8002e78:	055b      	lsls	r3, r3, #21
 8002e7a:	0b16      	lsrs	r6, r2, #12
 8002e7c:	0d5b      	lsrs	r3, r3, #21
 8002e7e:	e7d8      	b.n	8002e32 <__aeabi_f2d+0x1e>
 8002e80:	2d00      	cmp	r5, #0
 8002e82:	d006      	beq.n	8002e92 <__aeabi_f2d+0x7e>
 8002e84:	0b32      	lsrs	r2, r6, #12
 8002e86:	2680      	movs	r6, #128	; 0x80
 8002e88:	0336      	lsls	r6, r6, #12
 8002e8a:	076d      	lsls	r5, r5, #29
 8002e8c:	4316      	orrs	r6, r2
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <__aeabi_f2d+0xa0>)
 8002e90:	e7cf      	b.n	8002e32 <__aeabi_f2d+0x1e>
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <__aeabi_f2d+0xa0>)
 8002e94:	2600      	movs	r6, #0
 8002e96:	e7cc      	b.n	8002e32 <__aeabi_f2d+0x1e>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	e7c9      	b.n	8002e32 <__aeabi_f2d+0x1e>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	002a      	movs	r2, r5
 8002ea2:	3b0b      	subs	r3, #11
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	e7e3      	b.n	8002e72 <__aeabi_f2d+0x5e>
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	800fffff 	.word	0x800fffff
 8002eb0:	00000389 	.word	0x00000389
 8002eb4:	000007ff 	.word	0x000007ff

08002eb8 <__aeabi_d2f>:
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eba:	004c      	lsls	r4, r1, #1
 8002ebc:	0d64      	lsrs	r4, r4, #21
 8002ebe:	030b      	lsls	r3, r1, #12
 8002ec0:	1c62      	adds	r2, r4, #1
 8002ec2:	0a5b      	lsrs	r3, r3, #9
 8002ec4:	0f46      	lsrs	r6, r0, #29
 8002ec6:	0552      	lsls	r2, r2, #21
 8002ec8:	0fc9      	lsrs	r1, r1, #31
 8002eca:	431e      	orrs	r6, r3
 8002ecc:	00c5      	lsls	r5, r0, #3
 8002ece:	0d52      	lsrs	r2, r2, #21
 8002ed0:	2a01      	cmp	r2, #1
 8002ed2:	dd29      	ble.n	8002f28 <__aeabi_d2f+0x70>
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <__aeabi_d2f+0xfc>)
 8002ed6:	18e7      	adds	r7, r4, r3
 8002ed8:	2ffe      	cmp	r7, #254	; 0xfe
 8002eda:	dc1c      	bgt.n	8002f16 <__aeabi_d2f+0x5e>
 8002edc:	2f00      	cmp	r7, #0
 8002ede:	dd3b      	ble.n	8002f58 <__aeabi_d2f+0xa0>
 8002ee0:	0180      	lsls	r0, r0, #6
 8002ee2:	1e43      	subs	r3, r0, #1
 8002ee4:	4198      	sbcs	r0, r3
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	00f3      	lsls	r3, r6, #3
 8002eea:	0f6d      	lsrs	r5, r5, #29
 8002eec:	4303      	orrs	r3, r0
 8002eee:	432b      	orrs	r3, r5
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d004      	beq.n	8002f00 <__aeabi_d2f+0x48>
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	401a      	ands	r2, r3
 8002efa:	2a04      	cmp	r2, #4
 8002efc:	d000      	beq.n	8002f00 <__aeabi_d2f+0x48>
 8002efe:	3304      	adds	r3, #4
 8002f00:	2280      	movs	r2, #128	; 0x80
 8002f02:	04d2      	lsls	r2, r2, #19
 8002f04:	401a      	ands	r2, r3
 8002f06:	d024      	beq.n	8002f52 <__aeabi_d2f+0x9a>
 8002f08:	3701      	adds	r7, #1
 8002f0a:	b2fa      	uxtb	r2, r7
 8002f0c:	2fff      	cmp	r7, #255	; 0xff
 8002f0e:	d002      	beq.n	8002f16 <__aeabi_d2f+0x5e>
 8002f10:	019b      	lsls	r3, r3, #6
 8002f12:	0a58      	lsrs	r0, r3, #9
 8002f14:	e001      	b.n	8002f1a <__aeabi_d2f+0x62>
 8002f16:	22ff      	movs	r2, #255	; 0xff
 8002f18:	2000      	movs	r0, #0
 8002f1a:	0240      	lsls	r0, r0, #9
 8002f1c:	05d2      	lsls	r2, r2, #23
 8002f1e:	0a40      	lsrs	r0, r0, #9
 8002f20:	07c9      	lsls	r1, r1, #31
 8002f22:	4310      	orrs	r0, r2
 8002f24:	4308      	orrs	r0, r1
 8002f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f28:	4335      	orrs	r5, r6
 8002f2a:	2c00      	cmp	r4, #0
 8002f2c:	d104      	bne.n	8002f38 <__aeabi_d2f+0x80>
 8002f2e:	2d00      	cmp	r5, #0
 8002f30:	d10a      	bne.n	8002f48 <__aeabi_d2f+0x90>
 8002f32:	2200      	movs	r2, #0
 8002f34:	2000      	movs	r0, #0
 8002f36:	e7f0      	b.n	8002f1a <__aeabi_d2f+0x62>
 8002f38:	2d00      	cmp	r5, #0
 8002f3a:	d0ec      	beq.n	8002f16 <__aeabi_d2f+0x5e>
 8002f3c:	2080      	movs	r0, #128	; 0x80
 8002f3e:	03c0      	lsls	r0, r0, #15
 8002f40:	4330      	orrs	r0, r6
 8002f42:	22ff      	movs	r2, #255	; 0xff
 8002f44:	e7e9      	b.n	8002f1a <__aeabi_d2f+0x62>
 8002f46:	2400      	movs	r4, #0
 8002f48:	2300      	movs	r3, #0
 8002f4a:	025b      	lsls	r3, r3, #9
 8002f4c:	0a58      	lsrs	r0, r3, #9
 8002f4e:	b2e2      	uxtb	r2, r4
 8002f50:	e7e3      	b.n	8002f1a <__aeabi_d2f+0x62>
 8002f52:	08db      	lsrs	r3, r3, #3
 8002f54:	003c      	movs	r4, r7
 8002f56:	e7f8      	b.n	8002f4a <__aeabi_d2f+0x92>
 8002f58:	003b      	movs	r3, r7
 8002f5a:	3317      	adds	r3, #23
 8002f5c:	dbf3      	blt.n	8002f46 <__aeabi_d2f+0x8e>
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	4333      	orrs	r3, r6
 8002f64:	261e      	movs	r6, #30
 8002f66:	1bf6      	subs	r6, r6, r7
 8002f68:	2e1f      	cmp	r6, #31
 8002f6a:	dd14      	ble.n	8002f96 <__aeabi_d2f+0xde>
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4252      	negs	r2, r2
 8002f70:	1bd7      	subs	r7, r2, r7
 8002f72:	001a      	movs	r2, r3
 8002f74:	40fa      	lsrs	r2, r7
 8002f76:	0017      	movs	r7, r2
 8002f78:	2e20      	cmp	r6, #32
 8002f7a:	d004      	beq.n	8002f86 <__aeabi_d2f+0xce>
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <__aeabi_d2f+0x100>)
 8002f7e:	4694      	mov	ip, r2
 8002f80:	4464      	add	r4, ip
 8002f82:	40a3      	lsls	r3, r4
 8002f84:	431d      	orrs	r5, r3
 8002f86:	002b      	movs	r3, r5
 8002f88:	1e5d      	subs	r5, r3, #1
 8002f8a:	41ab      	sbcs	r3, r5
 8002f8c:	2207      	movs	r2, #7
 8002f8e:	433b      	orrs	r3, r7
 8002f90:	401a      	ands	r2, r3
 8002f92:	2700      	movs	r7, #0
 8002f94:	e7ad      	b.n	8002ef2 <__aeabi_d2f+0x3a>
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <__aeabi_d2f+0x104>)
 8002f98:	0028      	movs	r0, r5
 8002f9a:	18a2      	adds	r2, r4, r2
 8002f9c:	4095      	lsls	r5, r2
 8002f9e:	4093      	lsls	r3, r2
 8002fa0:	1e6c      	subs	r4, r5, #1
 8002fa2:	41a5      	sbcs	r5, r4
 8002fa4:	40f0      	lsrs	r0, r6
 8002fa6:	2207      	movs	r2, #7
 8002fa8:	432b      	orrs	r3, r5
 8002faa:	4303      	orrs	r3, r0
 8002fac:	401a      	ands	r2, r3
 8002fae:	2700      	movs	r7, #0
 8002fb0:	e79f      	b.n	8002ef2 <__aeabi_d2f+0x3a>
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	fffffc80 	.word	0xfffffc80
 8002fb8:	fffffca2 	.word	0xfffffca2
 8002fbc:	fffffc82 	.word	0xfffffc82

08002fc0 <__clzsi2>:
 8002fc0:	211c      	movs	r1, #28
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	4298      	cmp	r0, r3
 8002fc8:	d301      	bcc.n	8002fce <__clzsi2+0xe>
 8002fca:	0c00      	lsrs	r0, r0, #16
 8002fcc:	3910      	subs	r1, #16
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	4298      	cmp	r0, r3
 8002fd2:	d301      	bcc.n	8002fd8 <__clzsi2+0x18>
 8002fd4:	0a00      	lsrs	r0, r0, #8
 8002fd6:	3908      	subs	r1, #8
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	4298      	cmp	r0, r3
 8002fdc:	d301      	bcc.n	8002fe2 <__clzsi2+0x22>
 8002fde:	0900      	lsrs	r0, r0, #4
 8002fe0:	3904      	subs	r1, #4
 8002fe2:	a202      	add	r2, pc, #8	; (adr r2, 8002fec <__clzsi2+0x2c>)
 8002fe4:	5c10      	ldrb	r0, [r2, r0]
 8002fe6:	1840      	adds	r0, r0, r1
 8002fe8:	4770      	bx	lr
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	02020304 	.word	0x02020304
 8002ff0:	01010101 	.word	0x01010101
	...

08002ffc <CANSPI_EN_Int>:

/** CAN SPI APIs */ 

/* Enable Interrupt */
void CANSPI_EN_Int(SPI_HandleTypeDef *SPI_CAN)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Clear CAN bus wakeup interrupt */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTF, 0xff, 0x00);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	2300      	movs	r3, #0
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	f000 fd00 	bl	8003a10 <MCP2515_BitModify>

  /* Enable CAN bus activity wakeup */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTE, 0xff, 0xff);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	23ff      	movs	r3, #255	; 0xff
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	212b      	movs	r1, #43	; 0x2b
 8003018:	f000 fcfa 	bl	8003a10 <MCP2515_BitModify>
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}

08003024 <CANSPI_CL_Flag_Int>:

void CANSPI_CL_Flag_Int(SPI_HandleTypeDef *SPI_CAN)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Clear CAN bus wakeup interrupt */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTF, 0xff, 0x00);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	2300      	movs	r3, #0
 8003030:	22ff      	movs	r2, #255	; 0xff
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	f000 fcec 	bl	8003a10 <MCP2515_BitModify>
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b002      	add	sp, #8
 800303e:	bd80      	pop	{r7, pc}

08003040 <CANSPI_Initialize>:
  MCP2515_SetSleepMode(SPI_CAN);
}

/* CAN 통신 초기화  */
bool CANSPI_Initialize(SPI_HandleTypeDef *SPI_CAN)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8003048:	210c      	movs	r1, #12
 800304a:	187b      	adds	r3, r7, r1
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
  RXM0reg.RXM0SIDL = 0x00;
 8003050:	187b      	adds	r3, r7, r1
 8003052:	2200      	movs	r2, #0
 8003054:	705a      	strb	r2, [r3, #1]
  RXM0reg.RXM0EID8 = 0x00;
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2200      	movs	r2, #0
 800305a:	709a      	strb	r2, [r3, #2]
  RXM0reg.RXM0EID0 = 0x00;
 800305c:	187b      	adds	r3, r7, r1
 800305e:	2200      	movs	r2, #0
 8003060:	70da      	strb	r2, [r3, #3]
  
  RXM1reg.RXM1SIDH = 0x00;
 8003062:	2108      	movs	r1, #8
 8003064:	187b      	adds	r3, r7, r1
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
  RXM1reg.RXM1SIDL = 0x00;
 800306a:	187b      	adds	r3, r7, r1
 800306c:	2200      	movs	r2, #0
 800306e:	705a      	strb	r2, [r3, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8003070:	187b      	adds	r3, r7, r1
 8003072:	2200      	movs	r2, #0
 8003074:	709a      	strb	r2, [r3, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8003076:	187b      	adds	r3, r7, r1
 8003078:	2200      	movs	r2, #0
 800307a:	70da      	strb	r2, [r3, #3]
  
  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;      
 800307c:	2124      	movs	r1, #36	; 0x24
 800307e:	187b      	adds	r3, r7, r1
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8003084:	187b      	adds	r3, r7, r1
 8003086:	2200      	movs	r2, #0
 8003088:	705a      	strb	r2, [r3, #1]
  RXF0reg.RXF0EID8 = 0x00;
 800308a:	187b      	adds	r3, r7, r1
 800308c:	2200      	movs	r2, #0
 800308e:	709a      	strb	r2, [r3, #2]
  RXF0reg.RXF0EID0 = 0x00;
 8003090:	187b      	adds	r3, r7, r1
 8003092:	2200      	movs	r2, #0
 8003094:	70da      	strb	r2, [r3, #3]
  
  RXF1reg.RXF1SIDH = 0x00;
 8003096:	2120      	movs	r1, #32
 8003098:	187b      	adds	r3, r7, r1
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	2208      	movs	r2, #8
 80030a2:	705a      	strb	r2, [r3, #1]
  RXF1reg.RXF1EID8 = 0x00;
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2200      	movs	r2, #0
 80030a8:	709a      	strb	r2, [r3, #2]
  RXF1reg.RXF1EID0 = 0x00;
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	2200      	movs	r2, #0
 80030ae:	70da      	strb	r2, [r3, #3]
  
  RXF2reg.RXF2SIDH = 0x00;
 80030b0:	211c      	movs	r1, #28
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
  RXF2reg.RXF2SIDL = 0x00;
 80030b8:	187b      	adds	r3, r7, r1
 80030ba:	2200      	movs	r2, #0
 80030bc:	705a      	strb	r2, [r3, #1]
  RXF2reg.RXF2EID8 = 0x00;
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	2200      	movs	r2, #0
 80030c2:	709a      	strb	r2, [r3, #2]
  RXF2reg.RXF2EID0 = 0x00;
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	2200      	movs	r2, #0
 80030c8:	70da      	strb	r2, [r3, #3]
  
  RXF3reg.RXF3SIDH = 0x00;
 80030ca:	2118      	movs	r1, #24
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
  RXF3reg.RXF3SIDL = 0x00;
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	2200      	movs	r2, #0
 80030d6:	705a      	strb	r2, [r3, #1]
  RXF3reg.RXF3EID8 = 0x00;
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	2200      	movs	r2, #0
 80030dc:	709a      	strb	r2, [r3, #2]
  RXF3reg.RXF3EID0 = 0x00;
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	2200      	movs	r2, #0
 80030e2:	70da      	strb	r2, [r3, #3]
  
  RXF4reg.RXF4SIDH = 0x00;
 80030e4:	2114      	movs	r1, #20
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
  RXF4reg.RXF4SIDL = 0x00;
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	2200      	movs	r2, #0
 80030f0:	705a      	strb	r2, [r3, #1]
  RXF4reg.RXF4EID8 = 0x00;
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2200      	movs	r2, #0
 80030f6:	709a      	strb	r2, [r3, #2]
  RXF4reg.RXF4EID0 = 0x00;
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2200      	movs	r2, #0
 80030fc:	70da      	strb	r2, [r3, #3]
  
  RXF5reg.RXF5SIDH = 0x00;
 80030fe:	2110      	movs	r1, #16
 8003100:	187b      	adds	r3, r7, r1
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
  RXF5reg.RXF5SIDL = 0x08;
 8003106:	187b      	adds	r3, r7, r1
 8003108:	2208      	movs	r2, #8
 800310a:	705a      	strb	r2, [r3, #1]
  RXF5reg.RXF5EID8 = 0x00;
 800310c:	187b      	adds	r3, r7, r1
 800310e:	2200      	movs	r2, #0
 8003110:	709a      	strb	r2, [r3, #2]
  RXF5reg.RXF5EID0 = 0x00;
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2200      	movs	r2, #0
 8003116:	70da      	strb	r2, [r3, #3]
  
  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize(SPI_CAN))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	0018      	movs	r0, r3
 800311c:	f000 fac2 	bl	80036a4 <MCP2515_Initialize>
 8003120:	0003      	movs	r3, r0
 8003122:	001a      	movs	r2, r3
 8003124:	2301      	movs	r3, #1
 8003126:	4053      	eors	r3, r2
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <CANSPI_Initialize+0xf2>
    return false;
 800312e:	2300      	movs	r3, #0
 8003130:	e074      	b.n	800321c <CANSPI_Initialize+0x1dc>
    
  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode(SPI_CAN))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	0018      	movs	r0, r3
 8003136:	f000 fad9 	bl	80036ec <MCP2515_SetConfigMode>
 800313a:	0003      	movs	r3, r0
 800313c:	001a      	movs	r2, r3
 800313e:	2301      	movs	r3, #1
 8003140:	4053      	eors	r3, r2
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <CANSPI_Initialize+0x10c>
    return false;
 8003148:	2300      	movs	r3, #0
 800314a:	e067      	b.n	800321c <CANSPI_Initialize+0x1dc>
  
  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800314c:	230c      	movs	r3, #12
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	2223      	movs	r2, #35	; 0x23
 8003154:	2120      	movs	r1, #32
 8003156:	f000 fb99 	bl	800388c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800315a:	2308      	movs	r3, #8
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	2227      	movs	r2, #39	; 0x27
 8003162:	2124      	movs	r1, #36	; 0x24
 8003164:	f000 fb92 	bl	800388c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8003168:	2324      	movs	r3, #36	; 0x24
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	2203      	movs	r2, #3
 8003170:	2100      	movs	r1, #0
 8003172:	f000 fb8b 	bl	800388c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8003176:	2320      	movs	r3, #32
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	2207      	movs	r2, #7
 800317e:	2104      	movs	r1, #4
 8003180:	f000 fb84 	bl	800388c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8003184:	231c      	movs	r3, #28
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	220b      	movs	r2, #11
 800318c:	2108      	movs	r1, #8
 800318e:	f000 fb7d 	bl	800388c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8003192:	2318      	movs	r3, #24
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	2213      	movs	r2, #19
 800319a:	2110      	movs	r1, #16
 800319c:	f000 fb76 	bl	800388c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80031a0:	2314      	movs	r3, #20
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	2217      	movs	r2, #23
 80031a8:	2114      	movs	r1, #20
 80031aa:	f000 fb6f 	bl	800388c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80031ae:	2310      	movs	r3, #16
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	221b      	movs	r2, #27
 80031b6:	2118      	movs	r1, #24
 80031b8:	f000 fb68 	bl	800388c <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(SPI_CAN, MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2204      	movs	r2, #4
 80031c0:	2160      	movs	r1, #96	; 0x60
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 fb37 	bl	8003836 <MCP2515_WriteByte>
  MCP2515_WriteByte(SPI_CAN, MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	2170      	movs	r1, #112	; 0x70
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 fb31 	bl	8003836 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF1, 0x00);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	212a      	movs	r1, #42	; 0x2a
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 fb2b 	bl	8003836 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF2, 0xE5);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	22e5      	movs	r2, #229	; 0xe5
 80031e4:	2129      	movs	r1, #41	; 0x29
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 fb25 	bl	8003836 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF3, 0x83);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2283      	movs	r2, #131	; 0x83
 80031f0:	2128      	movs	r1, #40	; 0x28
 80031f2:	0018      	movs	r0, r3
 80031f4:	f000 fb1f 	bl	8003836 <MCP2515_WriteByte>
  
  CANSPI_EN_Int(SPI_CAN);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7ff fefe 	bl	8002ffc <CANSPI_EN_Int>
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode(SPI_CAN))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	0018      	movs	r0, r3
 8003204:	f000 fa9c 	bl	8003740 <MCP2515_SetNormalMode>
 8003208:	0003      	movs	r3, r0
 800320a:	001a      	movs	r2, r3
 800320c:	2301      	movs	r3, #1
 800320e:	4053      	eors	r3, r2
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <CANSPI_Initialize+0x1da>
    return false;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <CANSPI_Initialize+0x1dc>
  
  return true;
 800321a:	2301      	movs	r3, #1
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b00a      	add	sp, #40	; 0x28
 8003222:	bd80      	pop	{r7, pc}

08003224 <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(SPI_HandleTypeDef *SPI_CAN, uCAN_MSG *tempCanMsg)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af02      	add	r7, sp, #8
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint8_t returnValue = 0;
 800322e:	230f      	movs	r3, #15
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
  
  idReg.tempSIDH = 0;
 8003236:	4b43      	ldr	r3, [pc, #268]	; (8003344 <CANSPI_Transmit+0x120>)
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800323c:	4b41      	ldr	r3, [pc, #260]	; (8003344 <CANSPI_Transmit+0x120>)
 800323e:	2200      	movs	r2, #0
 8003240:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8003242:	4b40      	ldr	r3, [pc, #256]	; (8003344 <CANSPI_Transmit+0x120>)
 8003244:	2200      	movs	r2, #0
 8003246:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8003248:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <CANSPI_Transmit+0x120>)
 800324a:	2200      	movs	r2, #0
 800324c:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus(SPI_CAN);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f000 fb9f 	bl	8003994 <MCP2515_ReadStatus>
 8003256:	0003      	movs	r3, r0
 8003258:	001a      	movs	r2, r3
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <CANSPI_Transmit+0x124>)
 800325c:	701a      	strb	r2, [r3, #0]
  
  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 800325e:	4b3a      	ldr	r3, [pc, #232]	; (8003348 <CANSPI_Transmit+0x124>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2204      	movs	r2, #4
 8003264:	4013      	ands	r3, r2
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d11c      	bne.n	80032a6 <CANSPI_Transmit+0x82>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6858      	ldr	r0, [r3, #4]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4a33      	ldr	r2, [pc, #204]	; (8003344 <CANSPI_Transmit+0x120>)
 8003276:	0019      	movs	r1, r3
 8003278:	f000 f973 	bl	8003562 <convertCANid2Reg>
    
    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	7a19      	ldrb	r1, [r3, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	3309      	adds	r3, #9
 8003284:	4a2f      	ldr	r2, [pc, #188]	; (8003344 <CANSPI_Transmit+0x120>)
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	000b      	movs	r3, r1
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	f000 fb31 	bl	80038f4 <MCP2515_LoadTxSequence>
    
    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX0);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2181      	movs	r1, #129	; 0x81
 8003296:	0018      	movs	r0, r3
 8003298:	f000 fb62 	bl	8003960 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800329c:	230f      	movs	r3, #15
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e046      	b.n	8003334 <CANSPI_Transmit+0x110>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <CANSPI_Transmit+0x124>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2210      	movs	r2, #16
 80032ac:	4013      	ands	r3, r2
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11c      	bne.n	80032ee <CANSPI_Transmit+0xca>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6858      	ldr	r0, [r3, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4a21      	ldr	r2, [pc, #132]	; (8003344 <CANSPI_Transmit+0x120>)
 80032be:	0019      	movs	r1, r3
 80032c0:	f000 f94f 	bl	8003562 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	7a19      	ldrb	r1, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	3309      	adds	r3, #9
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <CANSPI_Transmit+0x120>)
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	000b      	movs	r3, r1
 80032d4:	2142      	movs	r1, #66	; 0x42
 80032d6:	f000 fb0d 	bl	80038f4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2182      	movs	r1, #130	; 0x82
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 fb3e 	bl	8003960 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80032e4:	230f      	movs	r3, #15
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e022      	b.n	8003334 <CANSPI_Transmit+0x110>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <CANSPI_Transmit+0x124>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	4013      	ands	r3, r2
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11b      	bne.n	8003334 <CANSPI_Transmit+0x110>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	6858      	ldr	r0, [r3, #4]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4a0f      	ldr	r2, [pc, #60]	; (8003344 <CANSPI_Transmit+0x120>)
 8003306:	0019      	movs	r1, r3
 8003308:	f000 f92b 	bl	8003562 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	7a19      	ldrb	r1, [r3, #8]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	3309      	adds	r3, #9
 8003314:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <CANSPI_Transmit+0x120>)
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	000b      	movs	r3, r1
 800331c:	2144      	movs	r1, #68	; 0x44
 800331e:	f000 fae9 	bl	80038f4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX2);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2184      	movs	r1, #132	; 0x84
 8003326:	0018      	movs	r0, r3
 8003328:	f000 fb1a 	bl	8003960 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800332c:	230f      	movs	r3, #15
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
  }
  
  return (returnValue);
 8003334:	230f      	movs	r3, #15
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	781b      	ldrb	r3, [r3, #0]
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b004      	add	sp, #16
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	200031d0 	.word	0x200031d0
 8003348:	200031cc 	.word	0x200031cc

0800334c <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(SPI_HandleTypeDef *SPI_CAN, uCAN_MSG *tempCanMsg)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint8_t returnValue = 0;
 8003356:	231f      	movs	r3, #31
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus(SPI_CAN);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 fb36 	bl	80039d2 <MCP2515_GetRxStatus>
 8003366:	0003      	movs	r3, r0
 8003368:	001a      	movs	r2, r3
 800336a:	210c      	movs	r1, #12
 800336c:	187b      	adds	r3, r7, r1
 800336e:	701a      	strb	r2, [r3, #0]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8003370:	187b      	adds	r3, r7, r1
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	223f      	movs	r2, #63	; 0x3f
 8003376:	4393      	bics	r3, r2
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d100      	bne.n	8003380 <CANSPI_Receive+0x34>
 800337e:	e07f      	b.n	8003480 <CANSPI_Receive+0x134>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8003380:	210c      	movs	r1, #12
 8003382:	187b      	adds	r3, r7, r1
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	223f      	movs	r2, #63	; 0x3f
 8003388:	4393      	bics	r3, r2
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3b40      	subs	r3, #64	; 0x40
 800338e:	425a      	negs	r2, r3
 8003390:	4153      	adcs	r3, r2
 8003392:	b2da      	uxtb	r2, r3
 8003394:	187b      	adds	r3, r7, r1
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	213f      	movs	r1, #63	; 0x3f
 800339a:	438b      	bics	r3, r1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	3bc0      	subs	r3, #192	; 0xc0
 80033a0:	4259      	negs	r1, r3
 80033a2:	414b      	adcs	r3, r1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	4313      	orrs	r3, r2
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <CANSPI_Receive+0x72>
    {
      MCP2515_ReadRxSequence(SPI_CAN, MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80033ae:	2310      	movs	r3, #16
 80033b0:	18fa      	adds	r2, r7, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	230d      	movs	r3, #13
 80033b6:	2190      	movs	r1, #144	; 0x90
 80033b8:	f000 fa14 	bl	80037e4 <MCP2515_ReadRxSequence>
 80033bc:	e00e      	b.n	80033dc <CANSPI_Receive+0x90>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80033be:	230c      	movs	r3, #12
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	223f      	movs	r2, #63	; 0x3f
 80033c6:	4393      	bics	r3, r2
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d106      	bne.n	80033dc <CANSPI_Receive+0x90>
    {
      MCP2515_ReadRxSequence(SPI_CAN, MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80033ce:	2310      	movs	r3, #16
 80033d0:	18fa      	adds	r2, r7, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	230d      	movs	r3, #13
 80033d6:	2194      	movs	r1, #148	; 0x94
 80033d8:	f000 fa04 	bl	80037e4 <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80033dc:	230c      	movs	r3, #12
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2218      	movs	r2, #24
 80033e4:	4013      	ands	r3, r2
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b10      	cmp	r3, #16
 80033ea:	d111      	bne.n	8003410 <CANSPI_Receive+0xc4>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80033f2:	2410      	movs	r4, #16
 80033f4:	193b      	adds	r3, r7, r4
 80033f6:	7898      	ldrb	r0, [r3, #2]
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	78d9      	ldrb	r1, [r3, #3]
 80033fc:	193b      	adds	r3, r7, r4
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	193b      	adds	r3, r7, r4
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	f000 f843 	bl	800348e <convertReg2ExtendedCANid>
 8003408:	0002      	movs	r2, r0
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	e00e      	b.n	800342e <CANSPI_Receive+0xe2>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8003416:	2110      	movs	r1, #16
 8003418:	187b      	adds	r3, r7, r1
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	187b      	adds	r3, r7, r1
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	0019      	movs	r1, r3
 8003422:	0010      	movs	r0, r2
 8003424:	f000 f87f 	bl	8003526 <convertReg2StandardCANid>
 8003428:	0002      	movs	r2, r0
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800342e:	2110      	movs	r1, #16
 8003430:	187b      	adds	r3, r7, r1
 8003432:	791a      	ldrb	r2, [r3, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8003438:	187b      	adds	r3, r7, r1
 800343a:	795a      	ldrb	r2, [r3, #5]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8003440:	187b      	adds	r3, r7, r1
 8003442:	799a      	ldrb	r2, [r3, #6]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8003448:	187b      	adds	r3, r7, r1
 800344a:	79da      	ldrb	r2, [r3, #7]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8003450:	187b      	adds	r3, r7, r1
 8003452:	7a1a      	ldrb	r2, [r3, #8]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8003458:	187b      	adds	r3, r7, r1
 800345a:	7a5a      	ldrb	r2, [r3, #9]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8003460:	187b      	adds	r3, r7, r1
 8003462:	7a9a      	ldrb	r2, [r3, #10]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8003468:	187b      	adds	r3, r7, r1
 800346a:	7ada      	ldrb	r2, [r3, #11]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8003470:	187b      	adds	r3, r7, r1
 8003472:	7b1a      	ldrb	r2, [r3, #12]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8003478:	231f      	movs	r3, #31
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
  }
  
  return (returnValue);
 8003480:	231f      	movs	r3, #31
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	781b      	ldrb	r3, [r3, #0]
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b009      	add	sp, #36	; 0x24
 800348c:	bd90      	pop	{r4, r7, pc}

0800348e <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800348e:	b5b0      	push	{r4, r5, r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	0005      	movs	r5, r0
 8003496:	000c      	movs	r4, r1
 8003498:	0010      	movs	r0, r2
 800349a:	0019      	movs	r1, r3
 800349c:	1dfb      	adds	r3, r7, #7
 800349e:	1c2a      	adds	r2, r5, #0
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	1dbb      	adds	r3, r7, #6
 80034a4:	1c22      	adds	r2, r4, #0
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	1d7b      	adds	r3, r7, #5
 80034aa:	1c02      	adds	r2, r0, #0
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	1c0a      	adds	r2, r1, #0
 80034b2:	701a      	strb	r2, [r3, #0]
  uint32_t returnValue = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80034bc:	200f      	movs	r0, #15
 80034be:	183b      	adds	r3, r7, r0
 80034c0:	1d3a      	adds	r2, r7, #4
 80034c2:	7812      	ldrb	r2, [r2, #0]
 80034c4:	2103      	movs	r1, #3
 80034c6:	400a      	ands	r2, r1
 80034c8:	701a      	strb	r2, [r3, #0]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80034ca:	210e      	movs	r1, #14
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	1d3a      	adds	r2, r7, #4
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	0952      	lsrs	r2, r2, #5
 80034d4:	701a      	strb	r2, [r3, #0]
  ConvertedID = (tempRXBn_SIDH << 3);
 80034d6:	1d7b      	adds	r3, r7, #5
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80034ee:	183b      	adds	r3, r7, r0
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	18d3      	adds	r3, r2, r3
 80034f6:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80034fe:	1dfb      	adds	r3, r7, #7
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	18d3      	adds	r3, r2, r3
 8003506:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 800350e:	1dbb      	adds	r3, r7, #6
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	18d3      	adds	r3, r2, r3
 8003516:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800351c:	697b      	ldr	r3, [r7, #20]
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b006      	add	sp, #24
 8003524:	bdb0      	pop	{r4, r5, r7, pc}

08003526 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	0002      	movs	r2, r0
 800352e:	1dfb      	adds	r3, r7, #7
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	1dbb      	adds	r3, r7, #6
 8003534:	1c0a      	adds	r2, r1, #0
 8003536:	701a      	strb	r2, [r3, #0]
  uint32_t returnValue = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800353c:	1dfb      	adds	r3, r7, #7
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8003544:	1dbb      	adds	r3, r7, #6
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	b2db      	uxtb	r3, r3
 800354c:	001a      	movs	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	189b      	adds	r3, r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8003558:	68fb      	ldr	r3, [r7, #12]
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bd80      	pop	{r7, pc}

08003562 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	200b      	movs	r0, #11
 800356e:	183b      	adds	r3, r7, r0
 8003570:	1c0a      	adds	r2, r1, #0
 8003572:	701a      	strb	r2, [r3, #0]
  uint8_t wipSIDL = 0;
 8003574:	2317      	movs	r3, #23
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 800357c:	183b      	adds	r3, r7, r0
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d136      	bne.n	80035f2 <convertCANid2Reg+0x90>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	2017      	movs	r0, #23
 80035a6:	183b      	adds	r3, r7, r0
 80035a8:	2103      	movs	r1, #3
 80035aa:	400a      	ands	r2, r1
 80035ac:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 3;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	221f      	movs	r2, #31
 80035ba:	4393      	bics	r3, r2
 80035bc:	b2d9      	uxtb	r1, r3
 80035be:	183b      	adds	r3, r7, r0
 80035c0:	183a      	adds	r2, r7, r0
 80035c2:	7812      	ldrb	r2, [r2, #0]
 80035c4:	188a      	adds	r2, r1, r2
 80035c6:	701a      	strb	r2, [r3, #0]
    wipSIDL = wipSIDL + 0x08;
 80035c8:	183b      	adds	r3, r7, r0
 80035ca:	0001      	movs	r1, r0
 80035cc:	183a      	adds	r2, r7, r0
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	3208      	adds	r2, #8
 80035d2:	701a      	strb	r2, [r3, #0]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2214      	movs	r2, #20
 80035da:	4393      	bics	r3, r2
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80035f0:	e013      	b.n	800361a <convertCANid2Reg+0xb8>
    passedIdReg->tempEID8 = 0;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	015b      	lsls	r3, r3, #5
 8003602:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	701a      	strb	r2, [r3, #0]
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b006      	add	sp, #24
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <MCP2515_CS_HIGH>:
#define SPI_TIMEOUT             10
//#define MCP2515_CS_HIGH()   HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET)
//#define MCP2515_CS_LOW()    HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET)

void MCP2515_CS_HIGH(SPI_HandleTypeDef *SPI_CAN)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	if (SPI_CAN == &hspi1)
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <MCP2515_CS_HIGH+0x38>)
 8003630:	429a      	cmp	r2, r3
 8003632:	d107      	bne.n	8003644 <MCP2515_CS_HIGH+0x20>
		HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_SET);
 8003634:	2390      	movs	r3, #144	; 0x90
 8003636:	05db      	lsls	r3, r3, #23
 8003638:	2201      	movs	r2, #1
 800363a:	2110      	movs	r1, #16
 800363c:	0018      	movs	r0, r3
 800363e:	f003 fc2d 	bl	8006e9c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
}
 8003642:	e006      	b.n	8003652 <MCP2515_CS_HIGH+0x2e>
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	015b      	lsls	r3, r3, #5
 8003648:	4805      	ldr	r0, [pc, #20]	; (8003660 <MCP2515_CS_HIGH+0x3c>)
 800364a:	2201      	movs	r2, #1
 800364c:	0019      	movs	r1, r3
 800364e:	f003 fc25 	bl	8006e9c <HAL_GPIO_WritePin>
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b002      	add	sp, #8
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	20003334 	.word	0x20003334
 8003660:	48000400 	.word	0x48000400

08003664 <MCP2515_CS_LOW>:
void MCP2515_CS_LOW(SPI_HandleTypeDef *SPI_CAN)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	if (SPI_CAN == &hspi1)
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <MCP2515_CS_LOW+0x38>)
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <MCP2515_CS_LOW+0x20>
		HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 8003674:	2390      	movs	r3, #144	; 0x90
 8003676:	05db      	lsls	r3, r3, #23
 8003678:	2200      	movs	r2, #0
 800367a:	2110      	movs	r1, #16
 800367c:	0018      	movs	r0, r3
 800367e:	f003 fc0d 	bl	8006e9c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_RESET);
}
 8003682:	e006      	b.n	8003692 <MCP2515_CS_LOW+0x2e>
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_RESET);
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	015b      	lsls	r3, r3, #5
 8003688:	4805      	ldr	r0, [pc, #20]	; (80036a0 <MCP2515_CS_LOW+0x3c>)
 800368a:	2200      	movs	r2, #0
 800368c:	0019      	movs	r1, r3
 800368e:	f003 fc05 	bl	8006e9c <HAL_GPIO_WritePin>
}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	20003334 	.word	0x20003334
 80036a0:	48000400 	.word	0x48000400

080036a4 <MCP2515_Initialize>:
static uint8_t SPI_Rx(SPI_HandleTypeDef *SPI_CAN);
static void SPI_RxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(SPI_HandleTypeDef *SPI_CAN)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  MCP2515_CS_HIGH(SPI_CAN);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f7ff ffb8 	bl	8003624 <MCP2515_CS_HIGH>
  
  uint8_t loop = 10;
 80036b4:	230f      	movs	r3, #15
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	220a      	movs	r2, #10
 80036ba:	701a      	strb	r2, [r3, #0]
  
  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0018      	movs	r0, r3
 80036c0:	f005 fb1c 	bl	8008cfc <HAL_SPI_GetState>
 80036c4:	0003      	movs	r3, r0
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <MCP2515_Initialize+0x2a>
      return true;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00a      	b.n	80036e4 <MCP2515_Initialize+0x40>
    
    loop--;
 80036ce:	210f      	movs	r1, #15
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	3a01      	subs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
  } while(loop > 0); 
 80036da:	187b      	adds	r3, r7, r1
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ec      	bne.n	80036bc <MCP2515_Initialize+0x18>
      
  return false;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b004      	add	sp, #16
 80036ea:	bd80      	pop	{r7, pc}

080036ec <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(SPI_HandleTypeDef *SPI_CAN)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* CANCTRL Register Configuration 모드 설정 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CANCTRL, 0x80);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	210f      	movs	r1, #15
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 f89b 	bl	8003836 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8003700:	230f      	movs	r3, #15
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	220a      	movs	r2, #10
 8003706:	701a      	strb	r2, [r3, #0]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(SPI_CAN, MCP2515_CANSTAT) & 0xE0) == 0x80)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	210e      	movs	r1, #14
 800370c:	0018      	movs	r0, r3
 800370e:	f000 f840 	bl	8003792 <MCP2515_ReadByte>
 8003712:	0003      	movs	r3, r0
 8003714:	001a      	movs	r2, r3
 8003716:	23e0      	movs	r3, #224	; 0xe0
 8003718:	4013      	ands	r3, r2
 800371a:	2b80      	cmp	r3, #128	; 0x80
 800371c:	d101      	bne.n	8003722 <MCP2515_SetConfigMode+0x36>
      return true;
 800371e:	2301      	movs	r3, #1
 8003720:	e00a      	b.n	8003738 <MCP2515_SetConfigMode+0x4c>
    
    loop--;
 8003722:	210f      	movs	r1, #15
 8003724:	187b      	adds	r3, r7, r1
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	187b      	adds	r3, r7, r1
 800372a:	3a01      	subs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
  } while(loop > 0); 
 800372e:	187b      	adds	r3, r7, r1
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e8      	bne.n	8003708 <MCP2515_SetConfigMode+0x1c>
  
  return false;
 8003736:	2300      	movs	r3, #0
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b004      	add	sp, #16
 800373e:	bd80      	pop	{r7, pc}

08003740 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(SPI_HandleTypeDef *SPI_CAN)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* CANCTRL Register Normal 모드 설정 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CANCTRL, 0x00);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	210f      	movs	r1, #15
 800374e:	0018      	movs	r0, r3
 8003750:	f000 f871 	bl	8003836 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8003754:	230f      	movs	r3, #15
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	220a      	movs	r2, #10
 800375a:	701a      	strb	r2, [r3, #0]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(SPI_CAN, MCP2515_CANSTAT) & 0xE0) == 0x00)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	210e      	movs	r1, #14
 8003760:	0018      	movs	r0, r3
 8003762:	f000 f816 	bl	8003792 <MCP2515_ReadByte>
 8003766:	0003      	movs	r3, r0
 8003768:	001a      	movs	r2, r3
 800376a:	23e0      	movs	r3, #224	; 0xe0
 800376c:	4013      	ands	r3, r2
 800376e:	d101      	bne.n	8003774 <MCP2515_SetNormalMode+0x34>
      return true;
 8003770:	2301      	movs	r3, #1
 8003772:	e00a      	b.n	800378a <MCP2515_SetNormalMode+0x4a>
    
    loop--;
 8003774:	210f      	movs	r1, #15
 8003776:	187b      	adds	r3, r7, r1
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	187b      	adds	r3, r7, r1
 800377c:	3a01      	subs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]
  } while(loop > 0);
 8003780:	187b      	adds	r3, r7, r1
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e9      	bne.n	800375c <MCP2515_SetNormalMode+0x1c>
  
  return false;
 8003788:	2300      	movs	r3, #0
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b004      	add	sp, #16
 8003790:	bd80      	pop	{r7, pc}

08003792 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH(SPI_CAN);
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (SPI_HandleTypeDef *SPI_CAN, uint8_t address)
{
 8003792:	b5b0      	push	{r4, r5, r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	000a      	movs	r2, r1
 800379c:	1cfb      	adds	r3, r7, #3
 800379e:	701a      	strb	r2, [r3, #0]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7ff ff5e 	bl	8003664 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_READ);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2103      	movs	r1, #3
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 f965 	bl	8003a7c <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 80037b2:	1cfb      	adds	r3, r7, #3
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0011      	movs	r1, r2
 80037ba:	0018      	movs	r0, r3
 80037bc:	f000 f95e 	bl	8003a7c <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 80037c0:	250f      	movs	r5, #15
 80037c2:	197c      	adds	r4, r7, r5
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 f97c 	bl	8003ac4 <SPI_Rx>
 80037cc:	0003      	movs	r3, r0
 80037ce:	7023      	strb	r3, [r4, #0]
      
  MCP2515_CS_HIGH(SPI_CAN);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7ff ff26 	bl	8003624 <MCP2515_CS_HIGH>
  
  return retVal;
 80037d8:	197b      	adds	r3, r7, r5
 80037da:	781b      	ldrb	r3, [r3, #0]
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b004      	add	sp, #16
 80037e2:	bdb0      	pop	{r4, r5, r7, pc}

080037e4 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction, uint8_t *data, uint8_t length)
{
 80037e4:	b5b0      	push	{r4, r5, r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	0008      	movs	r0, r1
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	0019      	movs	r1, r3
 80037f2:	240b      	movs	r4, #11
 80037f4:	193b      	adds	r3, r7, r4
 80037f6:	1c02      	adds	r2, r0, #0
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	250a      	movs	r5, #10
 80037fc:	197b      	adds	r3, r7, r5
 80037fe:	1c0a      	adds	r2, r1, #0
 8003800:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	0018      	movs	r0, r3
 8003806:	f7ff ff2d 	bl	8003664 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 800380a:	193b      	adds	r3, r7, r4
 800380c:	781a      	ldrb	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	0011      	movs	r1, r2
 8003812:	0018      	movs	r0, r3
 8003814:	f000 f932 	bl	8003a7c <SPI_Tx>
  SPI_RxBuffer(SPI_CAN, data, length);
 8003818:	197b      	adds	r3, r7, r5
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	0018      	movs	r0, r3
 8003822:	f000 f960 	bl	8003ae6 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH(SPI_CAN);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	0018      	movs	r0, r3
 800382a:	f7ff fefb 	bl	8003624 <MCP2515_CS_HIGH>
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b004      	add	sp, #16
 8003834:	bdb0      	pop	{r4, r5, r7, pc}

08003836 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(SPI_HandleTypeDef *SPI_CAN, uint8_t address, uint8_t data)
{    
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	0008      	movs	r0, r1
 8003840:	0011      	movs	r1, r2
 8003842:	1cfb      	adds	r3, r7, #3
 8003844:	1c02      	adds	r2, r0, #0
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	1cbb      	adds	r3, r7, #2
 800384a:	1c0a      	adds	r2, r1, #0
 800384c:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff ff07 	bl	8003664 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_WRITE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2102      	movs	r1, #2
 800385a:	0018      	movs	r0, r3
 800385c:	f000 f90e 	bl	8003a7c <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 8003860:	1cfb      	adds	r3, r7, #3
 8003862:	781a      	ldrb	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0011      	movs	r1, r2
 8003868:	0018      	movs	r0, r3
 800386a:	f000 f907 	bl	8003a7c <SPI_Tx>
  SPI_Tx(SPI_CAN, data);
 800386e:	1cbb      	adds	r3, r7, #2
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	0011      	movs	r1, r2
 8003876:	0018      	movs	r0, r3
 8003878:	f000 f900 	bl	8003a7c <SPI_Tx>
    
  MCP2515_CS_HIGH(SPI_CAN);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	0018      	movs	r0, r3
 8003880:	f7ff fed0 	bl	8003624 <MCP2515_CS_HIGH>
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}

0800388c <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 800388c:	b5b0      	push	{r4, r5, r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	0008      	movs	r0, r1
 8003896:	0011      	movs	r1, r2
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	240b      	movs	r4, #11
 800389c:	193b      	adds	r3, r7, r4
 800389e:	1c02      	adds	r2, r0, #0
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	250a      	movs	r5, #10
 80038a4:	197b      	adds	r3, r7, r5
 80038a6:	1c0a      	adds	r2, r1, #0
 80038a8:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff fed9 	bl	8003664 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_WRITE);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2102      	movs	r1, #2
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 f8e0 	bl	8003a7c <SPI_Tx>
  SPI_Tx(SPI_CAN, startAddress);
 80038bc:	193b      	adds	r3, r7, r4
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	0011      	movs	r1, r2
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 f8d9 	bl	8003a7c <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, data, (endAddress - startAddress + 1));
 80038ca:	197a      	adds	r2, r7, r5
 80038cc:	193b      	adds	r3, r7, r4
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	3301      	adds	r3, #1
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	0018      	movs	r0, r3
 80038e0:	f000 f8dd 	bl	8003a9e <SPI_TxBuffer>
  
  MCP2515_CS_HIGH(SPI_CAN);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7ff fe9c 	bl	8003624 <MCP2515_CS_HIGH>
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b004      	add	sp, #16
 80038f2:	bdb0      	pop	{r4, r5, r7, pc}

080038f4 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 80038f4:	b5b0      	push	{r4, r5, r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	0008      	movs	r0, r1
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	0019      	movs	r1, r3
 8003902:	250b      	movs	r5, #11
 8003904:	197b      	adds	r3, r7, r5
 8003906:	1c02      	adds	r2, r0, #0
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	240a      	movs	r4, #10
 800390c:	193b      	adds	r3, r7, r4
 800390e:	1c0a      	adds	r2, r1, #0
 8003910:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	0018      	movs	r0, r3
 8003916:	f7ff fea5 	bl	8003664 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 800391a:	197b      	adds	r3, r7, r5
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	0011      	movs	r1, r2
 8003922:	0018      	movs	r0, r3
 8003924:	f000 f8aa 	bl	8003a7c <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, idReg, 4);
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2204      	movs	r2, #4
 800392e:	0018      	movs	r0, r3
 8003930:	f000 f8b5 	bl	8003a9e <SPI_TxBuffer>
  SPI_Tx(SPI_CAN, dlc);
 8003934:	193b      	adds	r3, r7, r4
 8003936:	781a      	ldrb	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	0011      	movs	r1, r2
 800393c:	0018      	movs	r0, r3
 800393e:	f000 f89d 	bl	8003a7c <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, data, dlc);
 8003942:	193b      	adds	r3, r7, r4
 8003944:	781a      	ldrb	r2, [r3, #0]
 8003946:	6a39      	ldr	r1, [r7, #32]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	0018      	movs	r0, r3
 800394c:	f000 f8a7 	bl	8003a9e <SPI_TxBuffer>
       
  MCP2515_CS_HIGH(SPI_CAN);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	0018      	movs	r0, r3
 8003954:	f7ff fe66 	bl	8003624 <MCP2515_CS_HIGH>
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bdb0      	pop	{r4, r5, r7, pc}

08003960 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH(SPI_CAN);
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	000a      	movs	r2, r1
 800396a:	1cfb      	adds	r3, r7, #3
 800396c:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f7ff fe77 	bl	8003664 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 8003976:	1cfb      	adds	r3, r7, #3
 8003978:	781a      	ldrb	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0011      	movs	r1, r2
 800397e:	0018      	movs	r0, r3
 8003980:	f000 f87c 	bl	8003a7c <SPI_Tx>
      
  MCP2515_CS_HIGH(SPI_CAN);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	0018      	movs	r0, r3
 8003988:	f7ff fe4c 	bl	8003624 <MCP2515_CS_HIGH>
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}

08003994 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(SPI_HandleTypeDef *SPI_CAN)
{
 8003994:	b5b0      	push	{r4, r5, r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	0018      	movs	r0, r3
 80039a0:	f7ff fe60 	bl	8003664 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_READ_STATUS);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	21a0      	movs	r1, #160	; 0xa0
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 f867 	bl	8003a7c <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 80039ae:	250f      	movs	r5, #15
 80039b0:	197c      	adds	r4, r7, r5
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f000 f885 	bl	8003ac4 <SPI_Rx>
 80039ba:	0003      	movs	r3, r0
 80039bc:	7023      	strb	r3, [r4, #0]
        
  MCP2515_CS_HIGH(SPI_CAN);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7ff fe2f 	bl	8003624 <MCP2515_CS_HIGH>
  
  return retVal;
 80039c6:	197b      	adds	r3, r7, r5
 80039c8:	781b      	ldrb	r3, [r3, #0]
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b004      	add	sp, #16
 80039d0:	bdb0      	pop	{r4, r5, r7, pc}

080039d2 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(SPI_HandleTypeDef *SPI_CAN)
{
 80039d2:	b5b0      	push	{r4, r5, r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	0018      	movs	r0, r3
 80039de:	f7ff fe41 	bl	8003664 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_RX_STATUS);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	21b0      	movs	r1, #176	; 0xb0
 80039e6:	0018      	movs	r0, r3
 80039e8:	f000 f848 	bl	8003a7c <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 80039ec:	250f      	movs	r5, #15
 80039ee:	197c      	adds	r4, r7, r5
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 f866 	bl	8003ac4 <SPI_Rx>
 80039f8:	0003      	movs	r3, r0
 80039fa:	7023      	strb	r3, [r4, #0]
        
  MCP2515_CS_HIGH(SPI_CAN);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	0018      	movs	r0, r3
 8003a00:	f7ff fe10 	bl	8003624 <MCP2515_CS_HIGH>
  
  return retVal;
 8003a04:	197b      	adds	r3, r7, r5
 8003a06:	781b      	ldrb	r3, [r3, #0]
}
 8003a08:	0018      	movs	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b004      	add	sp, #16
 8003a0e:	bdb0      	pop	{r4, r5, r7, pc}

08003a10 <MCP2515_BitModify>:

/* 레지스터 값 변경 */
void MCP2515_BitModify(SPI_HandleTypeDef *SPI_CAN, uint8_t address, uint8_t mask, uint8_t data)
{    
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	000c      	movs	r4, r1
 8003a1a:	0010      	movs	r0, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	1cfb      	adds	r3, r7, #3
 8003a20:	1c22      	adds	r2, r4, #0
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	1cbb      	adds	r3, r7, #2
 8003a26:	1c02      	adds	r2, r0, #0
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	1c7b      	adds	r3, r7, #1
 8003a2c:	1c0a      	adds	r2, r1, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f7ff fe16 	bl	8003664 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_BIT_MOD);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2105      	movs	r1, #5
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f000 f81d 	bl	8003a7c <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 8003a42:	1cfb      	adds	r3, r7, #3
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0011      	movs	r1, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 f816 	bl	8003a7c <SPI_Tx>
  SPI_Tx(SPI_CAN, mask);
 8003a50:	1cbb      	adds	r3, r7, #2
 8003a52:	781a      	ldrb	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	0011      	movs	r1, r2
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f000 f80f 	bl	8003a7c <SPI_Tx>
  SPI_Tx(SPI_CAN, data);
 8003a5e:	1c7b      	adds	r3, r7, #1
 8003a60:	781a      	ldrb	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0011      	movs	r1, r2
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 f808 	bl	8003a7c <SPI_Tx>
        
  MCP2515_CS_HIGH(SPI_CAN);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7ff fdd8 	bl	8003624 <MCP2515_CS_HIGH>
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b003      	add	sp, #12
 8003a7a:	bd90      	pop	{r4, r7, pc}

08003a7c <SPI_Tx>:

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(SPI_HandleTypeDef *SPI_CAN, uint8_t data)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	000a      	movs	r2, r1
 8003a86:	1cfb      	adds	r3, r7, #3
 8003a88:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8003a8a:	1cf9      	adds	r1, r7, #3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	230a      	movs	r3, #10
 8003a90:	2201      	movs	r2, #1
 8003a92:	f004 fcbb 	bl	800840c <HAL_SPI_Transmit>
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	1dfb      	adds	r3, r7, #7
 8003aaa:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8003aac:	1dfb      	adds	r3, r7, #7
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	230a      	movs	r3, #10
 8003ab8:	f004 fca8 	bl	800840c <HAL_SPI_Transmit>
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(SPI_HandleTypeDef *SPI_CAN)
{
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8003acc:	240f      	movs	r4, #15
 8003ace:	1939      	adds	r1, r7, r4
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	230a      	movs	r3, #10
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f004 fdf1 	bl	80086bc <HAL_SPI_Receive>
  return retVal;
 8003ada:	193b      	adds	r3, r7, r4
 8003adc:	781b      	ldrb	r3, [r3, #0]
}
 8003ade:	0018      	movs	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b005      	add	sp, #20
 8003ae4:	bd90      	pop	{r4, r7, pc}

08003ae6 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	1dfb      	adds	r3, r7, #7
 8003af2:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8003af4:	1dfb      	adds	r3, r7, #7
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	230a      	movs	r3, #10
 8003b00:	f004 fddc 	bl	80086bc <HAL_SPI_Receive>
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b10:	f002 f97e 	bl	8005e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b14:	f000 f8da 	bl	8003ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b18:	f000 fb14 	bl	8004144 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003b1c:	f000 fae2 	bl	80040e4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8003b20:	f000 f93c 	bl	8003d9c <MX_ADC_Init>
  MX_I2C1_Init();
 8003b24:	f000 f9a2 	bl	8003e6c <MX_I2C1_Init>
  MX_SPI1_Init();
 8003b28:	f000 f9e0 	bl	8003eec <MX_SPI1_Init>
  MX_SPI2_Init();
 8003b2c:	f000 fa1c 	bl	8003f68 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003b30:	f000 fa58 	bl	8003fe4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003b34:	4b43      	ldr	r3, [pc, #268]	; (8003c44 <main+0x138>)
 8003b36:	2104      	movs	r1, #4
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f005 fbb3 	bl	80092a4 <HAL_TIM_PWM_Start>
  ssd1306_Init();
 8003b3e:	f001 fc3f 	bl	80053c0 <ssd1306_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003b42:	f007 fd17 	bl	800b574 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uart_tx_sem */
  uart_tx_semHandle = osSemaphoreNew(1, 1, &uart_tx_sem_attributes);
 8003b46:	4b40      	ldr	r3, [pc, #256]	; (8003c48 <main+0x13c>)
 8003b48:	001a      	movs	r2, r3
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f007 fe97 	bl	800b880 <osSemaphoreNew>
 8003b52:	0002      	movs	r2, r0
 8003b54:	4b3d      	ldr	r3, [pc, #244]	; (8003c4c <main+0x140>)
 8003b56:	601a      	str	r2, [r3, #0]

  /* creation of CAN_sem */
  CAN_semHandle = osSemaphoreNew(1, 1, &CAN_sem_attributes);
 8003b58:	4b3d      	ldr	r3, [pc, #244]	; (8003c50 <main+0x144>)
 8003b5a:	001a      	movs	r2, r3
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f007 fe8e 	bl	800b880 <osSemaphoreNew>
 8003b64:	0002      	movs	r2, r0
 8003b66:	4b3b      	ldr	r3, [pc, #236]	; (8003c54 <main+0x148>)
 8003b68:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart_rx_queue */
  uart_rx_queueHandle = osMessageQueueNew (4, sizeof(uint8_t), &uart_rx_queue_attributes);
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <main+0x14c>)
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	2101      	movs	r1, #1
 8003b70:	2004      	movs	r0, #4
 8003b72:	f007 ffd3 	bl	800bb1c <osMessageQueueNew>
 8003b76:	0002      	movs	r2, r0
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <main+0x150>)
 8003b7a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003b7c:	4a38      	ldr	r2, [pc, #224]	; (8003c60 <main+0x154>)
 8003b7e:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <main+0x158>)
 8003b80:	2100      	movs	r1, #0
 8003b82:	0018      	movs	r0, r3
 8003b84:	f007 fd50 	bl	800b628 <osThreadNew>
 8003b88:	0002      	movs	r2, r0
 8003b8a:	4b37      	ldr	r3, [pc, #220]	; (8003c68 <main+0x15c>)
 8003b8c:	601a      	str	r2, [r3, #0]

  /* creation of uart_rx */
  uart_rxHandle = osThreadNew(uart_rx_task, NULL, &uart_rx_attributes);
 8003b8e:	4a37      	ldr	r2, [pc, #220]	; (8003c6c <main+0x160>)
 8003b90:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <main+0x164>)
 8003b92:	2100      	movs	r1, #0
 8003b94:	0018      	movs	r0, r3
 8003b96:	f007 fd47 	bl	800b628 <osThreadNew>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	4b35      	ldr	r3, [pc, #212]	; (8003c74 <main+0x168>)
 8003b9e:	601a      	str	r2, [r3, #0]

  /* creation of adc */
  adcHandle = osThreadNew(adc_task, NULL, &adc_attributes);
 8003ba0:	4a35      	ldr	r2, [pc, #212]	; (8003c78 <main+0x16c>)
 8003ba2:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <main+0x170>)
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f007 fd3e 	bl	800b628 <osThreadNew>
 8003bac:	0002      	movs	r2, r0
 8003bae:	4b34      	ldr	r3, [pc, #208]	; (8003c80 <main+0x174>)
 8003bb0:	601a      	str	r2, [r3, #0]

  /* creation of stepper */
  stepperHandle = osThreadNew(stepper_task, NULL, &stepper_attributes);
 8003bb2:	4a34      	ldr	r2, [pc, #208]	; (8003c84 <main+0x178>)
 8003bb4:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <main+0x17c>)
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f007 fd35 	bl	800b628 <osThreadNew>
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <main+0x180>)
 8003bc2:	601a      	str	r2, [r3, #0]

  /* creation of servo */
  servoHandle = osThreadNew(servo_Task, NULL, &servo_attributes);
 8003bc4:	4a32      	ldr	r2, [pc, #200]	; (8003c90 <main+0x184>)
 8003bc6:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <main+0x188>)
 8003bc8:	2100      	movs	r1, #0
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f007 fd2c 	bl	800b628 <osThreadNew>
 8003bd0:	0002      	movs	r2, r0
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <main+0x18c>)
 8003bd4:	601a      	str	r2, [r3, #0]

  /* creation of enviar_estado */
  enviar_estadoHandle = osThreadNew(enviar_estado_Task, NULL, &enviar_estado_attributes);
 8003bd6:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <main+0x190>)
 8003bd8:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <main+0x194>)
 8003bda:	2100      	movs	r1, #0
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f007 fd23 	bl	800b628 <osThreadNew>
 8003be2:	0002      	movs	r2, r0
 8003be4:	4b2f      	ldr	r3, [pc, #188]	; (8003ca4 <main+0x198>)
 8003be6:	601a      	str	r2, [r3, #0]

  /* creation of enviar_tmp */
  enviar_tmpHandle = osThreadNew(enviar_tmp_task, NULL, &enviar_tmp_attributes);
 8003be8:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <main+0x19c>)
 8003bea:	4b30      	ldr	r3, [pc, #192]	; (8003cac <main+0x1a0>)
 8003bec:	2100      	movs	r1, #0
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f007 fd1a 	bl	800b628 <osThreadNew>
 8003bf4:	0002      	movs	r2, r0
 8003bf6:	4b2e      	ldr	r3, [pc, #184]	; (8003cb0 <main+0x1a4>)
 8003bf8:	601a      	str	r2, [r3, #0]

  /* creation of oled */
  oledHandle = osThreadNew(oled_Task, NULL, &oled_attributes);
 8003bfa:	4a2e      	ldr	r2, [pc, #184]	; (8003cb4 <main+0x1a8>)
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <main+0x1ac>)
 8003bfe:	2100      	movs	r1, #0
 8003c00:	0018      	movs	r0, r3
 8003c02:	f007 fd11 	bl	800b628 <osThreadNew>
 8003c06:	0002      	movs	r2, r0
 8003c08:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <main+0x1b0>)
 8003c0a:	601a      	str	r2, [r3, #0]

  /* creation of CAN_remote */
  CAN_remoteHandle = osThreadNew(CAN_remote_task, NULL, &CAN_remote_attributes);
 8003c0c:	4a2c      	ldr	r2, [pc, #176]	; (8003cc0 <main+0x1b4>)
 8003c0e:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <main+0x1b8>)
 8003c10:	2100      	movs	r1, #0
 8003c12:	0018      	movs	r0, r3
 8003c14:	f007 fd08 	bl	800b628 <osThreadNew>
 8003c18:	0002      	movs	r2, r0
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <main+0x1bc>)
 8003c1c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	osThreadSuspend(enviar_tmpHandle);
 8003c1e:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <main+0x1a4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f007 fda8 	bl	800b778 <osThreadSuspend>
	osThreadSuspend(stepperHandle);
 8003c28:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <main+0x180>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f007 fda3 	bl	800b778 <osThreadSuspend>
	osThreadSuspend(oledHandle);
 8003c32:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <main+0x1b0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	0018      	movs	r0, r3
 8003c38:	f007 fd9e 	bl	800b778 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003c3c:	f007 fcc6 	bl	800b5cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c40:	e7fe      	b.n	8003c40 <main+0x134>
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	2000329c 	.word	0x2000329c
 8003c48:	0800f5ec 	.word	0x0800f5ec
 8003c4c:	200032ec 	.word	0x200032ec
 8003c50:	0800f5fc 	.word	0x0800f5fc
 8003c54:	200032e4 	.word	0x200032e4
 8003c58:	0800f5d4 	.word	0x0800f5d4
 8003c5c:	20003290 	.word	0x20003290
 8003c60:	0800f490 	.word	0x0800f490
 8003c64:	0800435d 	.word	0x0800435d
 8003c68:	200031d8 	.word	0x200031d8
 8003c6c:	0800f4b4 	.word	0x0800f4b4
 8003c70:	08004381 	.word	0x08004381
 8003c74:	20003330 	.word	0x20003330
 8003c78:	0800f4d8 	.word	0x0800f4d8
 8003c7c:	08004689 	.word	0x08004689
 8003c80:	200032f8 	.word	0x200032f8
 8003c84:	0800f4fc 	.word	0x0800f4fc
 8003c88:	0800479d 	.word	0x0800479d
 8003c8c:	200031d4 	.word	0x200031d4
 8003c90:	0800f520 	.word	0x0800f520
 8003c94:	080048f9 	.word	0x080048f9
 8003c98:	200032e8 	.word	0x200032e8
 8003c9c:	0800f544 	.word	0x0800f544
 8003ca0:	08004b19 	.word	0x08004b19
 8003ca4:	20003398 	.word	0x20003398
 8003ca8:	0800f568 	.word	0x0800f568
 8003cac:	08004d29 	.word	0x08004d29
 8003cb0:	2000347c 	.word	0x2000347c
 8003cb4:	0800f58c 	.word	0x0800f58c
 8003cb8:	08004dc1 	.word	0x08004dc1
 8003cbc:	20003420 	.word	0x20003420
 8003cc0:	0800f5b0 	.word	0x0800f5b0
 8003cc4:	08004f6d 	.word	0x08004f6d
 8003cc8:	20003320 	.word	0x20003320

08003ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b097      	sub	sp, #92	; 0x5c
 8003cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cd2:	2428      	movs	r4, #40	; 0x28
 8003cd4:	193b      	adds	r3, r7, r4
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	2330      	movs	r3, #48	; 0x30
 8003cda:	001a      	movs	r2, r3
 8003cdc:	2100      	movs	r1, #0
 8003cde:	f00a fe33 	bl	800e948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ce2:	2318      	movs	r3, #24
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	2310      	movs	r3, #16
 8003cea:	001a      	movs	r2, r3
 8003cec:	2100      	movs	r1, #0
 8003cee:	f00a fe2b 	bl	800e948 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	2314      	movs	r3, #20
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	f00a fe24 	bl	800e948 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003d00:	0021      	movs	r1, r4
 8003d02:	187b      	adds	r3, r7, r1
 8003d04:	2212      	movs	r2, #18
 8003d06:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	2201      	movs	r2, #1
 8003d12:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d14:	187b      	adds	r3, r7, r1
 8003d16:	2210      	movs	r2, #16
 8003d18:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	2202      	movs	r2, #2
 8003d24:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	2280      	movs	r2, #128	; 0x80
 8003d2a:	0212      	lsls	r2, r2, #8
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003d2e:	187b      	adds	r3, r7, r1
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	0352      	lsls	r2, r2, #13
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003d36:	187b      	adds	r3, r7, r1
 8003d38:	2200      	movs	r2, #0
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d3c:	187b      	adds	r3, r7, r1
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f003 fd32 	bl	80077a8 <HAL_RCC_OscConfig>
 8003d44:	1e03      	subs	r3, r0, #0
 8003d46:	d001      	beq.n	8003d4c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003d48:	f001 fafc 	bl	8005344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d4c:	2118      	movs	r1, #24
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	2202      	movs	r2, #2
 8003d58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003d66:	187b      	adds	r3, r7, r1
 8003d68:	2101      	movs	r1, #1
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f004 f83a 	bl	8007de4 <HAL_RCC_ClockConfig>
 8003d70:	1e03      	subs	r3, r0, #0
 8003d72:	d001      	beq.n	8003d78 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003d74:	f001 fae6 	bl	8005344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	2200      	movs	r2, #0
 8003d82:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	0018      	movs	r0, r3
 8003d88:	f004 f9aa 	bl	80080e0 <HAL_RCCEx_PeriphCLKConfig>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003d90:	f001 fad8 	bl	8005344 <Error_Handler>
  }
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b017      	add	sp, #92	; 0x5c
 8003d9a:	bd90      	pop	{r4, r7, pc}

08003d9c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	0018      	movs	r0, r3
 8003da6:	230c      	movs	r3, #12
 8003da8:	001a      	movs	r2, r3
 8003daa:	2100      	movs	r1, #0
 8003dac:	f00a fdcc 	bl	800e948 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003db0:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003db2:	4a2d      	ldr	r2, [pc, #180]	; (8003e68 <MX_ADC_Init+0xcc>)
 8003db4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003db6:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003dbc:	4b29      	ldr	r3, [pc, #164]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003dc2:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003dce:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003dd4:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003dda:	4b22      	ldr	r3, [pc, #136]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003de0:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003de6:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003dee:	22c2      	movs	r2, #194	; 0xc2
 8003df0:	32ff      	adds	r2, #255	; 0xff
 8003df2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003dfc:	2224      	movs	r2, #36	; 0x24
 8003dfe:	2100      	movs	r1, #0
 8003e00:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003e02:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003e08:	4b16      	ldr	r3, [pc, #88]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f002 f852 	bl	8005eb4 <HAL_ADC_Init>
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d001      	beq.n	8003e18 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003e14:	f001 fa96 	bl	8005344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003e18:	1d3b      	adds	r3, r7, #4
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	2280      	movs	r2, #128	; 0x80
 8003e22:	0152      	lsls	r2, r2, #5
 8003e24:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	2204      	movs	r2, #4
 8003e2a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e2c:	1d3a      	adds	r2, r7, #4
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003e30:	0011      	movs	r1, r2
 8003e32:	0018      	movs	r0, r3
 8003e34:	f002 fab6 	bl	80063a4 <HAL_ADC_ConfigChannel>
 8003e38:	1e03      	subs	r3, r0, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8003e3c:	f001 fa82 	bl	8005344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003e46:	1d3a      	adds	r2, r7, #4
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <MX_ADC_Init+0xc8>)
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f002 faa9 	bl	80063a4 <HAL_ADC_ConfigChannel>
 8003e52:	1e03      	subs	r3, r0, #0
 8003e54:	d001      	beq.n	8003e5a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8003e56:	f001 fa75 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	20003438 	.word	0x20003438
 8003e68:	40012400 	.word	0x40012400

08003e6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003e72:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <MX_I2C1_Init+0x78>)
 8003e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003e78:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <MX_I2C1_Init+0x7c>)
 8003e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003e7c:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e88:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003e8e:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e94:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e9a:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f003 f831 	bl	8006f10 <HAL_I2C_Init>
 8003eae:	1e03      	subs	r3, r0, #0
 8003eb0:	d001      	beq.n	8003eb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003eb2:	f001 fa47 	bl	8005344 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003eb8:	2100      	movs	r1, #0
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f003 fbdc 	bl	8007678 <HAL_I2CEx_ConfigAnalogFilter>
 8003ec0:	1e03      	subs	r3, r0, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ec4:	f001 fa3e 	bl	8005344 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <MX_I2C1_Init+0x74>)
 8003eca:	2100      	movs	r1, #0
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f003 fc1f 	bl	8007710 <HAL_I2CEx_ConfigDigitalFilter>
 8003ed2:	1e03      	subs	r3, r0, #0
 8003ed4:	d001      	beq.n	8003eda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003ed6:	f001 fa35 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20003240 	.word	0x20003240
 8003ee4:	40005400 	.word	0x40005400
 8003ee8:	2000090e 	.word	0x2000090e

08003eec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003ef2:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <MX_SPI1_Init+0x78>)
 8003ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ef6:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003ef8:	2282      	movs	r2, #130	; 0x82
 8003efa:	0052      	lsls	r2, r2, #1
 8003efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003efe:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f04:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f06:	22e0      	movs	r2, #224	; 0xe0
 8003f08:	00d2      	lsls	r2, r2, #3
 8003f0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f0c:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	0092      	lsls	r2, r2, #2
 8003f1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f22:	2220      	movs	r2, #32
 8003f24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f26:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f3a:	2207      	movs	r2, #7
 8003f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <MX_SPI1_Init+0x74>)
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f004 f9a5 	bl	800829c <HAL_SPI_Init>
 8003f52:	1e03      	subs	r3, r0, #0
 8003f54:	d001      	beq.n	8003f5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003f56:	f001 f9f5 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20003334 	.word	0x20003334
 8003f64:	40013000 	.word	0x40013000

08003f68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <MX_SPI2_Init+0x78>)
 8003f70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003f74:	2282      	movs	r2, #130	; 0x82
 8003f76:	0052      	lsls	r2, r2, #1
 8003f78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f80:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003f82:	22e0      	movs	r2, #224	; 0xe0
 8003f84:	00d2      	lsls	r2, r2, #3
 8003f86:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f88:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	0092      	lsls	r2, r2, #2
 8003f9a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <MX_SPI2_Init+0x74>)
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f004 f967 	bl	800829c <HAL_SPI_Init>
 8003fce:	1e03      	subs	r3, r0, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003fd2:	f001 f9b7 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	200031dc 	.word	0x200031dc
 8003fe0:	40003800 	.word	0x40003800

08003fe4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08e      	sub	sp, #56	; 0x38
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fea:	2328      	movs	r3, #40	; 0x28
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	0018      	movs	r0, r3
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	001a      	movs	r2, r3
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	f00a fca7 	bl	800e948 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ffa:	2320      	movs	r3, #32
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	0018      	movs	r0, r3
 8004000:	2308      	movs	r3, #8
 8004002:	001a      	movs	r2, r3
 8004004:	2100      	movs	r1, #0
 8004006:	f00a fc9f 	bl	800e948 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	0018      	movs	r0, r3
 800400e:	231c      	movs	r3, #28
 8004010:	001a      	movs	r2, r3
 8004012:	2100      	movs	r1, #0
 8004014:	f00a fc98 	bl	800e948 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004018:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <MX_TIM3_Init+0xf4>)
 800401a:	4a30      	ldr	r2, [pc, #192]	; (80040dc <MX_TIM3_Init+0xf8>)
 800401c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 800401e:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <MX_TIM3_Init+0xf4>)
 8004020:	222f      	movs	r2, #47	; 0x2f
 8004022:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004024:	4b2c      	ldr	r3, [pc, #176]	; (80040d8 <MX_TIM3_Init+0xf4>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800402a:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <MX_TIM3_Init+0xf4>)
 800402c:	4a2c      	ldr	r2, [pc, #176]	; (80040e0 <MX_TIM3_Init+0xfc>)
 800402e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004030:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <MX_TIM3_Init+0xf4>)
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004036:	4b28      	ldr	r3, [pc, #160]	; (80040d8 <MX_TIM3_Init+0xf4>)
 8004038:	2200      	movs	r2, #0
 800403a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800403c:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <MX_TIM3_Init+0xf4>)
 800403e:	0018      	movs	r0, r3
 8004040:	f005 f83c 	bl	80090bc <HAL_TIM_Base_Init>
 8004044:	1e03      	subs	r3, r0, #0
 8004046:	d001      	beq.n	800404c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004048:	f001 f97c 	bl	8005344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800404c:	2128      	movs	r1, #40	; 0x28
 800404e:	187b      	adds	r3, r7, r1
 8004050:	2280      	movs	r2, #128	; 0x80
 8004052:	0152      	lsls	r2, r2, #5
 8004054:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004056:	187a      	adds	r2, r7, r1
 8004058:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <MX_TIM3_Init+0xf4>)
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f005 fba5 	bl	80097ac <HAL_TIM_ConfigClockSource>
 8004062:	1e03      	subs	r3, r0, #0
 8004064:	d001      	beq.n	800406a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8004066:	f001 f96d 	bl	8005344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <MX_TIM3_Init+0xf4>)
 800406c:	0018      	movs	r0, r3
 800406e:	f005 f8c1 	bl	80091f4 <HAL_TIM_PWM_Init>
 8004072:	1e03      	subs	r3, r0, #0
 8004074:	d001      	beq.n	800407a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004076:	f001 f965 	bl	8005344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800407a:	2120      	movs	r1, #32
 800407c:	187b      	adds	r3, r7, r1
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004082:	187b      	adds	r3, r7, r1
 8004084:	2200      	movs	r2, #0
 8004086:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004088:	187a      	adds	r2, r7, r1
 800408a:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <MX_TIM3_Init+0xf4>)
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f005 ffa6 	bl	8009fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d001      	beq.n	800409c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004098:	f001 f954 	bl	8005344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800409c:	1d3b      	adds	r3, r7, #4
 800409e:	2260      	movs	r2, #96	; 0x60
 80040a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	2200      	movs	r2, #0
 80040a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040b4:	1d39      	adds	r1, r7, #4
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <MX_TIM3_Init+0xf4>)
 80040b8:	2204      	movs	r2, #4
 80040ba:	0018      	movs	r0, r3
 80040bc:	f005 faba 	bl	8009634 <HAL_TIM_PWM_ConfigChannel>
 80040c0:	1e03      	subs	r3, r0, #0
 80040c2:	d001      	beq.n	80040c8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80040c4:	f001 f93e 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <MX_TIM3_Init+0xf4>)
 80040ca:	0018      	movs	r0, r3
 80040cc:	f001 fd18 	bl	8005b00 <HAL_TIM_MspPostInit>

}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b00e      	add	sp, #56	; 0x38
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	2000329c 	.word	0x2000329c
 80040dc:	40000400 	.word	0x40000400
 80040e0:	00004e1f 	.word	0x00004e1f

080040e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040e8:	4b14      	ldr	r3, [pc, #80]	; (800413c <MX_USART2_UART_Init+0x58>)
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <MX_USART2_UART_Init+0x5c>)
 80040ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80040ee:	4b13      	ldr	r3, [pc, #76]	; (800413c <MX_USART2_UART_Init+0x58>)
 80040f0:	2296      	movs	r2, #150	; 0x96
 80040f2:	0212      	lsls	r2, r2, #8
 80040f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <MX_USART2_UART_Init+0x58>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040fc:	4b0f      	ldr	r3, [pc, #60]	; (800413c <MX_USART2_UART_Init+0x58>)
 80040fe:	2200      	movs	r2, #0
 8004100:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <MX_USART2_UART_Init+0x58>)
 8004104:	2200      	movs	r2, #0
 8004106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <MX_USART2_UART_Init+0x58>)
 800410a:	220c      	movs	r2, #12
 800410c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <MX_USART2_UART_Init+0x58>)
 8004110:	2200      	movs	r2, #0
 8004112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <MX_USART2_UART_Init+0x58>)
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <MX_USART2_UART_Init+0x58>)
 800411c:	2200      	movs	r2, #0
 800411e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <MX_USART2_UART_Init+0x58>)
 8004122:	2200      	movs	r2, #0
 8004124:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <MX_USART2_UART_Init+0x58>)
 8004128:	0018      	movs	r0, r3
 800412a:	f005 ffc1 	bl	800a0b0 <HAL_UART_Init>
 800412e:	1e03      	subs	r3, r0, #0
 8004130:	d001      	beq.n	8004136 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004132:	f001 f907 	bl	8005344 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	2000339c 	.word	0x2000339c
 8004140:	40004400 	.word	0x40004400

08004144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b08b      	sub	sp, #44	; 0x2c
 8004148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414a:	2414      	movs	r4, #20
 800414c:	193b      	adds	r3, r7, r4
 800414e:	0018      	movs	r0, r3
 8004150:	2314      	movs	r3, #20
 8004152:	001a      	movs	r2, r3
 8004154:	2100      	movs	r1, #0
 8004156:	f00a fbf7 	bl	800e948 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800415a:	4b58      	ldr	r3, [pc, #352]	; (80042bc <MX_GPIO_Init+0x178>)
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	4b57      	ldr	r3, [pc, #348]	; (80042bc <MX_GPIO_Init+0x178>)
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	0309      	lsls	r1, r1, #12
 8004164:	430a      	orrs	r2, r1
 8004166:	615a      	str	r2, [r3, #20]
 8004168:	4b54      	ldr	r3, [pc, #336]	; (80042bc <MX_GPIO_Init+0x178>)
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	031b      	lsls	r3, r3, #12
 8004170:	4013      	ands	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004176:	4b51      	ldr	r3, [pc, #324]	; (80042bc <MX_GPIO_Init+0x178>)
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	4b50      	ldr	r3, [pc, #320]	; (80042bc <MX_GPIO_Init+0x178>)
 800417c:	2180      	movs	r1, #128	; 0x80
 800417e:	03c9      	lsls	r1, r1, #15
 8004180:	430a      	orrs	r2, r1
 8004182:	615a      	str	r2, [r3, #20]
 8004184:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <MX_GPIO_Init+0x178>)
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	03db      	lsls	r3, r3, #15
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004192:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <MX_GPIO_Init+0x178>)
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	4b49      	ldr	r3, [pc, #292]	; (80042bc <MX_GPIO_Init+0x178>)
 8004198:	2180      	movs	r1, #128	; 0x80
 800419a:	0289      	lsls	r1, r1, #10
 800419c:	430a      	orrs	r2, r1
 800419e:	615a      	str	r2, [r3, #20]
 80041a0:	4b46      	ldr	r3, [pc, #280]	; (80042bc <MX_GPIO_Init+0x178>)
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	029b      	lsls	r3, r3, #10
 80041a8:	4013      	ands	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ae:	4b43      	ldr	r3, [pc, #268]	; (80042bc <MX_GPIO_Init+0x178>)
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	4b42      	ldr	r3, [pc, #264]	; (80042bc <MX_GPIO_Init+0x178>)
 80041b4:	2180      	movs	r1, #128	; 0x80
 80041b6:	02c9      	lsls	r1, r1, #11
 80041b8:	430a      	orrs	r2, r1
 80041ba:	615a      	str	r2, [r3, #20]
 80041bc:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <MX_GPIO_Init+0x178>)
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	02db      	lsls	r3, r3, #11
 80041c4:	4013      	ands	r3, r2
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80041ca:	2390      	movs	r3, #144	; 0x90
 80041cc:	05db      	lsls	r3, r3, #23
 80041ce:	2200      	movs	r2, #0
 80041d0:	2110      	movs	r1, #16
 80041d2:	0018      	movs	r0, r3
 80041d4:	f002 fe62 	bl	8006e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, steper_in_4_Pin|CAN2_CS_Pin|steper_in_1_Pin|steper_in_3_Pin
 80041d8:	4939      	ldr	r1, [pc, #228]	; (80042c0 <MX_GPIO_Init+0x17c>)
 80041da:	4b3a      	ldr	r3, [pc, #232]	; (80042c4 <MX_GPIO_Init+0x180>)
 80041dc:	2200      	movs	r2, #0
 80041de:	0018      	movs	r0, r3
 80041e0:	f002 fe5c 	bl	8006e9c <HAL_GPIO_WritePin>
                          |steper_in_2_Pin|CAN1_CSB6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80041e4:	193b      	adds	r3, r7, r4
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	0192      	lsls	r2, r2, #6
 80041ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	2284      	movs	r2, #132	; 0x84
 80041f0:	0392      	lsls	r2, r2, #14
 80041f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	193b      	adds	r3, r7, r4
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80041fa:	193b      	adds	r3, r7, r4
 80041fc:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <MX_GPIO_Init+0x184>)
 80041fe:	0019      	movs	r1, r3
 8004200:	0010      	movs	r0, r2
 8004202:	f002 fcdb 	bl	8006bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_CS_Pin */
  GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8004206:	0021      	movs	r1, r4
 8004208:	187b      	adds	r3, r7, r1
 800420a:	2210      	movs	r2, #16
 800420c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800420e:	187b      	adds	r3, r7, r1
 8004210:	2201      	movs	r2, #1
 8004212:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004214:	187b      	adds	r3, r7, r1
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421a:	187b      	adds	r3, r7, r1
 800421c:	2200      	movs	r2, #0
 800421e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 8004220:	000c      	movs	r4, r1
 8004222:	187a      	adds	r2, r7, r1
 8004224:	2390      	movs	r3, #144	; 0x90
 8004226:	05db      	lsls	r3, r3, #23
 8004228:	0011      	movs	r1, r2
 800422a:	0018      	movs	r0, r3
 800422c:	f002 fcc6 	bl	8006bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Ican2_Pin */
  GPIO_InitStruct.Pin = Ican2_Pin;
 8004230:	0021      	movs	r1, r4
 8004232:	187b      	adds	r3, r7, r1
 8004234:	2210      	movs	r2, #16
 8004236:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004238:	187b      	adds	r3, r7, r1
 800423a:	2288      	movs	r2, #136	; 0x88
 800423c:	0352      	lsls	r2, r2, #13
 800423e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004240:	187b      	adds	r3, r7, r1
 8004242:	2202      	movs	r2, #2
 8004244:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Ican2_GPIO_Port, &GPIO_InitStruct);
 8004246:	000c      	movs	r4, r1
 8004248:	187b      	adds	r3, r7, r1
 800424a:	4a1f      	ldr	r2, [pc, #124]	; (80042c8 <MX_GPIO_Init+0x184>)
 800424c:	0019      	movs	r1, r3
 800424e:	0010      	movs	r0, r2
 8004250:	f002 fcb4 	bl	8006bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : steper_in_4_Pin CAN2_CS_Pin steper_in_1_Pin steper_in_3_Pin
                           steper_in_2_Pin CAN1_CSB6_Pin */
  GPIO_InitStruct.Pin = steper_in_4_Pin|CAN2_CS_Pin|steper_in_1_Pin|steper_in_3_Pin
 8004254:	0021      	movs	r1, r4
 8004256:	187b      	adds	r3, r7, r1
 8004258:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <MX_GPIO_Init+0x17c>)
 800425a:	601a      	str	r2, [r3, #0]
                          |steper_in_2_Pin|CAN1_CSB6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800425c:	187b      	adds	r3, r7, r1
 800425e:	2201      	movs	r2, #1
 8004260:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004262:	187b      	adds	r3, r7, r1
 8004264:	2200      	movs	r2, #0
 8004266:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004268:	187b      	adds	r3, r7, r1
 800426a:	2200      	movs	r2, #0
 800426c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800426e:	000c      	movs	r4, r1
 8004270:	187b      	adds	r3, r7, r1
 8004272:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <MX_GPIO_Init+0x180>)
 8004274:	0019      	movs	r1, r3
 8004276:	0010      	movs	r0, r2
 8004278:	f002 fca0 	bl	8006bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Ican1_Pin */
  GPIO_InitStruct.Pin = Ican1_Pin;
 800427c:	0021      	movs	r1, r4
 800427e:	187b      	adds	r3, r7, r1
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	00d2      	lsls	r2, r2, #3
 8004284:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004286:	187b      	adds	r3, r7, r1
 8004288:	2288      	movs	r2, #136	; 0x88
 800428a:	0352      	lsls	r2, r2, #13
 800428c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800428e:	187b      	adds	r3, r7, r1
 8004290:	2202      	movs	r2, #2
 8004292:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Ican1_GPIO_Port, &GPIO_InitStruct);
 8004294:	187a      	adds	r2, r7, r1
 8004296:	2390      	movs	r3, #144	; 0x90
 8004298:	05db      	lsls	r3, r3, #23
 800429a:	0011      	movs	r1, r2
 800429c:	0018      	movs	r0, r3
 800429e:	f002 fc8d 	bl	8006bbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2103      	movs	r1, #3
 80042a6:	2007      	movs	r0, #7
 80042a8:	f002 fbe4 	bl	8006a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80042ac:	2007      	movs	r0, #7
 80042ae:	f002 fbf6 	bl	8006a9e <HAL_NVIC_EnableIRQ>

}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b00b      	add	sp, #44	; 0x2c
 80042b8:	bd90      	pop	{r4, r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	40021000 	.word	0x40021000
 80042c0:	00001478 	.word	0x00001478
 80042c4:	48000400 	.word	0x48000400
 80042c8:	48000800 	.word	0x48000800

080042cc <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(uart_tx_semHandle);
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <HAL_UART_TxCpltCallback+0x1c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	0018      	movs	r0, r3
 80042da:	f007 fbd1 	bl	800ba80 <osSemaphoreRelease>
}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	200032ec 	.word	0x200032ec

080042ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	osMessageQueuePut(uart_rx_queueHandle, &rx_data, 0U, 0U);
 80042f4:	4b08      	ldr	r3, [pc, #32]	; (8004318 <HAL_UART_RxCpltCallback+0x2c>)
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	4908      	ldr	r1, [pc, #32]	; (800431c <HAL_UART_RxCpltCallback+0x30>)
 80042fa:	2300      	movs	r3, #0
 80042fc:	2200      	movs	r2, #0
 80042fe:	f007 fc95 	bl	800bc2c <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));
 8004302:	4906      	ldr	r1, [pc, #24]	; (800431c <HAL_UART_RxCpltCallback+0x30>)
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_UART_RxCpltCallback+0x34>)
 8004306:	2201      	movs	r2, #1
 8004308:	0018      	movs	r0, r3
 800430a:	f005 ffa3 	bl	800a254 <HAL_UART_Receive_IT>
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	46bd      	mov	sp, r7
 8004312:	b002      	add	sp, #8
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	20003290 	.word	0x20003290
 800431c:	20003324 	.word	0x20003324
 8004320:	2000339c 	.word	0x2000339c

08004324 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	0002      	movs	r2, r0
 800432c:	1dbb      	adds	r3, r7, #6
 800432e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == Ican1_Pin || GPIO_Pin==Ican2_Pin) {
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	881a      	ldrh	r2, [r3, #0]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	429a      	cmp	r2, r3
 800433a:	d003      	beq.n	8004344 <HAL_GPIO_EXTI_Callback+0x20>
 800433c:	1dbb      	adds	r3, r7, #6
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	2b10      	cmp	r3, #16
 8004342:	d104      	bne.n	800434e <HAL_GPIO_EXTI_Callback+0x2a>
		osSemaphoreRelease(CAN_semHandle);
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <HAL_GPIO_EXTI_Callback+0x34>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0018      	movs	r0, r3
 800434a:	f007 fb99 	bl	800ba80 <osSemaphoreRelease>
	}
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b002      	add	sp, #8
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	200032e4 	.word	0x200032e4

0800435c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	osThreadSuspend(defaultTaskHandle);
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <StartDefaultTask+0x20>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0018      	movs	r0, r3
 800436a:	f007 fa05 	bl	800b778 <osThreadSuspend>
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
	  osDelay(2000);
 800436e:	23fa      	movs	r3, #250	; 0xfa
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	0018      	movs	r0, r3
 8004374:	f007 fa5c 	bl	800b830 <osDelay>
 8004378:	e7f9      	b.n	800436e <StartDefaultTask+0x12>
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	200031d8 	.word	0x200031d8

08004380 <uart_rx_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_rx_task */
void uart_rx_task(void *argument)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_rx_task */
	HAL_UART_Receive_IT(&huart2, &data_uart_rx, 1);
 8004388:	49a5      	ldr	r1, [pc, #660]	; (8004620 <uart_rx_task+0x2a0>)
 800438a:	4ba6      	ldr	r3, [pc, #664]	; (8004624 <uart_rx_task+0x2a4>)
 800438c:	2201      	movs	r2, #1
 800438e:	0018      	movs	r0, r3
 8004390:	f005 ff60 	bl	800a254 <HAL_UART_Receive_IT>
		uint8_t trama[4], seg, vel[3];
		float veltotal;

		osThreadSuspend(servoHandle);
 8004394:	4ba4      	ldr	r3, [pc, #656]	; (8004628 <uart_rx_task+0x2a8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0018      	movs	r0, r3
 800439a:	f007 f9ed 	bl	800b778 <osThreadSuspend>
		osThreadSuspend(stepperHandle);
 800439e:	4ba3      	ldr	r3, [pc, #652]	; (800462c <uart_rx_task+0x2ac>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f007 f9e8 	bl	800b778 <osThreadSuspend>
		osThreadSuspend(oledHandle);
 80043a8:	4ba1      	ldr	r3, [pc, #644]	; (8004630 <uart_rx_task+0x2b0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f007 f9e3 	bl	800b778 <osThreadSuspend>
		osThreadSuspend(enviar_tmpHandle);
 80043b2:	4ba0      	ldr	r3, [pc, #640]	; (8004634 <uart_rx_task+0x2b4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	0018      	movs	r0, r3
 80043b8:	f007 f9de 	bl	800b778 <osThreadSuspend>
		osThreadSuspend(CAN_remoteHandle);
 80043bc:	4b9e      	ldr	r3, [pc, #632]	; (8004638 <uart_rx_task+0x2b8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0018      	movs	r0, r3
 80043c2:	f007 f9d9 	bl	800b778 <osThreadSuspend>

		  for(;;)
		  {
			  osMessageQueueGet(uart_rx_queueHandle, &trama[0], 0, osWaitForever);
 80043c6:	4b9d      	ldr	r3, [pc, #628]	; (800463c <uart_rx_task+0x2bc>)
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	2301      	movs	r3, #1
 80043cc:	425b      	negs	r3, r3
 80043ce:	240c      	movs	r4, #12
 80043d0:	1939      	adds	r1, r7, r4
 80043d2:	2200      	movs	r2, #0
 80043d4:	f007 fc94 	bl	800bd00 <osMessageQueueGet>
			  osMessageQueueGet(uart_rx_queueHandle, &trama[1], 0, osWaitForever);
 80043d8:	4b98      	ldr	r3, [pc, #608]	; (800463c <uart_rx_task+0x2bc>)
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	2301      	movs	r3, #1
 80043de:	425a      	negs	r2, r3
 80043e0:	193b      	adds	r3, r7, r4
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	0013      	movs	r3, r2
 80043e6:	2200      	movs	r2, #0
 80043e8:	f007 fc8a 	bl	800bd00 <osMessageQueueGet>
			  osMessageQueueGet(uart_rx_queueHandle, &trama[2], 0, osWaitForever);
 80043ec:	4b93      	ldr	r3, [pc, #588]	; (800463c <uart_rx_task+0x2bc>)
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	2301      	movs	r3, #1
 80043f2:	425a      	negs	r2, r3
 80043f4:	193b      	adds	r3, r7, r4
 80043f6:	1c99      	adds	r1, r3, #2
 80043f8:	0013      	movs	r3, r2
 80043fa:	2200      	movs	r2, #0
 80043fc:	f007 fc80 	bl	800bd00 <osMessageQueueGet>
			  osMessageQueueGet(uart_rx_queueHandle, &trama[3], 0, osWaitForever);
 8004400:	4b8e      	ldr	r3, [pc, #568]	; (800463c <uart_rx_task+0x2bc>)
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	2301      	movs	r3, #1
 8004406:	425a      	negs	r2, r3
 8004408:	193b      	adds	r3, r7, r4
 800440a:	1cd9      	adds	r1, r3, #3
 800440c:	0013      	movs	r3, r2
 800440e:	2200      	movs	r2, #0
 8004410:	f007 fc76 	bl	800bd00 <osMessageQueueGet>

			if(trama[3]==0xE0){
 8004414:	193b      	adds	r3, r7, r4
 8004416:	78db      	ldrb	r3, [r3, #3]
 8004418:	2be0      	cmp	r3, #224	; 0xe0
 800441a:	d000      	beq.n	800441e <uart_rx_task+0x9e>
 800441c:	e0fc      	b.n	8004618 <uart_rx_task+0x298>
				switch(trama[0]){
 800441e:	230c      	movs	r3, #12
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	3b41      	subs	r3, #65	; 0x41
 8004426:	2b33      	cmp	r3, #51	; 0x33
 8004428:	d900      	bls.n	800442c <uart_rx_task+0xac>
 800442a:	e0f5      	b.n	8004618 <uart_rx_task+0x298>
 800442c:	009a      	lsls	r2, r3, #2
 800442e:	4b84      	ldr	r3, [pc, #528]	; (8004640 <uart_rx_task+0x2c0>)
 8004430:	18d3      	adds	r3, r2, r3
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	469f      	mov	pc, r3
					case 'T':
						osThreadResume(enviar_tmpHandle);
 8004436:	4b7f      	ldr	r3, [pc, #508]	; (8004634 <uart_rx_task+0x2b4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	0018      	movs	r0, r3
 800443c:	f007 f9ca 	bl	800b7d4 <osThreadResume>
						periodo_TEMP=trama[1]*10;
 8004440:	230c      	movs	r3, #12
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	001a      	movs	r2, r3
 8004448:	0013      	movs	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	189b      	adds	r3, r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	001a      	movs	r2, r3
 8004452:	4b7c      	ldr	r3, [pc, #496]	; (8004644 <uart_rx_task+0x2c4>)
 8004454:	601a      	str	r2, [r3, #0]
						break;
 8004456:	e0df      	b.n	8004618 <uart_rx_task+0x298>
					case 't':
						osThreadSuspend(enviar_tmpHandle);
 8004458:	4b76      	ldr	r3, [pc, #472]	; (8004634 <uart_rx_task+0x2b4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	0018      	movs	r0, r3
 800445e:	f007 f98b 	bl	800b778 <osThreadSuspend>
						break;
 8004462:	e0d9      	b.n	8004618 <uart_rx_task+0x298>
					case 'M':
						osThreadResume(stepperHandle);
 8004464:	4b71      	ldr	r3, [pc, #452]	; (800462c <uart_rx_task+0x2ac>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	0018      	movs	r0, r3
 800446a:	f007 f9b3 	bl	800b7d4 <osThreadResume>
						periodo=(60*1000)/(2048.0*trama[1]);
 800446e:	230c      	movs	r3, #12
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	785b      	ldrb	r3, [r3, #1]
 8004474:	0018      	movs	r0, r3
 8004476:	f7fe fc93 	bl	8002da0 <__aeabi_i2d>
 800447a:	2200      	movs	r2, #0
 800447c:	4b72      	ldr	r3, [pc, #456]	; (8004648 <uart_rx_task+0x2c8>)
 800447e:	f7fd fe9f 	bl	80021c0 <__aeabi_dmul>
 8004482:	0003      	movs	r3, r0
 8004484:	000c      	movs	r4, r1
 8004486:	001a      	movs	r2, r3
 8004488:	0023      	movs	r3, r4
 800448a:	2000      	movs	r0, #0
 800448c:	496f      	ldr	r1, [pc, #444]	; (800464c <uart_rx_task+0x2cc>)
 800448e:	f7fd fa8d 	bl	80019ac <__aeabi_ddiv>
 8004492:	0003      	movs	r3, r0
 8004494:	000c      	movs	r4, r1
 8004496:	0018      	movs	r0, r3
 8004498:	0021      	movs	r1, r4
 800449a:	f7fe fc4b 	bl	8002d34 <__aeabi_d2iz>
 800449e:	0002      	movs	r2, r0
 80044a0:	4b6b      	ldr	r3, [pc, #428]	; (8004650 <uart_rx_task+0x2d0>)
 80044a2:	601a      	str	r2, [r3, #0]

						if(periodo<2){
 80044a4:	4b6a      	ldr	r3, [pc, #424]	; (8004650 <uart_rx_task+0x2d0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	dd00      	ble.n	80044ae <uart_rx_task+0x12e>
 80044ac:	e0b3      	b.n	8004616 <uart_rx_task+0x296>
							periodo=2;
 80044ae:	4b68      	ldr	r3, [pc, #416]	; (8004650 <uart_rx_task+0x2d0>)
 80044b0:	2202      	movs	r2, #2
 80044b2:	601a      	str	r2, [r3, #0]
						}
						break;
 80044b4:	e0af      	b.n	8004616 <uart_rx_task+0x296>
					case 'S':
						estado=5;
 80044b6:	4b67      	ldr	r3, [pc, #412]	; (8004654 <uart_rx_task+0x2d4>)
 80044b8:	2205      	movs	r2, #5
 80044ba:	601a      	str	r2, [r3, #0]
						osThreadResume(servoHandle);
 80044bc:	4b5a      	ldr	r3, [pc, #360]	; (8004628 <uart_rx_task+0x2a8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f007 f987 	bl	800b7d4 <osThreadResume>
						grados=trama[1];
 80044c6:	230c      	movs	r3, #12
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7fc ff11 	bl	80012f4 <__aeabi_ui2f>
 80044d2:	1c02      	adds	r2, r0, #0
 80044d4:	4b60      	ldr	r3, [pc, #384]	; (8004658 <uart_rx_task+0x2d8>)
 80044d6:	601a      	str	r2, [r3, #0]
						Ta=grados/90.0 +1;
 80044d8:	4b5f      	ldr	r3, [pc, #380]	; (8004658 <uart_rx_task+0x2d8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	1c18      	adds	r0, r3, #0
 80044de:	f7fe fc99 	bl	8002e14 <__aeabi_f2d>
 80044e2:	2200      	movs	r2, #0
 80044e4:	4b5d      	ldr	r3, [pc, #372]	; (800465c <uart_rx_task+0x2dc>)
 80044e6:	f7fd fa61 	bl	80019ac <__aeabi_ddiv>
 80044ea:	0003      	movs	r3, r0
 80044ec:	000c      	movs	r4, r1
 80044ee:	0018      	movs	r0, r3
 80044f0:	0021      	movs	r1, r4
 80044f2:	2200      	movs	r2, #0
 80044f4:	4b5a      	ldr	r3, [pc, #360]	; (8004660 <uart_rx_task+0x2e0>)
 80044f6:	f7fc ff3d 	bl	8001374 <__aeabi_dadd>
 80044fa:	0003      	movs	r3, r0
 80044fc:	000c      	movs	r4, r1
 80044fe:	0018      	movs	r0, r3
 8004500:	0021      	movs	r1, r4
 8004502:	f7fe fcd9 	bl	8002eb8 <__aeabi_d2f>
 8004506:	1c02      	adds	r2, r0, #0
 8004508:	4b56      	ldr	r3, [pc, #344]	; (8004664 <uart_rx_task+0x2e4>)
 800450a:	601a      	str	r2, [r3, #0]
						ccr=Ta*1000;
 800450c:	4b55      	ldr	r3, [pc, #340]	; (8004664 <uart_rx_task+0x2e4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4955      	ldr	r1, [pc, #340]	; (8004668 <uart_rx_task+0x2e8>)
 8004512:	1c18      	adds	r0, r3, #0
 8004514:	f7fc fb8e 	bl	8000c34 <__aeabi_fmul>
 8004518:	1c03      	adds	r3, r0, #0
 800451a:	1c1a      	adds	r2, r3, #0
 800451c:	4b53      	ldr	r3, [pc, #332]	; (800466c <uart_rx_task+0x2ec>)
 800451e:	601a      	str	r2, [r3, #0]
						htim3.Instance -> CCR2 = ccr;
 8004520:	4b52      	ldr	r3, [pc, #328]	; (800466c <uart_rx_task+0x2ec>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b52      	ldr	r3, [pc, #328]	; (8004670 <uart_rx_task+0x2f0>)
 8004526:	681c      	ldr	r4, [r3, #0]
 8004528:	1c10      	adds	r0, r2, #0
 800452a:	f7fb ffdb 	bl	80004e4 <__aeabi_f2uiz>
 800452e:	0003      	movs	r3, r0
 8004530:	63a3      	str	r3, [r4, #56]	; 0x38
						break;
 8004532:	e071      	b.n	8004618 <uart_rx_task+0x298>
					case 'X':
						osThreadResume(oledHandle);
 8004534:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <uart_rx_task+0x2b0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0018      	movs	r0, r3
 800453a:	f007 f94b 	bl	800b7d4 <osThreadResume>
						info=1;
 800453e:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <uart_rx_task+0x2f4>)
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]
						break;
 8004544:	e068      	b.n	8004618 <uart_rx_task+0x298>
					case 'C':
						osThreadSuspend(servoHandle);
 8004546:	4b38      	ldr	r3, [pc, #224]	; (8004628 <uart_rx_task+0x2a8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	0018      	movs	r0, r3
 800454c:	f007 f914 	bl	800b778 <osThreadSuspend>
						osThreadSuspend(stepperHandle);
 8004550:	4b36      	ldr	r3, [pc, #216]	; (800462c <uart_rx_task+0x2ac>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0018      	movs	r0, r3
 8004556:	f007 f90f 	bl	800b778 <osThreadSuspend>
						info=0;
 800455a:	4b46      	ldr	r3, [pc, #280]	; (8004674 <uart_rx_task+0x2f4>)
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(enviar_tmpHandle);
 8004560:	4b34      	ldr	r3, [pc, #208]	; (8004634 <uart_rx_task+0x2b4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	0018      	movs	r0, r3
 8004566:	f007 f907 	bl	800b778 <osThreadSuspend>
						osThreadSuspend(CAN_remoteHandle);
 800456a:	4b33      	ldr	r3, [pc, #204]	; (8004638 <uart_rx_task+0x2b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	0018      	movs	r0, r3
 8004570:	f007 f902 	bl	800b778 <osThreadSuspend>
						break;
 8004574:	e050      	b.n	8004618 <uart_rx_task+0x298>
					case 'D':
						direccion='D';
 8004576:	4b40      	ldr	r3, [pc, #256]	; (8004678 <uart_rx_task+0x2f8>)
 8004578:	2244      	movs	r2, #68	; 0x44
 800457a:	701a      	strb	r2, [r3, #0]
						osThreadResume(stepperHandle);
 800457c:	4b2b      	ldr	r3, [pc, #172]	; (800462c <uart_rx_task+0x2ac>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	0018      	movs	r0, r3
 8004582:	f007 f927 	bl	800b7d4 <osThreadResume>
						break;
 8004586:	e047      	b.n	8004618 <uart_rx_task+0x298>
					case 'I':
						direccion='I';
 8004588:	4b3b      	ldr	r3, [pc, #236]	; (8004678 <uart_rx_task+0x2f8>)
 800458a:	2249      	movs	r2, #73	; 0x49
 800458c:	701a      	strb	r2, [r3, #0]
						osThreadResume(stepperHandle);
 800458e:	4b27      	ldr	r3, [pc, #156]	; (800462c <uart_rx_task+0x2ac>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	0018      	movs	r0, r3
 8004594:	f007 f91e 	bl	800b7d4 <osThreadResume>
						break;
 8004598:	e03e      	b.n	8004618 <uart_rx_task+0x298>
					case 'P':
						osThreadResume(servoHandle);
 800459a:	4b23      	ldr	r3, [pc, #140]	; (8004628 <uart_rx_task+0x2a8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	0018      	movs	r0, r3
 80045a0:	f007 f918 	bl	800b7d4 <osThreadResume>
						estado=4;
 80045a4:	4b2b      	ldr	r3, [pc, #172]	; (8004654 <uart_rx_task+0x2d4>)
 80045a6:	2204      	movs	r2, #4
 80045a8:	601a      	str	r2, [r3, #0]
						break;
 80045aa:	e035      	b.n	8004618 <uart_rx_task+0x298>
					case 'A':
						osThreadSuspend(servoHandle);
 80045ac:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <uart_rx_task+0x2a8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f007 f8e1 	bl	800b778 <osThreadSuspend>
						estado=0;
 80045b6:	4b27      	ldr	r3, [pc, #156]	; (8004654 <uart_rx_task+0x2d4>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
						espera=trama[1]*1000;
 80045bc:	240c      	movs	r4, #12
 80045be:	193b      	adds	r3, r7, r4
 80045c0:	785b      	ldrb	r3, [r3, #1]
 80045c2:	001a      	movs	r2, r3
 80045c4:	0013      	movs	r3, r2
 80045c6:	015b      	lsls	r3, r3, #5
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	189b      	adds	r3, r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7fc fe45 	bl	8001260 <__aeabi_i2f>
 80045d6:	1c02      	adds	r2, r0, #0
 80045d8:	4b28      	ldr	r3, [pc, #160]	; (800467c <uart_rx_task+0x2fc>)
 80045da:	601a      	str	r2, [r3, #0]
						tmp_velocidad=(1000/trama[2]);
 80045dc:	193b      	adds	r3, r7, r4
 80045de:	789b      	ldrb	r3, [r3, #2]
 80045e0:	0019      	movs	r1, r3
 80045e2:	23fa      	movs	r3, #250	; 0xfa
 80045e4:	0098      	lsls	r0, r3, #2
 80045e6:	f7fb fe19 	bl	800021c <__divsi3>
 80045ea:	0003      	movs	r3, r0
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7fc fe37 	bl	8001260 <__aeabi_i2f>
 80045f2:	1c02      	adds	r2, r0, #0
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <uart_rx_task+0x300>)
 80045f6:	601a      	str	r2, [r3, #0]
						osThreadResume(servoHandle);
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <uart_rx_task+0x2a8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f007 f8e9 	bl	800b7d4 <osThreadResume>
						break;
 8004602:	e009      	b.n	8004618 <uart_rx_task+0x298>
					case 'R':
						activar_remota=true;
 8004604:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <uart_rx_task+0x304>)
 8004606:	2201      	movs	r2, #1
 8004608:	701a      	strb	r2, [r3, #0]
						osThreadResume(CAN_remoteHandle);
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <uart_rx_task+0x2b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	0018      	movs	r0, r3
 8004610:	f007 f8e0 	bl	800b7d4 <osThreadResume>
						break;
 8004614:	e000      	b.n	8004618 <uart_rx_task+0x298>
						break;
 8004616:	46c0      	nop			; (mov r8, r8)
					}
			}
		    osDelay(10);
 8004618:	200a      	movs	r0, #10
 800461a:	f007 f909 	bl	800b830 <osDelay>
			  osMessageQueueGet(uart_rx_queueHandle, &trama[0], 0, osWaitForever);
 800461e:	e6d2      	b.n	80043c6 <uart_rx_task+0x46>
 8004620:	20003310 	.word	0x20003310
 8004624:	2000339c 	.word	0x2000339c
 8004628:	200032e8 	.word	0x200032e8
 800462c:	200031d4 	.word	0x200031d4
 8004630:	20003420 	.word	0x20003420
 8004634:	2000347c 	.word	0x2000347c
 8004638:	20003320 	.word	0x20003320
 800463c:	20003290 	.word	0x20003290
 8004640:	0800f60c 	.word	0x0800f60c
 8004644:	20000018 	.word	0x20000018
 8004648:	40a00000 	.word	0x40a00000
 800464c:	40ed4c00 	.word	0x40ed4c00
 8004650:	20000010 	.word	0x20000010
 8004654:	2000000c 	.word	0x2000000c
 8004658:	20003328 	.word	0x20003328
 800465c:	40568000 	.word	0x40568000
 8004660:	3ff00000 	.word	0x3ff00000
 8004664:	200032f0 	.word	0x200032f0
 8004668:	447a0000 	.word	0x447a0000
 800466c:	20000008 	.word	0x20000008
 8004670:	2000329c 	.word	0x2000329c
 8004674:	200000b1 	.word	0x200000b1
 8004678:	20000014 	.word	0x20000014
 800467c:	20000004 	.word	0x20000004
 8004680:	20000000 	.word	0x20000000
 8004684:	200000b2 	.word	0x200000b2

08004688 <adc_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adc_task */
void adc_task(void *argument)
{
 8004688:	b590      	push	{r4, r7, lr}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adc_task */
	/* Infinite loop */
	uint16_t adc_value;
	float adc_in_0_voltage;

	HAL_ADCEx_Calibration_Start(&hadc);
 8004690:	4b3a      	ldr	r3, [pc, #232]	; (800477c <adc_task+0xf4>)
 8004692:	0018      	movs	r0, r3
 8004694:	f002 f8be 	bl	8006814 <HAL_ADCEx_Calibration_Start>

	for (;;) {
		//CONVERSIÓN CANAL 0
			  HAL_ADC_Start(&hadc);
 8004698:	4b38      	ldr	r3, [pc, #224]	; (800477c <adc_task+0xf4>)
 800469a:	0018      	movs	r0, r3
 800469c:	f001 fd4a 	bl	8006134 <HAL_ADC_Start>
			  //Preguntar si la conversion del canal 1 esta lista
			  while(HAL_ADC_PollForConversion(&hadc,1) != HAL_OK);
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	4b36      	ldr	r3, [pc, #216]	; (800477c <adc_task+0xf4>)
 80046a4:	2101      	movs	r1, #1
 80046a6:	0018      	movs	r0, r3
 80046a8:	f001 fdd8 	bl	800625c <HAL_ADC_PollForConversion>
 80046ac:	1e03      	subs	r3, r0, #0
 80046ae:	d1f8      	bne.n	80046a2 <adc_task+0x1a>

			  adc_value = HAL_ADC_GetValue(&hadc);
 80046b0:	4b32      	ldr	r3, [pc, #200]	; (800477c <adc_task+0xf4>)
 80046b2:	0018      	movs	r0, r3
 80046b4:	f001 fe6a 	bl	800638c <HAL_ADC_GetValue>
 80046b8:	0002      	movs	r2, r0
 80046ba:	210e      	movs	r1, #14
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	801a      	strh	r2, [r3, #0]

			  //HAL_ADC_Stop(&hadc);

			  adc_in_0_voltage = (adc_value/4096.0)*3.3;
 80046c0:	187b      	adds	r3, r7, r1
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	0018      	movs	r0, r3
 80046c6:	f7fe fb6b 	bl	8002da0 <__aeabi_i2d>
 80046ca:	2200      	movs	r2, #0
 80046cc:	4b2c      	ldr	r3, [pc, #176]	; (8004780 <adc_task+0xf8>)
 80046ce:	f7fd f96d 	bl	80019ac <__aeabi_ddiv>
 80046d2:	0003      	movs	r3, r0
 80046d4:	000c      	movs	r4, r1
 80046d6:	0018      	movs	r0, r3
 80046d8:	0021      	movs	r1, r4
 80046da:	4a2a      	ldr	r2, [pc, #168]	; (8004784 <adc_task+0xfc>)
 80046dc:	4b2a      	ldr	r3, [pc, #168]	; (8004788 <adc_task+0x100>)
 80046de:	f7fd fd6f 	bl	80021c0 <__aeabi_dmul>
 80046e2:	0003      	movs	r3, r0
 80046e4:	000c      	movs	r4, r1
 80046e6:	0018      	movs	r0, r3
 80046e8:	0021      	movs	r1, r4
 80046ea:	f7fe fbe5 	bl	8002eb8 <__aeabi_d2f>
 80046ee:	1c03      	adds	r3, r0, #0
 80046f0:	60bb      	str	r3, [r7, #8]

			  temperature= adc_in_0_voltage/0.010;
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f7fe fb8e 	bl	8002e14 <__aeabi_f2d>
 80046f8:	4a24      	ldr	r2, [pc, #144]	; (800478c <adc_task+0x104>)
 80046fa:	4b25      	ldr	r3, [pc, #148]	; (8004790 <adc_task+0x108>)
 80046fc:	f7fd f956 	bl	80019ac <__aeabi_ddiv>
 8004700:	0003      	movs	r3, r0
 8004702:	000c      	movs	r4, r1
 8004704:	0018      	movs	r0, r3
 8004706:	0021      	movs	r1, r4
 8004708:	f7fe fbd6 	bl	8002eb8 <__aeabi_d2f>
 800470c:	1c02      	adds	r2, r0, #0
 800470e:	4b21      	ldr	r3, [pc, #132]	; (8004794 <adc_task+0x10c>)
 8004710:	601a      	str	r2, [r3, #0]

			  //CONVERSIÓN CANAL 1
			  //HAL_ADC_Start(&hadc);
			  //Preguntar si la conversion del canal 2 esta lista
			  while(HAL_ADC_PollForConversion(&hadc,1) != HAL_OK);
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <adc_task+0xf4>)
 8004716:	2101      	movs	r1, #1
 8004718:	0018      	movs	r0, r3
 800471a:	f001 fd9f 	bl	800625c <HAL_ADC_PollForConversion>
 800471e:	1e03      	subs	r3, r0, #0
 8004720:	d1f8      	bne.n	8004714 <adc_task+0x8c>

			  adc_value = HAL_ADC_GetValue(&hadc);
 8004722:	4b16      	ldr	r3, [pc, #88]	; (800477c <adc_task+0xf4>)
 8004724:	0018      	movs	r0, r3
 8004726:	f001 fe31 	bl	800638c <HAL_ADC_GetValue>
 800472a:	0002      	movs	r2, r0
 800472c:	240e      	movs	r4, #14
 800472e:	193b      	adds	r3, r7, r4
 8004730:	801a      	strh	r2, [r3, #0]

			  HAL_ADC_Stop(&hadc);
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <adc_task+0xf4>)
 8004734:	0018      	movs	r0, r3
 8004736:	f001 fd51 	bl	80061dc <HAL_ADC_Stop>

			  adc_in_0_voltage = (adc_value/4096.0)*3.3;
 800473a:	193b      	adds	r3, r7, r4
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	0018      	movs	r0, r3
 8004740:	f7fe fb2e 	bl	8002da0 <__aeabi_i2d>
 8004744:	2200      	movs	r2, #0
 8004746:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <adc_task+0xf8>)
 8004748:	f7fd f930 	bl	80019ac <__aeabi_ddiv>
 800474c:	0003      	movs	r3, r0
 800474e:	000c      	movs	r4, r1
 8004750:	0018      	movs	r0, r3
 8004752:	0021      	movs	r1, r4
 8004754:	4a0b      	ldr	r2, [pc, #44]	; (8004784 <adc_task+0xfc>)
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <adc_task+0x100>)
 8004758:	f7fd fd32 	bl	80021c0 <__aeabi_dmul>
 800475c:	0003      	movs	r3, r0
 800475e:	000c      	movs	r4, r1
 8004760:	0018      	movs	r0, r3
 8004762:	0021      	movs	r1, r4
 8004764:	f7fe fba8 	bl	8002eb8 <__aeabi_d2f>
 8004768:	1c03      	adds	r3, r0, #0
 800476a:	60bb      	str	r3, [r7, #8]

			  potenciometro = adc_in_0_voltage;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <adc_task+0x110>)
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	601a      	str	r2, [r3, #0]

		    osDelay(10);
 8004772:	200a      	movs	r0, #10
 8004774:	f007 f85c 	bl	800b830 <osDelay>
			  HAL_ADC_Start(&hadc);
 8004778:	e78e      	b.n	8004698 <adc_task+0x10>
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	20003438 	.word	0x20003438
 8004780:	40b00000 	.word	0x40b00000
 8004784:	66666666 	.word	0x66666666
 8004788:	400a6666 	.word	0x400a6666
 800478c:	47ae147b 	.word	0x47ae147b
 8004790:	3f847ae1 	.word	0x3f847ae1
 8004794:	20003298 	.word	0x20003298
 8004798:	20003314 	.word	0x20003314

0800479c <stepper_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_stepper_task */
void stepper_task(void *argument)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN stepper_task */
	char numfase=1;
 80047a4:	230f      	movs	r3, #15
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]
	 /* Infinite loop */
	 for(;;){
		 switch(numfase) {
 80047ac:	230f      	movs	r3, #15
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d022      	beq.n	80047fc <stepper_task+0x60>
 80047b6:	dc02      	bgt.n	80047be <stepper_task+0x22>
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d005      	beq.n	80047c8 <stepper_task+0x2c>
 80047bc:	e06c      	b.n	8004898 <stepper_task+0xfc>
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d036      	beq.n	8004830 <stepper_task+0x94>
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d04e      	beq.n	8004864 <stepper_task+0xc8>
 80047c6:	e067      	b.n	8004898 <stepper_task+0xfc>
			 case 1:
				  HAL_GPIO_WritePin(GPIOB, steper_in_1_Pin, 1);
 80047c8:	4b48      	ldr	r3, [pc, #288]	; (80048ec <stepper_task+0x150>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	2108      	movs	r1, #8
 80047ce:	0018      	movs	r0, r3
 80047d0:	f002 fb64 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_2_Pin, 1);
 80047d4:	4b45      	ldr	r3, [pc, #276]	; (80048ec <stepper_task+0x150>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	2120      	movs	r1, #32
 80047da:	0018      	movs	r0, r3
 80047dc:	f002 fb5e 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_3_Pin, 0);
 80047e0:	4b42      	ldr	r3, [pc, #264]	; (80048ec <stepper_task+0x150>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	2110      	movs	r1, #16
 80047e6:	0018      	movs	r0, r3
 80047e8:	f002 fb58 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_4_Pin, 0);
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	483e      	ldr	r0, [pc, #248]	; (80048ec <stepper_task+0x150>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	0019      	movs	r1, r3
 80047f6:	f002 fb51 	bl	8006e9c <HAL_GPIO_WritePin>
				  break;
 80047fa:	e04d      	b.n	8004898 <stepper_task+0xfc>
			  case 2:
				  HAL_GPIO_WritePin(GPIOB, steper_in_1_Pin, 0);
 80047fc:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <stepper_task+0x150>)
 80047fe:	2200      	movs	r2, #0
 8004800:	2108      	movs	r1, #8
 8004802:	0018      	movs	r0, r3
 8004804:	f002 fb4a 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_2_Pin, 1);
 8004808:	4b38      	ldr	r3, [pc, #224]	; (80048ec <stepper_task+0x150>)
 800480a:	2201      	movs	r2, #1
 800480c:	2120      	movs	r1, #32
 800480e:	0018      	movs	r0, r3
 8004810:	f002 fb44 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_3_Pin, 1);
 8004814:	4b35      	ldr	r3, [pc, #212]	; (80048ec <stepper_task+0x150>)
 8004816:	2201      	movs	r2, #1
 8004818:	2110      	movs	r1, #16
 800481a:	0018      	movs	r0, r3
 800481c:	f002 fb3e 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_4_Pin, 0);
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4831      	ldr	r0, [pc, #196]	; (80048ec <stepper_task+0x150>)
 8004826:	2200      	movs	r2, #0
 8004828:	0019      	movs	r1, r3
 800482a:	f002 fb37 	bl	8006e9c <HAL_GPIO_WritePin>
				  break;
 800482e:	e033      	b.n	8004898 <stepper_task+0xfc>
			  case 3:
				  HAL_GPIO_WritePin(GPIOB, steper_in_1_Pin, 0);
 8004830:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <stepper_task+0x150>)
 8004832:	2200      	movs	r2, #0
 8004834:	2108      	movs	r1, #8
 8004836:	0018      	movs	r0, r3
 8004838:	f002 fb30 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_2_Pin, 0);
 800483c:	4b2b      	ldr	r3, [pc, #172]	; (80048ec <stepper_task+0x150>)
 800483e:	2200      	movs	r2, #0
 8004840:	2120      	movs	r1, #32
 8004842:	0018      	movs	r0, r3
 8004844:	f002 fb2a 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_3_Pin, 1);
 8004848:	4b28      	ldr	r3, [pc, #160]	; (80048ec <stepper_task+0x150>)
 800484a:	2201      	movs	r2, #1
 800484c:	2110      	movs	r1, #16
 800484e:	0018      	movs	r0, r3
 8004850:	f002 fb24 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_4_Pin, 1);
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4824      	ldr	r0, [pc, #144]	; (80048ec <stepper_task+0x150>)
 800485a:	2201      	movs	r2, #1
 800485c:	0019      	movs	r1, r3
 800485e:	f002 fb1d 	bl	8006e9c <HAL_GPIO_WritePin>
				  break;
 8004862:	e019      	b.n	8004898 <stepper_task+0xfc>
			  case 4:
				  HAL_GPIO_WritePin(GPIOB, steper_in_1_Pin, 1);
 8004864:	4b21      	ldr	r3, [pc, #132]	; (80048ec <stepper_task+0x150>)
 8004866:	2201      	movs	r2, #1
 8004868:	2108      	movs	r1, #8
 800486a:	0018      	movs	r0, r3
 800486c:	f002 fb16 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_2_Pin, 0);
 8004870:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <stepper_task+0x150>)
 8004872:	2200      	movs	r2, #0
 8004874:	2120      	movs	r1, #32
 8004876:	0018      	movs	r0, r3
 8004878:	f002 fb10 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_3_Pin, 0);
 800487c:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <stepper_task+0x150>)
 800487e:	2200      	movs	r2, #0
 8004880:	2110      	movs	r1, #16
 8004882:	0018      	movs	r0, r3
 8004884:	f002 fb0a 	bl	8006e9c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, steper_in_4_Pin, 1);
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4817      	ldr	r0, [pc, #92]	; (80048ec <stepper_task+0x150>)
 800488e:	2201      	movs	r2, #1
 8004890:	0019      	movs	r1, r3
 8004892:	f002 fb03 	bl	8006e9c <HAL_GPIO_WritePin>
				  break;
 8004896:	46c0      	nop			; (mov r8, r8)
			  }

		  if(direccion=='D'){
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <stepper_task+0x154>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b44      	cmp	r3, #68	; 0x44
 800489e:	d10d      	bne.n	80048bc <stepper_task+0x120>
			numfase++;
 80048a0:	210f      	movs	r1, #15
 80048a2:	187b      	adds	r3, r7, r1
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	187b      	adds	r3, r7, r1
 80048a8:	3201      	adds	r2, #1
 80048aa:	701a      	strb	r2, [r3, #0]
			  if(numfase>=5)
 80048ac:	187b      	adds	r3, r7, r1
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d903      	bls.n	80048bc <stepper_task+0x120>
				  numfase=1;
 80048b4:	230f      	movs	r3, #15
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]
		  }
		  if(direccion=='I'){
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <stepper_task+0x154>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b49      	cmp	r3, #73	; 0x49
 80048c2:	d10d      	bne.n	80048e0 <stepper_task+0x144>
		  	numfase--;
 80048c4:	210f      	movs	r1, #15
 80048c6:	187b      	adds	r3, r7, r1
 80048c8:	781a      	ldrb	r2, [r3, #0]
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	3a01      	subs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
		  		if(numfase<=0)
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d103      	bne.n	80048e0 <stepper_task+0x144>
		  			numfase=4;
 80048d8:	230f      	movs	r3, #15
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	2204      	movs	r2, #4
 80048de:	701a      	strb	r2, [r3, #0]
		  }
	  osDelay(periodo);
 80048e0:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <stepper_task+0x158>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f006 ffa3 	bl	800b830 <osDelay>
		 switch(numfase) {
 80048ea:	e75f      	b.n	80047ac <stepper_task+0x10>
 80048ec:	48000400 	.word	0x48000400
 80048f0:	20000014 	.word	0x20000014
 80048f4:	20000010 	.word	0x20000010

080048f8 <servo_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_Task */
void servo_Task(void *argument)
{
 80048f8:	b590      	push	{r4, r7, lr}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo_Task */
	/* Infinite loop */
	for (;;) {
		switch(estado){
 8004900:	4b76      	ldr	r3, [pc, #472]	; (8004adc <servo_Task+0x1e4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b05      	cmp	r3, #5
 8004906:	d8fb      	bhi.n	8004900 <servo_Task+0x8>
 8004908:	009a      	lsls	r2, r3, #2
 800490a:	4b75      	ldr	r3, [pc, #468]	; (8004ae0 <servo_Task+0x1e8>)
 800490c:	18d3      	adds	r3, r2, r3
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	469f      	mov	pc, r3
		  case 0:
			  grados=0;
 8004912:	4b74      	ldr	r3, [pc, #464]	; (8004ae4 <servo_Task+0x1ec>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
			  estado=1;
 8004918:	4b70      	ldr	r3, [pc, #448]	; (8004adc <servo_Task+0x1e4>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]
			  osDelay(10);
 800491e:	200a      	movs	r0, #10
 8004920:	f006 ff86 	bl	800b830 <osDelay>
			  break;
 8004924:	e0d9      	b.n	8004ada <servo_Task+0x1e2>
		  case 1:
			grados++;
 8004926:	4b6f      	ldr	r3, [pc, #444]	; (8004ae4 <servo_Task+0x1ec>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	21fe      	movs	r1, #254	; 0xfe
 800492c:	0589      	lsls	r1, r1, #22
 800492e:	1c18      	adds	r0, r3, #0
 8004930:	f7fb fe0e 	bl	8000550 <__aeabi_fadd>
 8004934:	1c03      	adds	r3, r0, #0
 8004936:	1c1a      	adds	r2, r3, #0
 8004938:	4b6a      	ldr	r3, [pc, #424]	; (8004ae4 <servo_Task+0x1ec>)
 800493a:	601a      	str	r2, [r3, #0]
			 Ta=grados/90 +1;
 800493c:	4b69      	ldr	r3, [pc, #420]	; (8004ae4 <servo_Task+0x1ec>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4969      	ldr	r1, [pc, #420]	; (8004ae8 <servo_Task+0x1f0>)
 8004942:	1c18      	adds	r0, r3, #0
 8004944:	f7fb ff9e 	bl	8000884 <__aeabi_fdiv>
 8004948:	1c03      	adds	r3, r0, #0
 800494a:	21fe      	movs	r1, #254	; 0xfe
 800494c:	0589      	lsls	r1, r1, #22
 800494e:	1c18      	adds	r0, r3, #0
 8004950:	f7fb fdfe 	bl	8000550 <__aeabi_fadd>
 8004954:	1c03      	adds	r3, r0, #0
 8004956:	1c1a      	adds	r2, r3, #0
 8004958:	4b64      	ldr	r3, [pc, #400]	; (8004aec <servo_Task+0x1f4>)
 800495a:	601a      	str	r2, [r3, #0]
			 ccr=Ta*1000;
 800495c:	4b63      	ldr	r3, [pc, #396]	; (8004aec <servo_Task+0x1f4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4963      	ldr	r1, [pc, #396]	; (8004af0 <servo_Task+0x1f8>)
 8004962:	1c18      	adds	r0, r3, #0
 8004964:	f7fc f966 	bl	8000c34 <__aeabi_fmul>
 8004968:	1c03      	adds	r3, r0, #0
 800496a:	1c1a      	adds	r2, r3, #0
 800496c:	4b61      	ldr	r3, [pc, #388]	; (8004af4 <servo_Task+0x1fc>)
 800496e:	601a      	str	r2, [r3, #0]
			 htim3.Instance -> CCR2 = ccr;
 8004970:	4b60      	ldr	r3, [pc, #384]	; (8004af4 <servo_Task+0x1fc>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b60      	ldr	r3, [pc, #384]	; (8004af8 <servo_Task+0x200>)
 8004976:	681c      	ldr	r4, [r3, #0]
 8004978:	1c10      	adds	r0, r2, #0
 800497a:	f7fb fdb3 	bl	80004e4 <__aeabi_f2uiz>
 800497e:	0003      	movs	r3, r0
 8004980:	63a3      	str	r3, [r4, #56]	; 0x38
				if(grados==90)
 8004982:	4b58      	ldr	r3, [pc, #352]	; (8004ae4 <servo_Task+0x1ec>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4958      	ldr	r1, [pc, #352]	; (8004ae8 <servo_Task+0x1f0>)
 8004988:	1c18      	adds	r0, r3, #0
 800498a:	f7fb fd7d 	bl	8000488 <__aeabi_fcmpeq>
 800498e:	1e03      	subs	r3, r0, #0
 8004990:	d002      	beq.n	8004998 <servo_Task+0xa0>
					estado=2;
 8004992:	4b52      	ldr	r3, [pc, #328]	; (8004adc <servo_Task+0x1e4>)
 8004994:	2202      	movs	r2, #2
 8004996:	601a      	str	r2, [r3, #0]
			osDelay(tmp_velocidad);
 8004998:	4b58      	ldr	r3, [pc, #352]	; (8004afc <servo_Task+0x204>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	1c18      	adds	r0, r3, #0
 800499e:	f7fb fda1 	bl	80004e4 <__aeabi_f2uiz>
 80049a2:	0003      	movs	r3, r0
 80049a4:	0018      	movs	r0, r3
 80049a6:	f006 ff43 	bl	800b830 <osDelay>
			break;
 80049aa:	e096      	b.n	8004ada <servo_Task+0x1e2>
		  case 2:
			estado=3;
 80049ac:	4b4b      	ldr	r3, [pc, #300]	; (8004adc <servo_Task+0x1e4>)
 80049ae:	2203      	movs	r2, #3
 80049b0:	601a      	str	r2, [r3, #0]
			osDelay(espera);
 80049b2:	4b53      	ldr	r3, [pc, #332]	; (8004b00 <servo_Task+0x208>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	1c18      	adds	r0, r3, #0
 80049b8:	f7fb fd94 	bl	80004e4 <__aeabi_f2uiz>
 80049bc:	0003      	movs	r3, r0
 80049be:	0018      	movs	r0, r3
 80049c0:	f006 ff36 	bl	800b830 <osDelay>
				  break;
 80049c4:	e089      	b.n	8004ada <servo_Task+0x1e2>
		  case 3:
			  grados--;
 80049c6:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <servo_Task+0x1ec>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	21fe      	movs	r1, #254	; 0xfe
 80049cc:	0589      	lsls	r1, r1, #22
 80049ce:	1c18      	adds	r0, r3, #0
 80049d0:	f7fc fa62 	bl	8000e98 <__aeabi_fsub>
 80049d4:	1c03      	adds	r3, r0, #0
 80049d6:	1c1a      	adds	r2, r3, #0
 80049d8:	4b42      	ldr	r3, [pc, #264]	; (8004ae4 <servo_Task+0x1ec>)
 80049da:	601a      	str	r2, [r3, #0]
			  Ta=grados/90 +1;				//Ta=1
 80049dc:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <servo_Task+0x1ec>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4941      	ldr	r1, [pc, #260]	; (8004ae8 <servo_Task+0x1f0>)
 80049e2:	1c18      	adds	r0, r3, #0
 80049e4:	f7fb ff4e 	bl	8000884 <__aeabi_fdiv>
 80049e8:	1c03      	adds	r3, r0, #0
 80049ea:	21fe      	movs	r1, #254	; 0xfe
 80049ec:	0589      	lsls	r1, r1, #22
 80049ee:	1c18      	adds	r0, r3, #0
 80049f0:	f7fb fdae 	bl	8000550 <__aeabi_fadd>
 80049f4:	1c03      	adds	r3, r0, #0
 80049f6:	1c1a      	adds	r2, r3, #0
 80049f8:	4b3c      	ldr	r3, [pc, #240]	; (8004aec <servo_Task+0x1f4>)
 80049fa:	601a      	str	r2, [r3, #0]
			  ccr=Ta*1000;
 80049fc:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <servo_Task+0x1f4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	493b      	ldr	r1, [pc, #236]	; (8004af0 <servo_Task+0x1f8>)
 8004a02:	1c18      	adds	r0, r3, #0
 8004a04:	f7fc f916 	bl	8000c34 <__aeabi_fmul>
 8004a08:	1c03      	adds	r3, r0, #0
 8004a0a:	1c1a      	adds	r2, r3, #0
 8004a0c:	4b39      	ldr	r3, [pc, #228]	; (8004af4 <servo_Task+0x1fc>)
 8004a0e:	601a      	str	r2, [r3, #0]
			  htim3.Instance -> CCR2 = ccr;
 8004a10:	4b38      	ldr	r3, [pc, #224]	; (8004af4 <servo_Task+0x1fc>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b38      	ldr	r3, [pc, #224]	; (8004af8 <servo_Task+0x200>)
 8004a16:	681c      	ldr	r4, [r3, #0]
 8004a18:	1c10      	adds	r0, r2, #0
 8004a1a:	f7fb fd63 	bl	80004e4 <__aeabi_f2uiz>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	63a3      	str	r3, [r4, #56]	; 0x38
				  if(grados==0)
 8004a22:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <servo_Task+0x1ec>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2100      	movs	r1, #0
 8004a28:	1c18      	adds	r0, r3, #0
 8004a2a:	f7fb fd2d 	bl	8000488 <__aeabi_fcmpeq>
 8004a2e:	1e03      	subs	r3, r0, #0
 8004a30:	d002      	beq.n	8004a38 <servo_Task+0x140>
					  estado=5;
 8004a32:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <servo_Task+0x1e4>)
 8004a34:	2205      	movs	r2, #5
 8004a36:	601a      	str	r2, [r3, #0]
			  osDelay(tmp_velocidad);
 8004a38:	4b30      	ldr	r3, [pc, #192]	; (8004afc <servo_Task+0x204>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1c18      	adds	r0, r3, #0
 8004a3e:	f7fb fd51 	bl	80004e4 <__aeabi_f2uiz>
 8004a42:	0003      	movs	r3, r0
 8004a44:	0018      	movs	r0, r3
 8004a46:	f006 fef3 	bl	800b830 <osDelay>
				  break;
 8004a4a:	e046      	b.n	8004ada <servo_Task+0x1e2>
		  case 4:
			   grados = (90/3.3)*potenciometro;
 8004a4c:	4b2d      	ldr	r3, [pc, #180]	; (8004b04 <servo_Task+0x20c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	1c18      	adds	r0, r3, #0
 8004a52:	f7fe f9df 	bl	8002e14 <__aeabi_f2d>
 8004a56:	4a2c      	ldr	r2, [pc, #176]	; (8004b08 <servo_Task+0x210>)
 8004a58:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <servo_Task+0x214>)
 8004a5a:	f7fd fbb1 	bl	80021c0 <__aeabi_dmul>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	000c      	movs	r4, r1
 8004a62:	0018      	movs	r0, r3
 8004a64:	0021      	movs	r1, r4
 8004a66:	f7fe fa27 	bl	8002eb8 <__aeabi_d2f>
 8004a6a:	1c02      	adds	r2, r0, #0
 8004a6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <servo_Task+0x1ec>)
 8004a6e:	601a      	str	r2, [r3, #0]
			   Ta=grados/90.0 +1;				//Ta=1
 8004a70:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <servo_Task+0x1ec>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1c18      	adds	r0, r3, #0
 8004a76:	f7fe f9cd 	bl	8002e14 <__aeabi_f2d>
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <servo_Task+0x218>)
 8004a7e:	f7fc ff95 	bl	80019ac <__aeabi_ddiv>
 8004a82:	0003      	movs	r3, r0
 8004a84:	000c      	movs	r4, r1
 8004a86:	0018      	movs	r0, r3
 8004a88:	0021      	movs	r1, r4
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <servo_Task+0x21c>)
 8004a8e:	f7fc fc71 	bl	8001374 <__aeabi_dadd>
 8004a92:	0003      	movs	r3, r0
 8004a94:	000c      	movs	r4, r1
 8004a96:	0018      	movs	r0, r3
 8004a98:	0021      	movs	r1, r4
 8004a9a:	f7fe fa0d 	bl	8002eb8 <__aeabi_d2f>
 8004a9e:	1c02      	adds	r2, r0, #0
 8004aa0:	4b12      	ldr	r3, [pc, #72]	; (8004aec <servo_Task+0x1f4>)
 8004aa2:	601a      	str	r2, [r3, #0]
			   ccr=Ta*1000;
 8004aa4:	4b11      	ldr	r3, [pc, #68]	; (8004aec <servo_Task+0x1f4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4911      	ldr	r1, [pc, #68]	; (8004af0 <servo_Task+0x1f8>)
 8004aaa:	1c18      	adds	r0, r3, #0
 8004aac:	f7fc f8c2 	bl	8000c34 <__aeabi_fmul>
 8004ab0:	1c03      	adds	r3, r0, #0
 8004ab2:	1c1a      	adds	r2, r3, #0
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <servo_Task+0x1fc>)
 8004ab6:	601a      	str	r2, [r3, #0]
			   htim3.Instance -> CCR2 = ccr;
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <servo_Task+0x1fc>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <servo_Task+0x200>)
 8004abe:	681c      	ldr	r4, [r3, #0]
 8004ac0:	1c10      	adds	r0, r2, #0
 8004ac2:	f7fb fd0f 	bl	80004e4 <__aeabi_f2uiz>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	63a3      	str	r3, [r4, #56]	; 0x38
			   osDelay(50);
 8004aca:	2032      	movs	r0, #50	; 0x32
 8004acc:	f006 feb0 	bl	800b830 <osDelay>
			  break;
 8004ad0:	e003      	b.n	8004ada <servo_Task+0x1e2>
		  case 5:
			  osDelay(200);
 8004ad2:	20c8      	movs	r0, #200	; 0xc8
 8004ad4:	f006 feac 	bl	800b830 <osDelay>
			  break;
 8004ad8:	46c0      	nop			; (mov r8, r8)
		switch(estado){
 8004ada:	e711      	b.n	8004900 <servo_Task+0x8>
 8004adc:	2000000c 	.word	0x2000000c
 8004ae0:	0800f6dc 	.word	0x0800f6dc
 8004ae4:	20003328 	.word	0x20003328
 8004ae8:	42b40000 	.word	0x42b40000
 8004aec:	200032f0 	.word	0x200032f0
 8004af0:	447a0000 	.word	0x447a0000
 8004af4:	20000008 	.word	0x20000008
 8004af8:	2000329c 	.word	0x2000329c
 8004afc:	20000000 	.word	0x20000000
 8004b00:	20000004 	.word	0x20000004
 8004b04:	20003314 	.word	0x20003314
 8004b08:	745d1746 	.word	0x745d1746
 8004b0c:	403b45d1 	.word	0x403b45d1
 8004b10:	40568000 	.word	0x40568000
 8004b14:	3ff00000 	.word	0x3ff00000

08004b18 <enviar_estado_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_enviar_estado_Task */
void enviar_estado_Task(void *argument)
{
 8004b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN enviar_estado_Task */
	/* Infinite loop */
	uint8_t trama[4];

	for (;;) {
		if(flag_man_remota==true){
 8004b20:	4b74      	ldr	r3, [pc, #464]	; (8004cf4 <enviar_estado_Task+0x1dc>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d05c      	beq.n	8004be2 <enviar_estado_Task+0xca>
			osSemaphoreAcquire(uart_tx_semHandle, osWaitForever);
 8004b28:	4b73      	ldr	r3, [pc, #460]	; (8004cf8 <enviar_estado_Task+0x1e0>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	425b      	negs	r3, r3
 8004b30:	0019      	movs	r1, r3
 8004b32:	0010      	movs	r0, r2
 8004b34:	f006 ff46 	bl	800b9c4 <osSemaphoreAcquire>
			trama[0]=0x21;
 8004b38:	210c      	movs	r1, #12
 8004b3a:	187b      	adds	r3, r7, r1
 8004b3c:	2221      	movs	r2, #33	; 0x21
 8004b3e:	701a      	strb	r2, [r3, #0]
			trama[1]=servo_rmt;
 8004b40:	4b6e      	ldr	r3, [pc, #440]	; (8004cfc <enviar_estado_Task+0x1e4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	187b      	adds	r3, r7, r1
 8004b48:	705a      	strb	r2, [r3, #1]
			trama[2]=0xFF;
 8004b4a:	187b      	adds	r3, r7, r1
 8004b4c:	22ff      	movs	r2, #255	; 0xff
 8004b4e:	709a      	strb	r2, [r3, #2]
			trama[3]=0xE0;
 8004b50:	187b      	adds	r3, r7, r1
 8004b52:	22e0      	movs	r2, #224	; 0xe0
 8004b54:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart2, trama , 4);
 8004b56:	000c      	movs	r4, r1
 8004b58:	1879      	adds	r1, r7, r1
 8004b5a:	4b69      	ldr	r3, [pc, #420]	; (8004d00 <enviar_estado_Task+0x1e8>)
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f005 fafa 	bl	800a158 <HAL_UART_Transmit_IT>

			osSemaphoreAcquire(uart_tx_semHandle, osWaitForever);
 8004b64:	4b64      	ldr	r3, [pc, #400]	; (8004cf8 <enviar_estado_Task+0x1e0>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	2301      	movs	r3, #1
 8004b6a:	425b      	negs	r3, r3
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	0010      	movs	r0, r2
 8004b70:	f006 ff28 	bl	800b9c4 <osSemaphoreAcquire>
			trama[0]=0x31;
 8004b74:	0021      	movs	r1, r4
 8004b76:	187b      	adds	r3, r7, r1
 8004b78:	2231      	movs	r2, #49	; 0x31
 8004b7a:	701a      	strb	r2, [r3, #0]
			trama[1]=temp_rmt_ent;
 8004b7c:	4b61      	ldr	r3, [pc, #388]	; (8004d04 <enviar_estado_Task+0x1ec>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	187b      	adds	r3, r7, r1
 8004b84:	705a      	strb	r2, [r3, #1]
			trama[2]=temp_rmt_dec;
 8004b86:	4b60      	ldr	r3, [pc, #384]	; (8004d08 <enviar_estado_Task+0x1f0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	187b      	adds	r3, r7, r1
 8004b8e:	709a      	strb	r2, [r3, #2]
			trama[3]=0xE0;
 8004b90:	187b      	adds	r3, r7, r1
 8004b92:	22e0      	movs	r2, #224	; 0xe0
 8004b94:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart2, trama , 4);
 8004b96:	000c      	movs	r4, r1
 8004b98:	1879      	adds	r1, r7, r1
 8004b9a:	4b59      	ldr	r3, [pc, #356]	; (8004d00 <enviar_estado_Task+0x1e8>)
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f005 fada 	bl	800a158 <HAL_UART_Transmit_IT>

			osSemaphoreAcquire(uart_tx_semHandle, osWaitForever);
 8004ba4:	4b54      	ldr	r3, [pc, #336]	; (8004cf8 <enviar_estado_Task+0x1e0>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	425b      	negs	r3, r3
 8004bac:	0019      	movs	r1, r3
 8004bae:	0010      	movs	r0, r2
 8004bb0:	f006 ff08 	bl	800b9c4 <osSemaphoreAcquire>
			trama[0]=0x41;
 8004bb4:	0021      	movs	r1, r4
 8004bb6:	187b      	adds	r3, r7, r1
 8004bb8:	2241      	movs	r2, #65	; 0x41
 8004bba:	701a      	strb	r2, [r3, #0]
			trama[1]=rpm_rmt_ent;
 8004bbc:	4b53      	ldr	r3, [pc, #332]	; (8004d0c <enviar_estado_Task+0x1f4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	187b      	adds	r3, r7, r1
 8004bc4:	705a      	strb	r2, [r3, #1]
			trama[2]=rpm_rmt_dec;
 8004bc6:	4b52      	ldr	r3, [pc, #328]	; (8004d10 <enviar_estado_Task+0x1f8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	187b      	adds	r3, r7, r1
 8004bce:	709a      	strb	r2, [r3, #2]
			trama[3]=0xE0;
 8004bd0:	187b      	adds	r3, r7, r1
 8004bd2:	22e0      	movs	r2, #224	; 0xe0
 8004bd4:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart2, trama , 4);
 8004bd6:	1879      	adds	r1, r7, r1
 8004bd8:	4b49      	ldr	r3, [pc, #292]	; (8004d00 <enviar_estado_Task+0x1e8>)
 8004bda:	2204      	movs	r2, #4
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f005 fabb 	bl	800a158 <HAL_UART_Transmit_IT>
		}

		osSemaphoreAcquire(uart_tx_semHandle, osWaitForever);
 8004be2:	4b45      	ldr	r3, [pc, #276]	; (8004cf8 <enviar_estado_Task+0x1e0>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	2301      	movs	r3, #1
 8004be8:	425b      	negs	r3, r3
 8004bea:	0019      	movs	r1, r3
 8004bec:	0010      	movs	r0, r2
 8004bee:	f006 fee9 	bl	800b9c4 <osSemaphoreAcquire>
		trama[0]=0x40;
 8004bf2:	250c      	movs	r5, #12
 8004bf4:	197b      	adds	r3, r7, r5
 8004bf6:	2240      	movs	r2, #64	; 0x40
 8004bf8:	701a      	strb	r2, [r3, #0]
		trama[1]=(60*1000)/(2048.0*periodo);     //(64*4=256 pasos una vuelta * PERIODO(ms))(rev/s) -> pasamos a rad/s
 8004bfa:	4b46      	ldr	r3, [pc, #280]	; (8004d14 <enviar_estado_Task+0x1fc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f7fe f8ce 	bl	8002da0 <__aeabi_i2d>
 8004c04:	2200      	movs	r2, #0
 8004c06:	4b44      	ldr	r3, [pc, #272]	; (8004d18 <enviar_estado_Task+0x200>)
 8004c08:	f7fd fada 	bl	80021c0 <__aeabi_dmul>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	000c      	movs	r4, r1
 8004c10:	001a      	movs	r2, r3
 8004c12:	0023      	movs	r3, r4
 8004c14:	2000      	movs	r0, #0
 8004c16:	4941      	ldr	r1, [pc, #260]	; (8004d1c <enviar_estado_Task+0x204>)
 8004c18:	f7fc fec8 	bl	80019ac <__aeabi_ddiv>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	000c      	movs	r4, r1
 8004c20:	0018      	movs	r0, r3
 8004c22:	0021      	movs	r1, r4
 8004c24:	f7fb fc76 	bl	8000514 <__aeabi_d2uiz>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	002e      	movs	r6, r5
 8004c2e:	19bb      	adds	r3, r7, r6
 8004c30:	705a      	strb	r2, [r3, #1]
		trama[2]=((60*1000)/(2048.0*periodo)-trama[1])*100;
 8004c32:	4b38      	ldr	r3, [pc, #224]	; (8004d14 <enviar_estado_Task+0x1fc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7fe f8b2 	bl	8002da0 <__aeabi_i2d>
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <enviar_estado_Task+0x200>)
 8004c40:	f7fd fabe 	bl	80021c0 <__aeabi_dmul>
 8004c44:	0003      	movs	r3, r0
 8004c46:	000c      	movs	r4, r1
 8004c48:	001a      	movs	r2, r3
 8004c4a:	0023      	movs	r3, r4
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	4933      	ldr	r1, [pc, #204]	; (8004d1c <enviar_estado_Task+0x204>)
 8004c50:	f7fc feac 	bl	80019ac <__aeabi_ddiv>
 8004c54:	0003      	movs	r3, r0
 8004c56:	000c      	movs	r4, r1
 8004c58:	0025      	movs	r5, r4
 8004c5a:	001c      	movs	r4, r3
 8004c5c:	19bb      	adds	r3, r7, r6
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7fe f89d 	bl	8002da0 <__aeabi_i2d>
 8004c66:	0002      	movs	r2, r0
 8004c68:	000b      	movs	r3, r1
 8004c6a:	0020      	movs	r0, r4
 8004c6c:	0029      	movs	r1, r5
 8004c6e:	f7fd fd19 	bl	80026a4 <__aeabi_dsub>
 8004c72:	0003      	movs	r3, r0
 8004c74:	000c      	movs	r4, r1
 8004c76:	0018      	movs	r0, r3
 8004c78:	0021      	movs	r1, r4
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <enviar_estado_Task+0x208>)
 8004c7e:	f7fd fa9f 	bl	80021c0 <__aeabi_dmul>
 8004c82:	0003      	movs	r3, r0
 8004c84:	000c      	movs	r4, r1
 8004c86:	0018      	movs	r0, r3
 8004c88:	0021      	movs	r1, r4
 8004c8a:	f7fb fc43 	bl	8000514 <__aeabi_d2uiz>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	0035      	movs	r5, r6
 8004c94:	197b      	adds	r3, r7, r5
 8004c96:	709a      	strb	r2, [r3, #2]
		trama[3]=0xE0;
 8004c98:	002c      	movs	r4, r5
 8004c9a:	193b      	adds	r3, r7, r4
 8004c9c:	22e0      	movs	r2, #224	; 0xe0
 8004c9e:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(&huart2, trama , 4);
 8004ca0:	1939      	adds	r1, r7, r4
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <enviar_estado_Task+0x1e8>)
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f005 fa56 	bl	800a158 <HAL_UART_Transmit_IT>

		osSemaphoreAcquire(uart_tx_semHandle, osWaitForever);
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <enviar_estado_Task+0x1e0>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	425b      	negs	r3, r3
 8004cb4:	0019      	movs	r1, r3
 8004cb6:	0010      	movs	r0, r2
 8004cb8:	f006 fe84 	bl	800b9c4 <osSemaphoreAcquire>
		trama[0]=0x20;
 8004cbc:	193b      	adds	r3, r7, r4
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	701a      	strb	r2, [r3, #0]
		trama[1]=grados;
 8004cc2:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <enviar_estado_Task+0x20c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	1c18      	adds	r0, r3, #0
 8004cc8:	f7fb fc0c 	bl	80004e4 <__aeabi_f2uiz>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	193b      	adds	r3, r7, r4
 8004cd2:	705a      	strb	r2, [r3, #1]
		trama[2]=0xFF;
 8004cd4:	193b      	adds	r3, r7, r4
 8004cd6:	22ff      	movs	r2, #255	; 0xff
 8004cd8:	709a      	strb	r2, [r3, #2]
		trama[3]=0xE0;
 8004cda:	193b      	adds	r3, r7, r4
 8004cdc:	22e0      	movs	r2, #224	; 0xe0
 8004cde:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(&huart2, trama , 4);
 8004ce0:	1939      	adds	r1, r7, r4
 8004ce2:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <enviar_estado_Task+0x1e8>)
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f005 fa36 	bl	800a158 <HAL_UART_Transmit_IT>

		osDelay(250);
 8004cec:	20fa      	movs	r0, #250	; 0xfa
 8004cee:	f006 fd9f 	bl	800b830 <osDelay>
		if(flag_man_remota==true){
 8004cf2:	e715      	b.n	8004b20 <enviar_estado_Task+0x8>
 8004cf4:	200000b0 	.word	0x200000b0
 8004cf8:	200032ec 	.word	0x200032ec
 8004cfc:	2000331c 	.word	0x2000331c
 8004d00:	2000339c 	.word	0x2000339c
 8004d04:	20003478 	.word	0x20003478
 8004d08:	20003294 	.word	0x20003294
 8004d0c:	200032f4 	.word	0x200032f4
 8004d10:	2000328c 	.word	0x2000328c
 8004d14:	20000010 	.word	0x20000010
 8004d18:	40a00000 	.word	0x40a00000
 8004d1c:	40ed4c00 	.word	0x40ed4c00
 8004d20:	40590000 	.word	0x40590000
 8004d24:	20003328 	.word	0x20003328

08004d28 <enviar_tmp_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_enviar_tmp_task */
void enviar_tmp_task(void *argument)
{
 8004d28:	b5b0      	push	{r4, r5, r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
		int entera_TEMP, decimal_TEMP;
		uint8_t trama[4];

	  for(;;)
	  {
		  osSemaphoreAcquire(uart_tx_semHandle, osWaitForever);
 8004d30:	4b1e      	ldr	r3, [pc, #120]	; (8004dac <enviar_tmp_task+0x84>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	2301      	movs	r3, #1
 8004d36:	425b      	negs	r3, r3
 8004d38:	0019      	movs	r1, r3
 8004d3a:	0010      	movs	r0, r2
 8004d3c:	f006 fe42 	bl	800b9c4 <osSemaphoreAcquire>
			trama[0]=0x30;
 8004d40:	2508      	movs	r5, #8
 8004d42:	197b      	adds	r3, r7, r5
 8004d44:	2230      	movs	r2, #48	; 0x30
 8004d46:	701a      	strb	r2, [r3, #0]
			trama[1]=temperature;
 8004d48:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <enviar_tmp_task+0x88>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	1c18      	adds	r0, r3, #0
 8004d4e:	f7fb fbc9 	bl	80004e4 <__aeabi_f2uiz>
 8004d52:	0003      	movs	r3, r0
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	197b      	adds	r3, r7, r5
 8004d58:	705a      	strb	r2, [r3, #1]
			trama[2]=(temperature - trama[1])*100;
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <enviar_tmp_task+0x88>)
 8004d5c:	681c      	ldr	r4, [r3, #0]
 8004d5e:	197b      	adds	r3, r7, r5
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7fc fa7c 	bl	8001260 <__aeabi_i2f>
 8004d68:	1c03      	adds	r3, r0, #0
 8004d6a:	1c19      	adds	r1, r3, #0
 8004d6c:	1c20      	adds	r0, r4, #0
 8004d6e:	f7fc f893 	bl	8000e98 <__aeabi_fsub>
 8004d72:	1c03      	adds	r3, r0, #0
 8004d74:	490f      	ldr	r1, [pc, #60]	; (8004db4 <enviar_tmp_task+0x8c>)
 8004d76:	1c18      	adds	r0, r3, #0
 8004d78:	f7fb ff5c 	bl	8000c34 <__aeabi_fmul>
 8004d7c:	1c03      	adds	r3, r0, #0
 8004d7e:	1c18      	adds	r0, r3, #0
 8004d80:	f7fb fbb0 	bl	80004e4 <__aeabi_f2uiz>
 8004d84:	0003      	movs	r3, r0
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	197b      	adds	r3, r7, r5
 8004d8a:	709a      	strb	r2, [r3, #2]
			trama[3]=0xE0;
 8004d8c:	197b      	adds	r3, r7, r5
 8004d8e:	22e0      	movs	r2, #224	; 0xe0
 8004d90:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart2, trama, 4);
 8004d92:	1979      	adds	r1, r7, r5
 8004d94:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <enviar_tmp_task+0x90>)
 8004d96:	2204      	movs	r2, #4
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f005 f9dd 	bl	800a158 <HAL_UART_Transmit_IT>

	    osDelay(periodo_TEMP);
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <enviar_tmp_task+0x94>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f006 fd44 	bl	800b830 <osDelay>
		  osSemaphoreAcquire(uart_tx_semHandle, osWaitForever);
 8004da8:	e7c2      	b.n	8004d30 <enviar_tmp_task+0x8>
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	200032ec 	.word	0x200032ec
 8004db0:	20003298 	.word	0x20003298
 8004db4:	42c80000 	.word	0x42c80000
 8004db8:	2000339c 	.word	0x2000339c
 8004dbc:	20000018 	.word	0x20000018

08004dc0 <oled_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_oled_Task */
void oled_Task(void *argument)
{
 8004dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dc2:	b091      	sub	sp, #68	; 0x44
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN oled_Task */
	/* Infinite loop */
	uint8_t y = 0;
 8004dc8:	233f      	movs	r3, #63	; 0x3f
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
	float vel_pp;
	int entera_TEMP, decimal_TEMP, temp, entera_PP, decimal_PP;
	ssd1306_Fill(Black);
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	f000 fb61 	bl	8005498 <ssd1306_Fill>
	char msg[28];

	  for(;;)
	  {
		  switch(info){
 8004dd6:	4b5a      	ldr	r3, [pc, #360]	; (8004f40 <oled_Task+0x180>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <oled_Task+0x24>
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d006      	beq.n	8004df0 <oled_Task+0x30>
 8004de2:	e0a7      	b.n	8004f34 <oled_Task+0x174>
			  case 0:
				ssd1306_Fill(Black);
 8004de4:	2000      	movs	r0, #0
 8004de6:	f000 fb57 	bl	8005498 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8004dea:	f000 fb79 	bl	80054e0 <ssd1306_UpdateScreen>
				  break;
 8004dee:	e0a1      	b.n	8004f34 <oled_Task+0x174>
			  case 1:
				ssd1306_Fill(Black);
 8004df0:	2000      	movs	r0, #0
 8004df2:	f000 fb51 	bl	8005498 <ssd1306_Fill>

				y=0;
 8004df6:	253f      	movs	r5, #63	; 0x3f
 8004df8:	197b      	adds	r3, r7, r5
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
				ssd1306_SetCursor(2, y);
 8004dfe:	197b      	adds	r3, r7, r5
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	0019      	movs	r1, r3
 8004e04:	2002      	movs	r0, #2
 8004e06:	f000 fcbd 	bl	8005784 <ssd1306_SetCursor>
				entera_TEMP = temperature;
 8004e0a:	4b4e      	ldr	r3, [pc, #312]	; (8004f44 <oled_Task+0x184>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1c18      	adds	r0, r3, #0
 8004e10:	f7fc fa06 	bl	8001220 <__aeabi_f2iz>
 8004e14:	0003      	movs	r3, r0
 8004e16:	63bb      	str	r3, [r7, #56]	; 0x38
				decimal_TEMP=(temperature - entera_TEMP)*100;
 8004e18:	4b4a      	ldr	r3, [pc, #296]	; (8004f44 <oled_Task+0x184>)
 8004e1a:	681c      	ldr	r4, [r3, #0]
 8004e1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e1e:	f7fc fa1f 	bl	8001260 <__aeabi_i2f>
 8004e22:	1c03      	adds	r3, r0, #0
 8004e24:	1c19      	adds	r1, r3, #0
 8004e26:	1c20      	adds	r0, r4, #0
 8004e28:	f7fc f836 	bl	8000e98 <__aeabi_fsub>
 8004e2c:	1c03      	adds	r3, r0, #0
 8004e2e:	4946      	ldr	r1, [pc, #280]	; (8004f48 <oled_Task+0x188>)
 8004e30:	1c18      	adds	r0, r3, #0
 8004e32:	f7fb feff 	bl	8000c34 <__aeabi_fmul>
 8004e36:	1c03      	adds	r3, r0, #0
 8004e38:	1c18      	adds	r0, r3, #0
 8004e3a:	f7fc f9f1 	bl	8001220 <__aeabi_f2iz>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
				sprintf(msg, "Temperatura: %d.%dC", entera_TEMP, decimal_TEMP);
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e46:	4941      	ldr	r1, [pc, #260]	; (8004f4c <oled_Task+0x18c>)
 8004e48:	2608      	movs	r6, #8
 8004e4a:	19b8      	adds	r0, r7, r6
 8004e4c:	f009 fe68 	bl	800eb20 <siprintf>
				ssd1306_WriteString(msg, Font_7x10, White);
 8004e50:	4a3f      	ldr	r2, [pc, #252]	; (8004f50 <oled_Task+0x190>)
 8004e52:	19b8      	adds	r0, r7, r6
 8004e54:	2301      	movs	r3, #1
 8004e56:	6811      	ldr	r1, [r2, #0]
 8004e58:	6852      	ldr	r2, [r2, #4]
 8004e5a:	f000 fc69 	bl	8005730 <ssd1306_WriteString>

				y += 10;
 8004e5e:	197b      	adds	r3, r7, r5
 8004e60:	197a      	adds	r2, r7, r5
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	320a      	adds	r2, #10
 8004e66:	701a      	strb	r2, [r3, #0]
				ssd1306_SetCursor(2, y);
 8004e68:	197b      	adds	r3, r7, r5
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	2002      	movs	r0, #2
 8004e70:	f000 fc88 	bl	8005784 <ssd1306_SetCursor>
				temp=grados;
 8004e74:	4b37      	ldr	r3, [pc, #220]	; (8004f54 <oled_Task+0x194>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	1c18      	adds	r0, r3, #0
 8004e7a:	f7fc f9d1 	bl	8001220 <__aeabi_f2iz>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	633b      	str	r3, [r7, #48]	; 0x30
				sprintf(msg, "Posicion servo: %d ", temp);
 8004e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e84:	4934      	ldr	r1, [pc, #208]	; (8004f58 <oled_Task+0x198>)
 8004e86:	19bb      	adds	r3, r7, r6
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f009 fe49 	bl	800eb20 <siprintf>
				ssd1306_WriteString(msg, Font_7x10, White);
 8004e8e:	4a30      	ldr	r2, [pc, #192]	; (8004f50 <oled_Task+0x190>)
 8004e90:	19b8      	adds	r0, r7, r6
 8004e92:	2301      	movs	r3, #1
 8004e94:	6811      	ldr	r1, [r2, #0]
 8004e96:	6852      	ldr	r2, [r2, #4]
 8004e98:	f000 fc4a 	bl	8005730 <ssd1306_WriteString>

				y += 10;
 8004e9c:	197b      	adds	r3, r7, r5
 8004e9e:	197a      	adds	r2, r7, r5
 8004ea0:	7812      	ldrb	r2, [r2, #0]
 8004ea2:	320a      	adds	r2, #10
 8004ea4:	701a      	strb	r2, [r3, #0]
				ssd1306_SetCursor(2, y);
 8004ea6:	197b      	adds	r3, r7, r5
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	0019      	movs	r1, r3
 8004eac:	2002      	movs	r0, #2
 8004eae:	f000 fc69 	bl	8005784 <ssd1306_SetCursor>
				vel_pp=(60*1000)/(2048.0*periodo);
 8004eb2:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <oled_Task+0x19c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7fd ff72 	bl	8002da0 <__aeabi_i2d>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <oled_Task+0x1a0>)
 8004ec0:	f7fd f97e 	bl	80021c0 <__aeabi_dmul>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	000c      	movs	r4, r1
 8004ec8:	001a      	movs	r2, r3
 8004eca:	0023      	movs	r3, r4
 8004ecc:	2000      	movs	r0, #0
 8004ece:	4925      	ldr	r1, [pc, #148]	; (8004f64 <oled_Task+0x1a4>)
 8004ed0:	f7fc fd6c 	bl	80019ac <__aeabi_ddiv>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	000c      	movs	r4, r1
 8004ed8:	0018      	movs	r0, r3
 8004eda:	0021      	movs	r1, r4
 8004edc:	f7fd ffec 	bl	8002eb8 <__aeabi_d2f>
 8004ee0:	1c03      	adds	r3, r0, #0
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
				//vel_pp=(2*3.14)/vel_pp;

				entera_PP = vel_pp;
 8004ee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ee6:	f7fc f99b 	bl	8001220 <__aeabi_f2iz>
 8004eea:	0003      	movs	r3, r0
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
				decimal_PP=(vel_pp - entera_PP)*100;
 8004eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef0:	f7fc f9b6 	bl	8001260 <__aeabi_i2f>
 8004ef4:	1c03      	adds	r3, r0, #0
 8004ef6:	1c19      	adds	r1, r3, #0
 8004ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004efa:	f7fb ffcd 	bl	8000e98 <__aeabi_fsub>
 8004efe:	1c03      	adds	r3, r0, #0
 8004f00:	4911      	ldr	r1, [pc, #68]	; (8004f48 <oled_Task+0x188>)
 8004f02:	1c18      	adds	r0, r3, #0
 8004f04:	f7fb fe96 	bl	8000c34 <__aeabi_fmul>
 8004f08:	1c03      	adds	r3, r0, #0
 8004f0a:	1c18      	adds	r0, r3, #0
 8004f0c:	f7fc f988 	bl	8001220 <__aeabi_f2iz>
 8004f10:	0003      	movs	r3, r0
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
				sprintf(msg, "Velocidad: %d.%d", entera_PP, decimal_PP);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f18:	4913      	ldr	r1, [pc, #76]	; (8004f68 <oled_Task+0x1a8>)
 8004f1a:	19b8      	adds	r0, r7, r6
 8004f1c:	f009 fe00 	bl	800eb20 <siprintf>
				ssd1306_WriteString(msg, Font_7x10, White);
 8004f20:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <oled_Task+0x190>)
 8004f22:	19b8      	adds	r0, r7, r6
 8004f24:	2301      	movs	r3, #1
 8004f26:	6811      	ldr	r1, [r2, #0]
 8004f28:	6852      	ldr	r2, [r2, #4]
 8004f2a:	f000 fc01 	bl	8005730 <ssd1306_WriteString>

				ssd1306_UpdateScreen();
 8004f2e:	f000 fad7 	bl	80054e0 <ssd1306_UpdateScreen>
				  break;
 8004f32:	46c0      	nop			; (mov r8, r8)
		  }
		osDelay(500);
 8004f34:	23fa      	movs	r3, #250	; 0xfa
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f006 fc79 	bl	800b830 <osDelay>
		  switch(info){
 8004f3e:	e74a      	b.n	8004dd6 <oled_Task+0x16>
 8004f40:	200000b1 	.word	0x200000b1
 8004f44:	20003298 	.word	0x20003298
 8004f48:	42c80000 	.word	0x42c80000
 8004f4c:	0800f2ac 	.word	0x0800f2ac
 8004f50:	2000001c 	.word	0x2000001c
 8004f54:	20003328 	.word	0x20003328
 8004f58:	0800f2c0 	.word	0x0800f2c0
 8004f5c:	20000010 	.word	0x20000010
 8004f60:	40a00000 	.word	0x40a00000
 8004f64:	40ed4c00 	.word	0x40ed4c00
 8004f68:	0800f2d4 	.word	0x0800f2d4

08004f6c <CAN_remote_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_remote_task */
void CAN_remote_task(void *argument)
{
 8004f6c:	b5b0      	push	{r4, r5, r7, lr}
 8004f6e:	b090      	sub	sp, #64	; 0x40
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_remote_task */
	uint8_t tx_buffer[54], i=0;
 8004f74:	213f      	movs	r1, #63	; 0x3f
 8004f76:	187b      	adds	r3, r7, r1
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
	bool datos_rmt=false;
 8004f7c:	233e      	movs	r3, #62	; 0x3e
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]

	for (i=0; i<54; i++) tx_buffer[i]=0;
 8004f84:	187b      	adds	r3, r7, r1
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e00b      	b.n	8004fa4 <CAN_remote_task+0x38>
 8004f8c:	203f      	movs	r0, #63	; 0x3f
 8004f8e:	183b      	adds	r3, r7, r0
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2208      	movs	r2, #8
 8004f94:	18ba      	adds	r2, r7, r2
 8004f96:	2100      	movs	r1, #0
 8004f98:	54d1      	strb	r1, [r2, r3]
 8004f9a:	183b      	adds	r3, r7, r0
 8004f9c:	781a      	ldrb	r2, [r3, #0]
 8004f9e:	183b      	adds	r3, r7, r0
 8004fa0:	3201      	adds	r2, #1
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	233f      	movs	r3, #63	; 0x3f
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b35      	cmp	r3, #53	; 0x35
 8004fac:	d9ee      	bls.n	8004f8c <CAN_remote_task+0x20>
	if( CANSPI_Initialize(CAN1)) {
 8004fae:	4bc5      	ldr	r3, [pc, #788]	; (80052c4 <CAN_remote_task+0x358>)
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7fe f845 	bl	8003040 <CANSPI_Initialize>
 8004fb6:	1e03      	subs	r3, r0, #0
 8004fb8:	d116      	bne.n	8004fe8 <CAN_remote_task+0x7c>
			sprintf(tx_buffer, "CAN1 sending Msg...\n\r");
			HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));*/
	  }
	  else
	  {
			osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8004fba:	4bc3      	ldr	r3, [pc, #780]	; (80052c8 <CAN_remote_task+0x35c>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	425b      	negs	r3, r3
 8004fc2:	0019      	movs	r1, r3
 8004fc4:	0010      	movs	r0, r2
 8004fc6:	f006 fcfd 	bl	800b9c4 <osSemaphoreAcquire>
			sprintf(tx_buffer, "Error CAN1 initiali\n\r");
 8004fca:	2108      	movs	r1, #8
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	4abf      	ldr	r2, [pc, #764]	; (80052cc <CAN_remote_task+0x360>)
 8004fd0:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004fd2:	c331      	stmia	r3!, {r0, r4, r5}
 8004fd4:	ca11      	ldmia	r2!, {r0, r4}
 8004fd6:	c311      	stmia	r3!, {r0, r4}
 8004fd8:	8812      	ldrh	r2, [r2, #0]
 8004fda:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8004fdc:	1879      	adds	r1, r7, r1
 8004fde:	4bbc      	ldr	r3, [pc, #752]	; (80052d0 <CAN_remote_task+0x364>)
 8004fe0:	2236      	movs	r2, #54	; 0x36
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f005 f8b8 	bl	800a158 <HAL_UART_Transmit_IT>
	  }
	  osDelay(1000);
 8004fe8:	23fa      	movs	r3, #250	; 0xfa
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	0018      	movs	r0, r3
 8004fee:	f006 fc1f 	bl	800b830 <osDelay>
	  //for (i=0; i<54; i++) tx_buffer[i]=0;
	  if (CANSPI_Initialize(CAN2)) {
 8004ff2:	4bb8      	ldr	r3, [pc, #736]	; (80052d4 <CAN_remote_task+0x368>)
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7fe f823 	bl	8003040 <CANSPI_Initialize>
 8004ffa:	1e03      	subs	r3, r0, #0
 8004ffc:	d116      	bne.n	800502c <CAN_remote_task+0xc0>
			sprintf(tx_buffer, "CAN2 sending Msg...\n\r");
			HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));*/
	  }
	  else
	  {
			osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8004ffe:	4bb2      	ldr	r3, [pc, #712]	; (80052c8 <CAN_remote_task+0x35c>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	2301      	movs	r3, #1
 8005004:	425b      	negs	r3, r3
 8005006:	0019      	movs	r1, r3
 8005008:	0010      	movs	r0, r2
 800500a:	f006 fcdb 	bl	800b9c4 <osSemaphoreAcquire>
			sprintf(tx_buffer, "Error CAN2 initiali\n\r");
 800500e:	2108      	movs	r1, #8
 8005010:	187b      	adds	r3, r7, r1
 8005012:	4ab1      	ldr	r2, [pc, #708]	; (80052d8 <CAN_remote_task+0x36c>)
 8005014:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005016:	c331      	stmia	r3!, {r0, r4, r5}
 8005018:	ca11      	ldmia	r2!, {r0, r4}
 800501a:	c311      	stmia	r3!, {r0, r4}
 800501c:	8812      	ldrh	r2, [r2, #0]
 800501e:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8005020:	1879      	adds	r1, r7, r1
 8005022:	4bab      	ldr	r3, [pc, #684]	; (80052d0 <CAN_remote_task+0x364>)
 8005024:	2236      	movs	r2, #54	; 0x36
 8005026:	0018      	movs	r0, r3
 8005028:	f005 f896 	bl	800a158 <HAL_UART_Transmit_IT>

	  }
	  osDelay(1000);
 800502c:	23fa      	movs	r3, #250	; 0xfa
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	0018      	movs	r0, r3
 8005032:	f006 fbfd 	bl	800b830 <osDelay>

	  /* Infinite loop */
	  for(;;)
	  {
		  //NOSOTROS SOMOS B
		  if(activar_remota==true){
 8005036:	4ba9      	ldr	r3, [pc, #676]	; (80052dc <CAN_remote_task+0x370>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d035      	beq.n	80050aa <CAN_remote_task+0x13e>
			  	osSemaphoreAcquire(CAN_semHandle, portMAX_DELAY);
 800503e:	4ba8      	ldr	r3, [pc, #672]	; (80052e0 <CAN_remote_task+0x374>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	2301      	movs	r3, #1
 8005044:	425b      	negs	r3, r3
 8005046:	0019      	movs	r1, r3
 8005048:	0010      	movs	r0, r2
 800504a:	f006 fcbb 	bl	800b9c4 <osSemaphoreAcquire>
				CANSPI_CL_Flag_Int(CAN1);
 800504e:	4b9d      	ldr	r3, [pc, #628]	; (80052c4 <CAN_remote_task+0x358>)
 8005050:	0018      	movs	r0, r3
 8005052:	f7fd ffe7 	bl	8003024 <CANSPI_CL_Flag_Int>
				txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8005056:	4ba3      	ldr	r3, [pc, #652]	; (80052e4 <CAN_remote_task+0x378>)
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
				txMessage.frame.id = 0x11;   //QUEREMOS QUE "A" (CAN 2) NOS MANDE LA INFORMACION
 800505c:	4ba1      	ldr	r3, [pc, #644]	; (80052e4 <CAN_remote_task+0x378>)
 800505e:	2211      	movs	r2, #17
 8005060:	605a      	str	r2, [r3, #4]
				txMessage.frame.dlc = 8;		// LE ENVIAMOS A "A" (CAN 2) UN .id = 0x11
 8005062:	4ba0      	ldr	r3, [pc, #640]	; (80052e4 <CAN_remote_task+0x378>)
 8005064:	2208      	movs	r2, #8
 8005066:	721a      	strb	r2, [r3, #8]
				txMessage.frame.data0 = 0;		//PARA QUE "A" (CAN 2) NOS PASE LOS DATOS
 8005068:	4b9e      	ldr	r3, [pc, #632]	; (80052e4 <CAN_remote_task+0x378>)
 800506a:	2200      	movs	r2, #0
 800506c:	725a      	strb	r2, [r3, #9]
				txMessage.frame.data1 = 0;
 800506e:	4b9d      	ldr	r3, [pc, #628]	; (80052e4 <CAN_remote_task+0x378>)
 8005070:	2200      	movs	r2, #0
 8005072:	729a      	strb	r2, [r3, #10]
				txMessage.frame.data2 = 0;
 8005074:	4b9b      	ldr	r3, [pc, #620]	; (80052e4 <CAN_remote_task+0x378>)
 8005076:	2200      	movs	r2, #0
 8005078:	72da      	strb	r2, [r3, #11]
				txMessage.frame.data3 = 0;
 800507a:	4b9a      	ldr	r3, [pc, #616]	; (80052e4 <CAN_remote_task+0x378>)
 800507c:	2200      	movs	r2, #0
 800507e:	731a      	strb	r2, [r3, #12]
				txMessage.frame.data4 = 0;
 8005080:	4b98      	ldr	r3, [pc, #608]	; (80052e4 <CAN_remote_task+0x378>)
 8005082:	2200      	movs	r2, #0
 8005084:	735a      	strb	r2, [r3, #13]
				txMessage.frame.data5 = 0;
 8005086:	4b97      	ldr	r3, [pc, #604]	; (80052e4 <CAN_remote_task+0x378>)
 8005088:	2200      	movs	r2, #0
 800508a:	739a      	strb	r2, [r3, #14]
				txMessage.frame.data6 = 0;
 800508c:	4b95      	ldr	r3, [pc, #596]	; (80052e4 <CAN_remote_task+0x378>)
 800508e:	2200      	movs	r2, #0
 8005090:	73da      	strb	r2, [r3, #15]
				txMessage.frame.data7 = 0;
 8005092:	4b94      	ldr	r3, [pc, #592]	; (80052e4 <CAN_remote_task+0x378>)
 8005094:	2200      	movs	r2, #0
 8005096:	741a      	strb	r2, [r3, #16]
				CANSPI_Transmit(CAN1, &txMessage); //Se lo mando al CAN 2
 8005098:	4a92      	ldr	r2, [pc, #584]	; (80052e4 <CAN_remote_task+0x378>)
 800509a:	4b8a      	ldr	r3, [pc, #552]	; (80052c4 <CAN_remote_task+0x358>)
 800509c:	0011      	movs	r1, r2
 800509e:	0018      	movs	r0, r3
 80050a0:	f7fe f8c0 	bl	8003224 <CANSPI_Transmit>

				activar_remota=false;
 80050a4:	4b8d      	ldr	r3, [pc, #564]	; (80052dc <CAN_remote_task+0x370>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
		  }
		    if(CANSPI_Receive(CAN1, &rxMessage))
 80050aa:	4a8f      	ldr	r2, [pc, #572]	; (80052e8 <CAN_remote_task+0x37c>)
 80050ac:	4b85      	ldr	r3, [pc, #532]	; (80052c4 <CAN_remote_task+0x358>)
 80050ae:	0011      	movs	r1, r2
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7fe f94b 	bl	800334c <CANSPI_Receive>
 80050b6:	1e03      	subs	r3, r0, #0
 80050b8:	d032      	beq.n	8005120 <CAN_remote_task+0x1b4>
		    {
				if(rxMessage.frame.id==0x15 && rxMessage.frame.dlc==8 &&  rxMessage.frame.data5==0x1 &&
 80050ba:	4b8b      	ldr	r3, [pc, #556]	; (80052e8 <CAN_remote_task+0x37c>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b15      	cmp	r3, #21
 80050c0:	d000      	beq.n	80050c4 <CAN_remote_task+0x158>
 80050c2:	e060      	b.n	8005186 <CAN_remote_task+0x21a>
 80050c4:	4b88      	ldr	r3, [pc, #544]	; (80052e8 <CAN_remote_task+0x37c>)
 80050c6:	7a1b      	ldrb	r3, [r3, #8]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d15c      	bne.n	8005186 <CAN_remote_task+0x21a>
 80050cc:	4b86      	ldr	r3, [pc, #536]	; (80052e8 <CAN_remote_task+0x37c>)
 80050ce:	7b9b      	ldrb	r3, [r3, #14]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d158      	bne.n	8005186 <CAN_remote_task+0x21a>
						rxMessage.frame.data6==0xC && rxMessage.frame.data7==0x1){
 80050d4:	4b84      	ldr	r3, [pc, #528]	; (80052e8 <CAN_remote_task+0x37c>)
 80050d6:	7bdb      	ldrb	r3, [r3, #15]
				if(rxMessage.frame.id==0x15 && rxMessage.frame.dlc==8 &&  rxMessage.frame.data5==0x1 &&
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d154      	bne.n	8005186 <CAN_remote_task+0x21a>
						rxMessage.frame.data6==0xC && rxMessage.frame.data7==0x1){
 80050dc:	4b82      	ldr	r3, [pc, #520]	; (80052e8 <CAN_remote_task+0x37c>)
 80050de:	7c1b      	ldrb	r3, [r3, #16]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d150      	bne.n	8005186 <CAN_remote_task+0x21a>
					//RECIBIMOS LA INFORMACIÓN DE A "CAN 2"
					datos_rmt=true;
 80050e4:	233e      	movs	r3, #62	; 0x3e
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	2201      	movs	r2, #1
 80050ea:	701a      	strb	r2, [r3, #0]
					temp_rmt_ent=rxMessage.frame.data0;
 80050ec:	4b7e      	ldr	r3, [pc, #504]	; (80052e8 <CAN_remote_task+0x37c>)
 80050ee:	7a5b      	ldrb	r3, [r3, #9]
 80050f0:	001a      	movs	r2, r3
 80050f2:	4b7e      	ldr	r3, [pc, #504]	; (80052ec <CAN_remote_task+0x380>)
 80050f4:	601a      	str	r2, [r3, #0]
					temp_rmt_dec=rxMessage.frame.data1;
 80050f6:	4b7c      	ldr	r3, [pc, #496]	; (80052e8 <CAN_remote_task+0x37c>)
 80050f8:	7a9b      	ldrb	r3, [r3, #10]
 80050fa:	001a      	movs	r2, r3
 80050fc:	4b7c      	ldr	r3, [pc, #496]	; (80052f0 <CAN_remote_task+0x384>)
 80050fe:	601a      	str	r2, [r3, #0]
					servo_rmt = rxMessage.frame.data2;
 8005100:	4b79      	ldr	r3, [pc, #484]	; (80052e8 <CAN_remote_task+0x37c>)
 8005102:	7adb      	ldrb	r3, [r3, #11]
 8005104:	001a      	movs	r2, r3
 8005106:	4b7b      	ldr	r3, [pc, #492]	; (80052f4 <CAN_remote_task+0x388>)
 8005108:	601a      	str	r2, [r3, #0]
					rpm_rmt_ent = rxMessage.frame.data3;
 800510a:	4b77      	ldr	r3, [pc, #476]	; (80052e8 <CAN_remote_task+0x37c>)
 800510c:	7b1b      	ldrb	r3, [r3, #12]
 800510e:	001a      	movs	r2, r3
 8005110:	4b79      	ldr	r3, [pc, #484]	; (80052f8 <CAN_remote_task+0x38c>)
 8005112:	601a      	str	r2, [r3, #0]
					rpm_rmt_dec = rxMessage.frame.data4;
 8005114:	4b74      	ldr	r3, [pc, #464]	; (80052e8 <CAN_remote_task+0x37c>)
 8005116:	7b5b      	ldrb	r3, [r3, #13]
 8005118:	001a      	movs	r2, r3
 800511a:	4b78      	ldr	r3, [pc, #480]	; (80052fc <CAN_remote_task+0x390>)
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e032      	b.n	8005186 <CAN_remote_task+0x21a>
				}
		    } else
		    if(CANSPI_Receive(CAN2, &rxMessage))
 8005120:	4a71      	ldr	r2, [pc, #452]	; (80052e8 <CAN_remote_task+0x37c>)
 8005122:	4b6c      	ldr	r3, [pc, #432]	; (80052d4 <CAN_remote_task+0x368>)
 8005124:	0011      	movs	r1, r2
 8005126:	0018      	movs	r0, r3
 8005128:	f7fe f910 	bl	800334c <CANSPI_Receive>
 800512c:	1e03      	subs	r3, r0, #0
 800512e:	d02a      	beq.n	8005186 <CAN_remote_task+0x21a>
		    {
				if(rxMessage.frame.id==0x11 && rxMessage.frame.dlc==8 && rxMessage.frame.data0==0 &&
 8005130:	4b6d      	ldr	r3, [pc, #436]	; (80052e8 <CAN_remote_task+0x37c>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b11      	cmp	r3, #17
 8005136:	d126      	bne.n	8005186 <CAN_remote_task+0x21a>
 8005138:	4b6b      	ldr	r3, [pc, #428]	; (80052e8 <CAN_remote_task+0x37c>)
 800513a:	7a1b      	ldrb	r3, [r3, #8]
 800513c:	2b08      	cmp	r3, #8
 800513e:	d122      	bne.n	8005186 <CAN_remote_task+0x21a>
 8005140:	4b69      	ldr	r3, [pc, #420]	; (80052e8 <CAN_remote_task+0x37c>)
 8005142:	7a5b      	ldrb	r3, [r3, #9]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11e      	bne.n	8005186 <CAN_remote_task+0x21a>
					rxMessage.frame.data1==0 && rxMessage.frame.data2==0 && rxMessage.frame.data3==0 &&
 8005148:	4b67      	ldr	r3, [pc, #412]	; (80052e8 <CAN_remote_task+0x37c>)
 800514a:	7a9b      	ldrb	r3, [r3, #10]
				if(rxMessage.frame.id==0x11 && rxMessage.frame.dlc==8 && rxMessage.frame.data0==0 &&
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11a      	bne.n	8005186 <CAN_remote_task+0x21a>
					rxMessage.frame.data1==0 && rxMessage.frame.data2==0 && rxMessage.frame.data3==0 &&
 8005150:	4b65      	ldr	r3, [pc, #404]	; (80052e8 <CAN_remote_task+0x37c>)
 8005152:	7adb      	ldrb	r3, [r3, #11]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d116      	bne.n	8005186 <CAN_remote_task+0x21a>
 8005158:	4b63      	ldr	r3, [pc, #396]	; (80052e8 <CAN_remote_task+0x37c>)
 800515a:	7b1b      	ldrb	r3, [r3, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d112      	bne.n	8005186 <CAN_remote_task+0x21a>
					rxMessage.frame.data4==0 && rxMessage.frame.data5==0 && rxMessage.frame.data6==0 &&
 8005160:	4b61      	ldr	r3, [pc, #388]	; (80052e8 <CAN_remote_task+0x37c>)
 8005162:	7b5b      	ldrb	r3, [r3, #13]
					rxMessage.frame.data1==0 && rxMessage.frame.data2==0 && rxMessage.frame.data3==0 &&
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10e      	bne.n	8005186 <CAN_remote_task+0x21a>
					rxMessage.frame.data4==0 && rxMessage.frame.data5==0 && rxMessage.frame.data6==0 &&
 8005168:	4b5f      	ldr	r3, [pc, #380]	; (80052e8 <CAN_remote_task+0x37c>)
 800516a:	7b9b      	ldrb	r3, [r3, #14]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <CAN_remote_task+0x21a>
 8005170:	4b5d      	ldr	r3, [pc, #372]	; (80052e8 <CAN_remote_task+0x37c>)
 8005172:	7bdb      	ldrb	r3, [r3, #15]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <CAN_remote_task+0x21a>
					rxMessage.frame.data7==0){
 8005178:	4b5b      	ldr	r3, [pc, #364]	; (80052e8 <CAN_remote_task+0x37c>)
 800517a:	7c1b      	ldrb	r3, [r3, #16]
					rxMessage.frame.data4==0 && rxMessage.frame.data5==0 && rxMessage.frame.data6==0 &&
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <CAN_remote_task+0x21a>
					// (A)CAN 2 RECIBE SU ID=0x11 Y ACTIVA LA BANDERA PARA ENVIAR SU INFORMACIÓN EN REMOTO
					flag_man_remota=true;
 8005180:	4b5f      	ldr	r3, [pc, #380]	; (8005300 <CAN_remote_task+0x394>)
 8005182:	2201      	movs	r2, #1
 8005184:	701a      	strb	r2, [r3, #0]
				}
		    }
		    if(flag_man_remota== true){
 8005186:	4b5e      	ldr	r3, [pc, #376]	; (8005300 <CAN_remote_task+0x394>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d100      	bne.n	8005190 <CAN_remote_task+0x224>
 800518e:	e093      	b.n	80052b8 <CAN_remote_task+0x34c>
				//osSemaphoreAcquire(CAN_semHandle, portMAX_DELAY);
		    	//CAN 2 NOS ENVIA LA INFORMACIÓN
				CANSPI_CL_Flag_Int(CAN2);
 8005190:	4b50      	ldr	r3, [pc, #320]	; (80052d4 <CAN_remote_task+0x368>)
 8005192:	0018      	movs	r0, r3
 8005194:	f7fd ff46 	bl	8003024 <CANSPI_CL_Flag_Int>
				txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8005198:	4b52      	ldr	r3, [pc, #328]	; (80052e4 <CAN_remote_task+0x378>)
 800519a:	2201      	movs	r2, #1
 800519c:	701a      	strb	r2, [r3, #0]
				txMessage.frame.id = 0x15;
 800519e:	4b51      	ldr	r3, [pc, #324]	; (80052e4 <CAN_remote_task+0x378>)
 80051a0:	2215      	movs	r2, #21
 80051a2:	605a      	str	r2, [r3, #4]
				txMessage.frame.dlc = 8;
 80051a4:	4b4f      	ldr	r3, [pc, #316]	; (80052e4 <CAN_remote_task+0x378>)
 80051a6:	2208      	movs	r2, #8
 80051a8:	721a      	strb	r2, [r3, #8]
				txMessage.frame.data0 = temperature;
 80051aa:	4b56      	ldr	r3, [pc, #344]	; (8005304 <CAN_remote_task+0x398>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	1c18      	adds	r0, r3, #0
 80051b0:	f7fb f998 	bl	80004e4 <__aeabi_f2uiz>
 80051b4:	0003      	movs	r3, r0
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	4b4a      	ldr	r3, [pc, #296]	; (80052e4 <CAN_remote_task+0x378>)
 80051ba:	725a      	strb	r2, [r3, #9]
				txMessage.frame.data1 = (temperature - txMessage.frame.data0)*100;
 80051bc:	4b51      	ldr	r3, [pc, #324]	; (8005304 <CAN_remote_task+0x398>)
 80051be:	681c      	ldr	r4, [r3, #0]
 80051c0:	4b48      	ldr	r3, [pc, #288]	; (80052e4 <CAN_remote_task+0x378>)
 80051c2:	7a5b      	ldrb	r3, [r3, #9]
 80051c4:	0018      	movs	r0, r3
 80051c6:	f7fc f84b 	bl	8001260 <__aeabi_i2f>
 80051ca:	1c03      	adds	r3, r0, #0
 80051cc:	1c19      	adds	r1, r3, #0
 80051ce:	1c20      	adds	r0, r4, #0
 80051d0:	f7fb fe62 	bl	8000e98 <__aeabi_fsub>
 80051d4:	1c03      	adds	r3, r0, #0
 80051d6:	494c      	ldr	r1, [pc, #304]	; (8005308 <CAN_remote_task+0x39c>)
 80051d8:	1c18      	adds	r0, r3, #0
 80051da:	f7fb fd2b 	bl	8000c34 <__aeabi_fmul>
 80051de:	1c03      	adds	r3, r0, #0
 80051e0:	1c18      	adds	r0, r3, #0
 80051e2:	f7fb f97f 	bl	80004e4 <__aeabi_f2uiz>
 80051e6:	0003      	movs	r3, r0
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	4b3e      	ldr	r3, [pc, #248]	; (80052e4 <CAN_remote_task+0x378>)
 80051ec:	729a      	strb	r2, [r3, #10]
				txMessage.frame.data2 = grados/*servo*/;
 80051ee:	4b47      	ldr	r3, [pc, #284]	; (800530c <CAN_remote_task+0x3a0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	1c18      	adds	r0, r3, #0
 80051f4:	f7fb f976 	bl	80004e4 <__aeabi_f2uiz>
 80051f8:	0003      	movs	r3, r0
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <CAN_remote_task+0x378>)
 80051fe:	72da      	strb	r2, [r3, #11]
				txMessage.frame.data3 =(60*1000)/(2048.0*periodo)/*vel entera*/;
 8005200:	4b43      	ldr	r3, [pc, #268]	; (8005310 <CAN_remote_task+0x3a4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	0018      	movs	r0, r3
 8005206:	f7fd fdcb 	bl	8002da0 <__aeabi_i2d>
 800520a:	2200      	movs	r2, #0
 800520c:	4b41      	ldr	r3, [pc, #260]	; (8005314 <CAN_remote_task+0x3a8>)
 800520e:	f7fc ffd7 	bl	80021c0 <__aeabi_dmul>
 8005212:	0003      	movs	r3, r0
 8005214:	000c      	movs	r4, r1
 8005216:	001a      	movs	r2, r3
 8005218:	0023      	movs	r3, r4
 800521a:	2000      	movs	r0, #0
 800521c:	493e      	ldr	r1, [pc, #248]	; (8005318 <CAN_remote_task+0x3ac>)
 800521e:	f7fc fbc5 	bl	80019ac <__aeabi_ddiv>
 8005222:	0003      	movs	r3, r0
 8005224:	000c      	movs	r4, r1
 8005226:	0018      	movs	r0, r3
 8005228:	0021      	movs	r1, r4
 800522a:	f7fb f973 	bl	8000514 <__aeabi_d2uiz>
 800522e:	0003      	movs	r3, r0
 8005230:	b2da      	uxtb	r2, r3
 8005232:	4b2c      	ldr	r3, [pc, #176]	; (80052e4 <CAN_remote_task+0x378>)
 8005234:	731a      	strb	r2, [r3, #12]
				txMessage.frame.data4 =((60*1000)/(2048.0*periodo)-txMessage.frame.data3)*100/*vel decimal*/;
 8005236:	4b36      	ldr	r3, [pc, #216]	; (8005310 <CAN_remote_task+0x3a4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	0018      	movs	r0, r3
 800523c:	f7fd fdb0 	bl	8002da0 <__aeabi_i2d>
 8005240:	2200      	movs	r2, #0
 8005242:	4b34      	ldr	r3, [pc, #208]	; (8005314 <CAN_remote_task+0x3a8>)
 8005244:	f7fc ffbc 	bl	80021c0 <__aeabi_dmul>
 8005248:	0003      	movs	r3, r0
 800524a:	000c      	movs	r4, r1
 800524c:	001a      	movs	r2, r3
 800524e:	0023      	movs	r3, r4
 8005250:	2000      	movs	r0, #0
 8005252:	4931      	ldr	r1, [pc, #196]	; (8005318 <CAN_remote_task+0x3ac>)
 8005254:	f7fc fbaa 	bl	80019ac <__aeabi_ddiv>
 8005258:	0003      	movs	r3, r0
 800525a:	000c      	movs	r4, r1
 800525c:	0025      	movs	r5, r4
 800525e:	001c      	movs	r4, r3
 8005260:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <CAN_remote_task+0x378>)
 8005262:	7b1b      	ldrb	r3, [r3, #12]
 8005264:	0018      	movs	r0, r3
 8005266:	f7fd fd9b 	bl	8002da0 <__aeabi_i2d>
 800526a:	0002      	movs	r2, r0
 800526c:	000b      	movs	r3, r1
 800526e:	0020      	movs	r0, r4
 8005270:	0029      	movs	r1, r5
 8005272:	f7fd fa17 	bl	80026a4 <__aeabi_dsub>
 8005276:	0003      	movs	r3, r0
 8005278:	000c      	movs	r4, r1
 800527a:	0018      	movs	r0, r3
 800527c:	0021      	movs	r1, r4
 800527e:	2200      	movs	r2, #0
 8005280:	4b26      	ldr	r3, [pc, #152]	; (800531c <CAN_remote_task+0x3b0>)
 8005282:	f7fc ff9d 	bl	80021c0 <__aeabi_dmul>
 8005286:	0003      	movs	r3, r0
 8005288:	000c      	movs	r4, r1
 800528a:	0018      	movs	r0, r3
 800528c:	0021      	movs	r1, r4
 800528e:	f7fb f941 	bl	8000514 <__aeabi_d2uiz>
 8005292:	0003      	movs	r3, r0
 8005294:	b2da      	uxtb	r2, r3
 8005296:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <CAN_remote_task+0x378>)
 8005298:	735a      	strb	r2, [r3, #13]
				txMessage.frame.data5 = 0x1;
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <CAN_remote_task+0x378>)
 800529c:	2201      	movs	r2, #1
 800529e:	739a      	strb	r2, [r3, #14]
				txMessage.frame.data6 = 0xC;
 80052a0:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <CAN_remote_task+0x378>)
 80052a2:	220c      	movs	r2, #12
 80052a4:	73da      	strb	r2, [r3, #15]
				txMessage.frame.data7 = 0x1;
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <CAN_remote_task+0x378>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	741a      	strb	r2, [r3, #16]
				CANSPI_Transmit(CAN2, &txMessage);
 80052ac:	4a0d      	ldr	r2, [pc, #52]	; (80052e4 <CAN_remote_task+0x378>)
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <CAN_remote_task+0x368>)
 80052b0:	0011      	movs	r1, r2
 80052b2:	0018      	movs	r0, r3
 80052b4:	f7fd ffb6 	bl	8003224 <CANSPI_Transmit>
		    }
		    osDelay(1000);
 80052b8:	23fa      	movs	r3, #250	; 0xfa
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	0018      	movs	r0, r3
 80052be:	f006 fab7 	bl	800b830 <osDelay>
		  if(activar_remota==true){
 80052c2:	e6b8      	b.n	8005036 <CAN_remote_task+0xca>
 80052c4:	20003334 	.word	0x20003334
 80052c8:	200032ec 	.word	0x200032ec
 80052cc:	0800f2e8 	.word	0x0800f2e8
 80052d0:	2000339c 	.word	0x2000339c
 80052d4:	200031dc 	.word	0x200031dc
 80052d8:	0800f300 	.word	0x0800f300
 80052dc:	200000b2 	.word	0x200000b2
 80052e0:	200032e4 	.word	0x200032e4
 80052e4:	200032fc 	.word	0x200032fc
 80052e8:	20003424 	.word	0x20003424
 80052ec:	20003478 	.word	0x20003478
 80052f0:	20003294 	.word	0x20003294
 80052f4:	2000331c 	.word	0x2000331c
 80052f8:	200032f4 	.word	0x200032f4
 80052fc:	2000328c 	.word	0x2000328c
 8005300:	200000b0 	.word	0x200000b0
 8005304:	20003298 	.word	0x20003298
 8005308:	42c80000 	.word	0x42c80000
 800530c:	20003328 	.word	0x20003328
 8005310:	20000010 	.word	0x20000010
 8005314:	40a00000 	.word	0x40a00000
 8005318:	40ed4c00 	.word	0x40ed4c00
 800531c:	40590000 	.word	0x40590000

08005320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d101      	bne.n	8005336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005332:	f000 fd81 	bl	8005e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	46bd      	mov	sp, r7
 800533a:	b002      	add	sp, #8
 800533c:	bd80      	pop	{r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	40012c00 	.word	0x40012c00

08005344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005348:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800534a:	e7fe      	b.n	800534a <Error_Handler+0x6>

0800534c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005350:	46c0      	nop			; (mov r8, r8)
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af04      	add	r7, sp, #16
 800535e:	0002      	movs	r2, r0
 8005360:	1dfb      	adds	r3, r7, #7
 8005362:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005364:	4808      	ldr	r0, [pc, #32]	; (8005388 <ssd1306_WriteCommand+0x30>)
 8005366:	2301      	movs	r3, #1
 8005368:	425b      	negs	r3, r3
 800536a:	9302      	str	r3, [sp, #8]
 800536c:	2301      	movs	r3, #1
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	1dfb      	adds	r3, r7, #7
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2301      	movs	r3, #1
 8005376:	2200      	movs	r2, #0
 8005378:	2178      	movs	r1, #120	; 0x78
 800537a:	f001 fe5f 	bl	800703c <HAL_I2C_Mem_Write>
}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	46bd      	mov	sp, r7
 8005382:	b002      	add	sp, #8
 8005384:	bd80      	pop	{r7, pc}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	20003240 	.word	0x20003240

0800538c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af04      	add	r7, sp, #16
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	4808      	ldr	r0, [pc, #32]	; (80053bc <ssd1306_WriteData+0x30>)
 800539c:	2201      	movs	r2, #1
 800539e:	4252      	negs	r2, r2
 80053a0:	9202      	str	r2, [sp, #8]
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	2301      	movs	r3, #1
 80053aa:	2240      	movs	r2, #64	; 0x40
 80053ac:	2178      	movs	r1, #120	; 0x78
 80053ae:	f001 fe45 	bl	800703c <HAL_I2C_Mem_Write>
}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b002      	add	sp, #8
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	20003240 	.word	0x20003240

080053c0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80053c4:	f7ff ffc2 	bl	800534c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80053c8:	2064      	movs	r0, #100	; 0x64
 80053ca:	f000 fd51 	bl	8005e70 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80053ce:	2000      	movs	r0, #0
 80053d0:	f000 fa0a 	bl	80057e8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80053d4:	2020      	movs	r0, #32
 80053d6:	f7ff ffbf 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80053da:	2000      	movs	r0, #0
 80053dc:	f7ff ffbc 	bl	8005358 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80053e0:	20b0      	movs	r0, #176	; 0xb0
 80053e2:	f7ff ffb9 	bl	8005358 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80053e6:	20c8      	movs	r0, #200	; 0xc8
 80053e8:	f7ff ffb6 	bl	8005358 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80053ec:	2000      	movs	r0, #0
 80053ee:	f7ff ffb3 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80053f2:	2010      	movs	r0, #16
 80053f4:	f7ff ffb0 	bl	8005358 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80053f8:	2040      	movs	r0, #64	; 0x40
 80053fa:	f7ff ffad 	bl	8005358 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80053fe:	20ff      	movs	r0, #255	; 0xff
 8005400:	f000 f9da 	bl	80057b8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005404:	20a1      	movs	r0, #161	; 0xa1
 8005406:	f7ff ffa7 	bl	8005358 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800540a:	20a6      	movs	r0, #166	; 0xa6
 800540c:	f7ff ffa4 	bl	8005358 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005410:	20a8      	movs	r0, #168	; 0xa8
 8005412:	f7ff ffa1 	bl	8005358 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005416:	203f      	movs	r0, #63	; 0x3f
 8005418:	f7ff ff9e 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800541c:	20a4      	movs	r0, #164	; 0xa4
 800541e:	f7ff ff9b 	bl	8005358 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005422:	20d3      	movs	r0, #211	; 0xd3
 8005424:	f7ff ff98 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005428:	2000      	movs	r0, #0
 800542a:	f7ff ff95 	bl	8005358 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800542e:	20d5      	movs	r0, #213	; 0xd5
 8005430:	f7ff ff92 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005434:	20f0      	movs	r0, #240	; 0xf0
 8005436:	f7ff ff8f 	bl	8005358 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800543a:	20d9      	movs	r0, #217	; 0xd9
 800543c:	f7ff ff8c 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005440:	2022      	movs	r0, #34	; 0x22
 8005442:	f7ff ff89 	bl	8005358 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005446:	20da      	movs	r0, #218	; 0xda
 8005448:	f7ff ff86 	bl	8005358 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800544c:	2012      	movs	r0, #18
 800544e:	f7ff ff83 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005452:	20db      	movs	r0, #219	; 0xdb
 8005454:	f7ff ff80 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005458:	2020      	movs	r0, #32
 800545a:	f7ff ff7d 	bl	8005358 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800545e:	208d      	movs	r0, #141	; 0x8d
 8005460:	f7ff ff7a 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005464:	2014      	movs	r0, #20
 8005466:	f7ff ff77 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800546a:	2001      	movs	r0, #1
 800546c:	f000 f9bc 	bl	80057e8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005470:	2000      	movs	r0, #0
 8005472:	f000 f811 	bl	8005498 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005476:	f000 f833 	bl	80054e0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <ssd1306_Init+0xd4>)
 800547c:	2200      	movs	r2, #0
 800547e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <ssd1306_Init+0xd4>)
 8005482:	2200      	movs	r2, #0
 8005484:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005486:	4b03      	ldr	r3, [pc, #12]	; (8005494 <ssd1306_Init+0xd4>)
 8005488:	2201      	movs	r2, #1
 800548a:	711a      	strb	r2, [r3, #4]
}
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	200004b4 	.word	0x200004b4

08005498 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	0002      	movs	r2, r0
 80054a0:	1dfb      	adds	r3, r7, #7
 80054a2:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	e00e      	b.n	80054c8 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80054aa:	1dfb      	adds	r3, r7, #7
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <ssd1306_Fill+0x1e>
 80054b2:	2100      	movs	r1, #0
 80054b4:	e000      	b.n	80054b8 <ssd1306_Fill+0x20>
 80054b6:	21ff      	movs	r1, #255	; 0xff
 80054b8:	4a07      	ldr	r2, [pc, #28]	; (80054d8 <ssd1306_Fill+0x40>)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	18d3      	adds	r3, r2, r3
 80054be:	1c0a      	adds	r2, r1, #0
 80054c0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3301      	adds	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a04      	ldr	r2, [pc, #16]	; (80054dc <ssd1306_Fill+0x44>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d9ec      	bls.n	80054aa <ssd1306_Fill+0x12>
    }
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b004      	add	sp, #16
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	200000b4 	.word	0x200000b4
 80054dc:	000003ff 	.word	0x000003ff

080054e0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80054e6:	1dfb      	adds	r3, r7, #7
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e01a      	b.n	8005524 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80054ee:	1dfb      	adds	r3, r7, #7
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	3b50      	subs	r3, #80	; 0x50
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7ff ff2e 	bl	8005358 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80054fc:	2000      	movs	r0, #0
 80054fe:	f7ff ff2b 	bl	8005358 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8005502:	2010      	movs	r0, #16
 8005504:	f7ff ff28 	bl	8005358 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005508:	1dfb      	adds	r3, r7, #7
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	01da      	lsls	r2, r3, #7
 800550e:	4b09      	ldr	r3, [pc, #36]	; (8005534 <ssd1306_UpdateScreen+0x54>)
 8005510:	18d3      	adds	r3, r2, r3
 8005512:	2180      	movs	r1, #128	; 0x80
 8005514:	0018      	movs	r0, r3
 8005516:	f7ff ff39 	bl	800538c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800551a:	1dfb      	adds	r3, r7, #7
 800551c:	781a      	ldrb	r2, [r3, #0]
 800551e:	1dfb      	adds	r3, r7, #7
 8005520:	3201      	adds	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	1dfb      	adds	r3, r7, #7
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b07      	cmp	r3, #7
 800552a:	d9e0      	bls.n	80054ee <ssd1306_UpdateScreen+0xe>
    }
}
 800552c:	46c0      	nop			; (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200000b4 	.word	0x200000b4

08005538 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	0004      	movs	r4, r0
 8005540:	0008      	movs	r0, r1
 8005542:	0011      	movs	r1, r2
 8005544:	1dfb      	adds	r3, r7, #7
 8005546:	1c22      	adds	r2, r4, #0
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	1dbb      	adds	r3, r7, #6
 800554c:	1c02      	adds	r2, r0, #0
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	1d7b      	adds	r3, r7, #5
 8005552:	1c0a      	adds	r2, r1, #0
 8005554:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005556:	1dfb      	adds	r3, r7, #7
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	b25b      	sxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	db47      	blt.n	80055f0 <ssd1306_DrawPixel+0xb8>
 8005560:	1dbb      	adds	r3, r7, #6
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b3f      	cmp	r3, #63	; 0x3f
 8005566:	d843      	bhi.n	80055f0 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005568:	1d7b      	adds	r3, r7, #5
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d11e      	bne.n	80055ae <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005570:	1dfb      	adds	r3, r7, #7
 8005572:	781a      	ldrb	r2, [r3, #0]
 8005574:	1dbb      	adds	r3, r7, #6
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	b2d8      	uxtb	r0, r3
 800557c:	0003      	movs	r3, r0
 800557e:	01db      	lsls	r3, r3, #7
 8005580:	18d3      	adds	r3, r2, r3
 8005582:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <ssd1306_DrawPixel+0xc0>)
 8005584:	5cd3      	ldrb	r3, [r2, r3]
 8005586:	b25a      	sxtb	r2, r3
 8005588:	1dbb      	adds	r3, r7, #6
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2107      	movs	r1, #7
 800558e:	400b      	ands	r3, r1
 8005590:	2101      	movs	r1, #1
 8005592:	4099      	lsls	r1, r3
 8005594:	000b      	movs	r3, r1
 8005596:	b25b      	sxtb	r3, r3
 8005598:	4313      	orrs	r3, r2
 800559a:	b259      	sxtb	r1, r3
 800559c:	1dfb      	adds	r3, r7, #7
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	0003      	movs	r3, r0
 80055a2:	01db      	lsls	r3, r3, #7
 80055a4:	18d3      	adds	r3, r2, r3
 80055a6:	b2c9      	uxtb	r1, r1
 80055a8:	4a13      	ldr	r2, [pc, #76]	; (80055f8 <ssd1306_DrawPixel+0xc0>)
 80055aa:	54d1      	strb	r1, [r2, r3]
 80055ac:	e021      	b.n	80055f2 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80055ae:	1dfb      	adds	r3, r7, #7
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	1dbb      	adds	r3, r7, #6
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	08db      	lsrs	r3, r3, #3
 80055b8:	b2d8      	uxtb	r0, r3
 80055ba:	0003      	movs	r3, r0
 80055bc:	01db      	lsls	r3, r3, #7
 80055be:	18d3      	adds	r3, r2, r3
 80055c0:	4a0d      	ldr	r2, [pc, #52]	; (80055f8 <ssd1306_DrawPixel+0xc0>)
 80055c2:	5cd3      	ldrb	r3, [r2, r3]
 80055c4:	b25b      	sxtb	r3, r3
 80055c6:	1dba      	adds	r2, r7, #6
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	2107      	movs	r1, #7
 80055cc:	400a      	ands	r2, r1
 80055ce:	2101      	movs	r1, #1
 80055d0:	4091      	lsls	r1, r2
 80055d2:	000a      	movs	r2, r1
 80055d4:	b252      	sxtb	r2, r2
 80055d6:	43d2      	mvns	r2, r2
 80055d8:	b252      	sxtb	r2, r2
 80055da:	4013      	ands	r3, r2
 80055dc:	b259      	sxtb	r1, r3
 80055de:	1dfb      	adds	r3, r7, #7
 80055e0:	781a      	ldrb	r2, [r3, #0]
 80055e2:	0003      	movs	r3, r0
 80055e4:	01db      	lsls	r3, r3, #7
 80055e6:	18d3      	adds	r3, r2, r3
 80055e8:	b2c9      	uxtb	r1, r1
 80055ea:	4a03      	ldr	r2, [pc, #12]	; (80055f8 <ssd1306_DrawPixel+0xc0>)
 80055ec:	54d1      	strb	r1, [r2, r3]
 80055ee:	e000      	b.n	80055f2 <ssd1306_DrawPixel+0xba>
        return;
 80055f0:	46c0      	nop			; (mov r8, r8)
    }
}
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b003      	add	sp, #12
 80055f6:	bd90      	pop	{r4, r7, pc}
 80055f8:	200000b4 	.word	0x200000b4

080055fc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80055fc:	b590      	push	{r4, r7, lr}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	0004      	movs	r4, r0
 8005604:	1d38      	adds	r0, r7, #4
 8005606:	6001      	str	r1, [r0, #0]
 8005608:	6042      	str	r2, [r0, #4]
 800560a:	0019      	movs	r1, r3
 800560c:	200f      	movs	r0, #15
 800560e:	183b      	adds	r3, r7, r0
 8005610:	1c22      	adds	r2, r4, #0
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	230e      	movs	r3, #14
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	1c0a      	adds	r2, r1, #0
 800561a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800561c:	183b      	adds	r3, r7, r0
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b1f      	cmp	r3, #31
 8005622:	d904      	bls.n	800562e <ssd1306_WriteChar+0x32>
 8005624:	230f      	movs	r3, #15
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b7e      	cmp	r3, #126	; 0x7e
 800562c:	d901      	bls.n	8005632 <ssd1306_WriteChar+0x36>
        return 0;
 800562e:	2300      	movs	r3, #0
 8005630:	e078      	b.n	8005724 <ssd1306_WriteChar+0x128>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005632:	4b3e      	ldr	r3, [pc, #248]	; (800572c <ssd1306_WriteChar+0x130>)
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	001a      	movs	r2, r3
 8005638:	1d3b      	adds	r3, r7, #4
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	18d3      	adds	r3, r2, r3
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	dc07      	bgt.n	8005652 <ssd1306_WriteChar+0x56>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005642:	4b3a      	ldr	r3, [pc, #232]	; (800572c <ssd1306_WriteChar+0x130>)
 8005644:	885b      	ldrh	r3, [r3, #2]
 8005646:	001a      	movs	r2, r3
 8005648:	1d3b      	adds	r3, r7, #4
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	dd01      	ble.n	8005656 <ssd1306_WriteChar+0x5a>
    {
        // Not enough space on current line
        return 0;
 8005652:	2300      	movs	r3, #0
 8005654:	e066      	b.n	8005724 <ssd1306_WriteChar+0x128>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	e051      	b.n	8005700 <ssd1306_WriteChar+0x104>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	230f      	movs	r3, #15
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	3b20      	subs	r3, #32
 8005668:	1d39      	adds	r1, r7, #4
 800566a:	7849      	ldrb	r1, [r1, #1]
 800566c:	434b      	muls	r3, r1
 800566e:	0019      	movs	r1, r3
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	18cb      	adds	r3, r1, r3
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	18d3      	adds	r3, r2, r3
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800567c:	2300      	movs	r3, #0
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	e035      	b.n	80056ee <ssd1306_WriteChar+0xf2>
            if((b << j) & 0x8000)  {
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	409a      	lsls	r2, r3
 8005688:	2380      	movs	r3, #128	; 0x80
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	4013      	ands	r3, r2
 800568e:	d014      	beq.n	80056ba <ssd1306_WriteChar+0xbe>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005690:	4b26      	ldr	r3, [pc, #152]	; (800572c <ssd1306_WriteChar+0x130>)
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	18d3      	adds	r3, r2, r3
 800569c:	b2d8      	uxtb	r0, r3
 800569e:	4b23      	ldr	r3, [pc, #140]	; (800572c <ssd1306_WriteChar+0x130>)
 80056a0:	885b      	ldrh	r3, [r3, #2]
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	18d3      	adds	r3, r2, r3
 80056aa:	b2d9      	uxtb	r1, r3
 80056ac:	230e      	movs	r3, #14
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	001a      	movs	r2, r3
 80056b4:	f7ff ff40 	bl	8005538 <ssd1306_DrawPixel>
 80056b8:	e016      	b.n	80056e8 <ssd1306_WriteChar+0xec>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80056ba:	4b1c      	ldr	r3, [pc, #112]	; (800572c <ssd1306_WriteChar+0x130>)
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	18d3      	adds	r3, r2, r3
 80056c6:	b2d8      	uxtb	r0, r3
 80056c8:	4b18      	ldr	r3, [pc, #96]	; (800572c <ssd1306_WriteChar+0x130>)
 80056ca:	885b      	ldrh	r3, [r3, #2]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	18d3      	adds	r3, r2, r3
 80056d4:	b2d9      	uxtb	r1, r3
 80056d6:	230e      	movs	r3, #14
 80056d8:	18fb      	adds	r3, r7, r3
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	425a      	negs	r2, r3
 80056de:	4153      	adcs	r3, r2
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	001a      	movs	r2, r3
 80056e4:	f7ff ff28 	bl	8005538 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	3301      	adds	r3, #1
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	001a      	movs	r2, r3
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d3c3      	bcc.n	8005682 <ssd1306_WriteChar+0x86>
    for(i = 0; i < Font.FontHeight; i++) {
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3301      	adds	r3, #1
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	001a      	movs	r2, r3
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4293      	cmp	r3, r2
 800570a:	d3a7      	bcc.n	800565c <ssd1306_WriteChar+0x60>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800570c:	4b07      	ldr	r3, [pc, #28]	; (800572c <ssd1306_WriteChar+0x130>)
 800570e:	881a      	ldrh	r2, [r3, #0]
 8005710:	1d3b      	adds	r3, r7, #4
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	18d3      	adds	r3, r2, r3
 8005718:	b29a      	uxth	r2, r3
 800571a:	4b04      	ldr	r3, [pc, #16]	; (800572c <ssd1306_WriteChar+0x130>)
 800571c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800571e:	230f      	movs	r3, #15
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	781b      	ldrb	r3, [r3, #0]
}
 8005724:	0018      	movs	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	b009      	add	sp, #36	; 0x24
 800572a:	bd90      	pop	{r4, r7, pc}
 800572c:	200004b4 	.word	0x200004b4

08005730 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	1d38      	adds	r0, r7, #4
 800573a:	6001      	str	r1, [r0, #0]
 800573c:	6042      	str	r2, [r0, #4]
 800573e:	001a      	movs	r2, r3
 8005740:	1cfb      	adds	r3, r7, #3
 8005742:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8005744:	e014      	b.n	8005770 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	7818      	ldrb	r0, [r3, #0]
 800574a:	1cfb      	adds	r3, r7, #3
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	1d3a      	adds	r2, r7, #4
 8005750:	6811      	ldr	r1, [r2, #0]
 8005752:	6852      	ldr	r2, [r2, #4]
 8005754:	f7ff ff52 	bl	80055fc <ssd1306_WriteChar>
 8005758:	0003      	movs	r3, r0
 800575a:	001a      	movs	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d002      	beq.n	800576a <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	e008      	b.n	800577c <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	781b      	ldrb	r3, [r3, #0]
}
 800577c:	0018      	movs	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	b004      	add	sp, #16
 8005782:	bd80      	pop	{r7, pc}

08005784 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	0002      	movs	r2, r0
 800578c:	1dfb      	adds	r3, r7, #7
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	1dbb      	adds	r3, r7, #6
 8005792:	1c0a      	adds	r2, r1, #0
 8005794:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8005796:	1dfb      	adds	r3, r7, #7
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b29a      	uxth	r2, r3
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <ssd1306_SetCursor+0x30>)
 800579e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80057a0:	1dbb      	adds	r3, r7, #6
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <ssd1306_SetCursor+0x30>)
 80057a8:	805a      	strh	r2, [r3, #2]
}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	46bd      	mov	sp, r7
 80057ae:	b002      	add	sp, #8
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	200004b4 	.word	0x200004b4

080057b8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	0002      	movs	r2, r0
 80057c0:	1dfb      	adds	r3, r7, #7
 80057c2:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80057c4:	210f      	movs	r1, #15
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	2281      	movs	r2, #129	; 0x81
 80057ca:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80057cc:	187b      	adds	r3, r7, r1
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7ff fdc1 	bl	8005358 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80057d6:	1dfb      	adds	r3, r7, #7
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	0018      	movs	r0, r3
 80057dc:	f7ff fdbc 	bl	8005358 <ssd1306_WriteCommand>
}
 80057e0:	46c0      	nop			; (mov r8, r8)
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b004      	add	sp, #16
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	0002      	movs	r2, r0
 80057f0:	1dfb      	adds	r3, r7, #7
 80057f2:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80057f4:	1dfb      	adds	r3, r7, #7
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80057fc:	230f      	movs	r3, #15
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	22af      	movs	r2, #175	; 0xaf
 8005802:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <ssd1306_SetDisplayOn+0x48>)
 8005806:	2201      	movs	r2, #1
 8005808:	715a      	strb	r2, [r3, #5]
 800580a:	e006      	b.n	800581a <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 800580c:	230f      	movs	r3, #15
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	22ae      	movs	r2, #174	; 0xae
 8005812:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <ssd1306_SetDisplayOn+0x48>)
 8005816:	2200      	movs	r2, #0
 8005818:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800581a:	230f      	movs	r3, #15
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	0018      	movs	r0, r3
 8005822:	f7ff fd99 	bl	8005358 <ssd1306_WriteCommand>
}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	46bd      	mov	sp, r7
 800582a:	b004      	add	sp, #16
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	200004b4 	.word	0x200004b4

08005834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583a:	4b12      	ldr	r3, [pc, #72]	; (8005884 <HAL_MspInit+0x50>)
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <HAL_MspInit+0x50>)
 8005840:	2101      	movs	r1, #1
 8005842:	430a      	orrs	r2, r1
 8005844:	619a      	str	r2, [r3, #24]
 8005846:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <HAL_MspInit+0x50>)
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2201      	movs	r2, #1
 800584c:	4013      	ands	r3, r2
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005852:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <HAL_MspInit+0x50>)
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <HAL_MspInit+0x50>)
 8005858:	2180      	movs	r1, #128	; 0x80
 800585a:	0549      	lsls	r1, r1, #21
 800585c:	430a      	orrs	r2, r1
 800585e:	61da      	str	r2, [r3, #28]
 8005860:	4b08      	ldr	r3, [pc, #32]	; (8005884 <HAL_MspInit+0x50>)
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	055b      	lsls	r3, r3, #21
 8005868:	4013      	ands	r3, r2
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800586e:	2302      	movs	r3, #2
 8005870:	425b      	negs	r3, r3
 8005872:	2200      	movs	r2, #0
 8005874:	2103      	movs	r1, #3
 8005876:	0018      	movs	r0, r3
 8005878:	f001 f8fc 	bl	8006a74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40021000 	.word	0x40021000

08005888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005890:	2314      	movs	r3, #20
 8005892:	18fb      	adds	r3, r7, r3
 8005894:	0018      	movs	r0, r3
 8005896:	2314      	movs	r3, #20
 8005898:	001a      	movs	r2, r3
 800589a:	2100      	movs	r1, #0
 800589c:	f009 f854 	bl	800e948 <memset>
  if(hadc->Instance==ADC1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <HAL_ADC_MspInit+0x84>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d12c      	bne.n	8005904 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80058aa:	4b19      	ldr	r3, [pc, #100]	; (8005910 <HAL_ADC_MspInit+0x88>)
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	4b18      	ldr	r3, [pc, #96]	; (8005910 <HAL_ADC_MspInit+0x88>)
 80058b0:	2180      	movs	r1, #128	; 0x80
 80058b2:	0089      	lsls	r1, r1, #2
 80058b4:	430a      	orrs	r2, r1
 80058b6:	619a      	str	r2, [r3, #24]
 80058b8:	4b15      	ldr	r3, [pc, #84]	; (8005910 <HAL_ADC_MspInit+0x88>)
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4013      	ands	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058c6:	4b12      	ldr	r3, [pc, #72]	; (8005910 <HAL_ADC_MspInit+0x88>)
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <HAL_ADC_MspInit+0x88>)
 80058cc:	2180      	movs	r1, #128	; 0x80
 80058ce:	0289      	lsls	r1, r1, #10
 80058d0:	430a      	orrs	r2, r1
 80058d2:	615a      	str	r2, [r3, #20]
 80058d4:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <HAL_ADC_MspInit+0x88>)
 80058d6:	695a      	ldr	r2, [r3, #20]
 80058d8:	2380      	movs	r3, #128	; 0x80
 80058da:	029b      	lsls	r3, r3, #10
 80058dc:	4013      	ands	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80058e2:	2114      	movs	r1, #20
 80058e4:	187b      	adds	r3, r7, r1
 80058e6:	2203      	movs	r2, #3
 80058e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058ea:	187b      	adds	r3, r7, r1
 80058ec:	2203      	movs	r2, #3
 80058ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f0:	187b      	adds	r3, r7, r1
 80058f2:	2200      	movs	r2, #0
 80058f4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058f6:	187a      	adds	r2, r7, r1
 80058f8:	2390      	movs	r3, #144	; 0x90
 80058fa:	05db      	lsls	r3, r3, #23
 80058fc:	0011      	movs	r1, r2
 80058fe:	0018      	movs	r0, r3
 8005900:	f001 f95c 	bl	8006bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005904:	46c0      	nop			; (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	b00a      	add	sp, #40	; 0x28
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40012400 	.word	0x40012400
 8005910:	40021000 	.word	0x40021000

08005914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08a      	sub	sp, #40	; 0x28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800591c:	2314      	movs	r3, #20
 800591e:	18fb      	adds	r3, r7, r3
 8005920:	0018      	movs	r0, r3
 8005922:	2314      	movs	r3, #20
 8005924:	001a      	movs	r2, r3
 8005926:	2100      	movs	r1, #0
 8005928:	f009 f80e 	bl	800e948 <memset>
  if(hi2c->Instance==I2C1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1c      	ldr	r2, [pc, #112]	; (80059a4 <HAL_I2C_MspInit+0x90>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d132      	bne.n	800599c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005936:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <HAL_I2C_MspInit+0x94>)
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <HAL_I2C_MspInit+0x94>)
 800593c:	2180      	movs	r1, #128	; 0x80
 800593e:	02c9      	lsls	r1, r1, #11
 8005940:	430a      	orrs	r2, r1
 8005942:	615a      	str	r2, [r3, #20]
 8005944:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <HAL_I2C_MspInit+0x94>)
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	02db      	lsls	r3, r3, #11
 800594c:	4013      	ands	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005952:	2114      	movs	r1, #20
 8005954:	187b      	adds	r3, r7, r1
 8005956:	22c0      	movs	r2, #192	; 0xc0
 8005958:	0092      	lsls	r2, r2, #2
 800595a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800595c:	187b      	adds	r3, r7, r1
 800595e:	2212      	movs	r2, #18
 8005960:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005962:	187b      	adds	r3, r7, r1
 8005964:	2200      	movs	r2, #0
 8005966:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005968:	187b      	adds	r3, r7, r1
 800596a:	2203      	movs	r2, #3
 800596c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800596e:	187b      	adds	r3, r7, r1
 8005970:	2201      	movs	r2, #1
 8005972:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005974:	187b      	adds	r3, r7, r1
 8005976:	4a0d      	ldr	r2, [pc, #52]	; (80059ac <HAL_I2C_MspInit+0x98>)
 8005978:	0019      	movs	r1, r3
 800597a:	0010      	movs	r0, r2
 800597c:	f001 f91e 	bl	8006bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005980:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <HAL_I2C_MspInit+0x94>)
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <HAL_I2C_MspInit+0x94>)
 8005986:	2180      	movs	r1, #128	; 0x80
 8005988:	0389      	lsls	r1, r1, #14
 800598a:	430a      	orrs	r2, r1
 800598c:	61da      	str	r2, [r3, #28]
 800598e:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <HAL_I2C_MspInit+0x94>)
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	2380      	movs	r3, #128	; 0x80
 8005994:	039b      	lsls	r3, r3, #14
 8005996:	4013      	ands	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b00a      	add	sp, #40	; 0x28
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40005400 	.word	0x40005400
 80059a8:	40021000 	.word	0x40021000
 80059ac:	48000400 	.word	0x48000400

080059b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08c      	sub	sp, #48	; 0x30
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059b8:	231c      	movs	r3, #28
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	0018      	movs	r0, r3
 80059be:	2314      	movs	r3, #20
 80059c0:	001a      	movs	r2, r3
 80059c2:	2100      	movs	r1, #0
 80059c4:	f008 ffc0 	bl	800e948 <memset>
  if(hspi->Instance==SPI1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a39      	ldr	r2, [pc, #228]	; (8005ab4 <HAL_SPI_MspInit+0x104>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d133      	bne.n	8005a3a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80059d2:	4b39      	ldr	r3, [pc, #228]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	0149      	lsls	r1, r1, #5
 80059dc:	430a      	orrs	r2, r1
 80059de:	619a      	str	r2, [r3, #24]
 80059e0:	4b35      	ldr	r3, [pc, #212]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	2380      	movs	r3, #128	; 0x80
 80059e6:	015b      	lsls	r3, r3, #5
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059ee:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	4b31      	ldr	r3, [pc, #196]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	0289      	lsls	r1, r1, #10
 80059f8:	430a      	orrs	r2, r1
 80059fa:	615a      	str	r2, [r3, #20]
 80059fc:	4b2e      	ldr	r3, [pc, #184]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	2380      	movs	r3, #128	; 0x80
 8005a02:	029b      	lsls	r3, r3, #10
 8005a04:	4013      	ands	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005a0a:	211c      	movs	r1, #28
 8005a0c:	187b      	adds	r3, r7, r1
 8005a0e:	22e0      	movs	r2, #224	; 0xe0
 8005a10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a12:	187b      	adds	r3, r7, r1
 8005a14:	2202      	movs	r2, #2
 8005a16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a18:	187b      	adds	r3, r7, r1
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a1e:	187b      	adds	r3, r7, r1
 8005a20:	2203      	movs	r2, #3
 8005a22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005a24:	187b      	adds	r3, r7, r1
 8005a26:	2200      	movs	r2, #0
 8005a28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a2a:	187a      	adds	r2, r7, r1
 8005a2c:	2390      	movs	r3, #144	; 0x90
 8005a2e:	05db      	lsls	r3, r3, #23
 8005a30:	0011      	movs	r1, r2
 8005a32:	0018      	movs	r0, r3
 8005a34:	f001 f8c2 	bl	8006bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005a38:	e037      	b.n	8005aaa <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <HAL_SPI_MspInit+0x10c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d132      	bne.n	8005aaa <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a44:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 8005a4a:	2180      	movs	r1, #128	; 0x80
 8005a4c:	01c9      	lsls	r1, r1, #7
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	61da      	str	r2, [r3, #28]
 8005a52:	4b19      	ldr	r3, [pc, #100]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	01db      	lsls	r3, r3, #7
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a60:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 8005a66:	2180      	movs	r1, #128	; 0x80
 8005a68:	02c9      	lsls	r1, r1, #11
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	615a      	str	r2, [r3, #20]
 8005a6e:	4b12      	ldr	r3, [pc, #72]	; (8005ab8 <HAL_SPI_MspInit+0x108>)
 8005a70:	695a      	ldr	r2, [r3, #20]
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	02db      	lsls	r3, r3, #11
 8005a76:	4013      	ands	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005a7c:	211c      	movs	r1, #28
 8005a7e:	187b      	adds	r3, r7, r1
 8005a80:	22e0      	movs	r2, #224	; 0xe0
 8005a82:	0212      	lsls	r2, r2, #8
 8005a84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a86:	187b      	adds	r3, r7, r1
 8005a88:	2202      	movs	r2, #2
 8005a8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8c:	187b      	adds	r3, r7, r1
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a92:	187b      	adds	r3, r7, r1
 8005a94:	2203      	movs	r2, #3
 8005a96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8005a98:	187b      	adds	r3, r7, r1
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a9e:	187b      	adds	r3, r7, r1
 8005aa0:	4a07      	ldr	r2, [pc, #28]	; (8005ac0 <HAL_SPI_MspInit+0x110>)
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	0010      	movs	r0, r2
 8005aa6:	f001 f889 	bl	8006bbc <HAL_GPIO_Init>
}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	46bd      	mov	sp, r7
 8005aae:	b00c      	add	sp, #48	; 0x30
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	40013000 	.word	0x40013000
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	40003800 	.word	0x40003800
 8005ac0:	48000400 	.word	0x48000400

08005ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <HAL_TIM_Base_MspInit+0x34>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d10b      	bne.n	8005aee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <HAL_TIM_Base_MspInit+0x38>)
 8005ad8:	69da      	ldr	r2, [r3, #28]
 8005ada:	4b08      	ldr	r3, [pc, #32]	; (8005afc <HAL_TIM_Base_MspInit+0x38>)
 8005adc:	2102      	movs	r1, #2
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	61da      	str	r2, [r3, #28]
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_TIM_Base_MspInit+0x38>)
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b004      	add	sp, #16
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40021000 	.word	0x40021000

08005b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b08:	230c      	movs	r3, #12
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	2314      	movs	r3, #20
 8005b10:	001a      	movs	r2, r3
 8005b12:	2100      	movs	r1, #0
 8005b14:	f008 ff18 	bl	800e948 <memset>
  if(htim->Instance==TIM3)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <HAL_TIM_MspPostInit+0x74>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d123      	bne.n	8005b6a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b22:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <HAL_TIM_MspPostInit+0x78>)
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <HAL_TIM_MspPostInit+0x78>)
 8005b28:	2180      	movs	r1, #128	; 0x80
 8005b2a:	0309      	lsls	r1, r1, #12
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	615a      	str	r2, [r3, #20]
 8005b30:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <HAL_TIM_MspPostInit+0x78>)
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	031b      	lsls	r3, r3, #12
 8005b38:	4013      	ands	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005b3e:	210c      	movs	r1, #12
 8005b40:	187b      	adds	r3, r7, r1
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b46:	187b      	adds	r3, r7, r1
 8005b48:	2202      	movs	r2, #2
 8005b4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	2200      	movs	r2, #0
 8005b50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b52:	187b      	adds	r3, r7, r1
 8005b54:	2200      	movs	r2, #0
 8005b56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8005b58:	187b      	adds	r3, r7, r1
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b5e:	187b      	adds	r3, r7, r1
 8005b60:	4a06      	ldr	r2, [pc, #24]	; (8005b7c <HAL_TIM_MspPostInit+0x7c>)
 8005b62:	0019      	movs	r1, r3
 8005b64:	0010      	movs	r0, r2
 8005b66:	f001 f829 	bl	8006bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b008      	add	sp, #32
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	48000800 	.word	0x48000800

08005b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b88:	2314      	movs	r3, #20
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	2314      	movs	r3, #20
 8005b90:	001a      	movs	r2, r3
 8005b92:	2100      	movs	r1, #0
 8005b94:	f008 fed8 	bl	800e948 <memset>
  if(huart->Instance==USART2)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a20      	ldr	r2, [pc, #128]	; (8005c20 <HAL_UART_MspInit+0xa0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d13a      	bne.n	8005c18 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005ba2:	4b20      	ldr	r3, [pc, #128]	; (8005c24 <HAL_UART_MspInit+0xa4>)
 8005ba4:	69da      	ldr	r2, [r3, #28]
 8005ba6:	4b1f      	ldr	r3, [pc, #124]	; (8005c24 <HAL_UART_MspInit+0xa4>)
 8005ba8:	2180      	movs	r1, #128	; 0x80
 8005baa:	0289      	lsls	r1, r1, #10
 8005bac:	430a      	orrs	r2, r1
 8005bae:	61da      	str	r2, [r3, #28]
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <HAL_UART_MspInit+0xa4>)
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	029b      	lsls	r3, r3, #10
 8005bb8:	4013      	ands	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bbe:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <HAL_UART_MspInit+0xa4>)
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <HAL_UART_MspInit+0xa4>)
 8005bc4:	2180      	movs	r1, #128	; 0x80
 8005bc6:	0289      	lsls	r1, r1, #10
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	615a      	str	r2, [r3, #20]
 8005bcc:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <HAL_UART_MspInit+0xa4>)
 8005bce:	695a      	ldr	r2, [r3, #20]
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	029b      	lsls	r3, r3, #10
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005bda:	2114      	movs	r1, #20
 8005bdc:	187b      	adds	r3, r7, r1
 8005bde:	220c      	movs	r2, #12
 8005be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be2:	187b      	adds	r3, r7, r1
 8005be4:	2202      	movs	r2, #2
 8005be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be8:	187b      	adds	r3, r7, r1
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bee:	187b      	adds	r3, r7, r1
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005bf4:	187b      	adds	r3, r7, r1
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bfa:	187a      	adds	r2, r7, r1
 8005bfc:	2390      	movs	r3, #144	; 0x90
 8005bfe:	05db      	lsls	r3, r3, #23
 8005c00:	0011      	movs	r1, r2
 8005c02:	0018      	movs	r0, r3
 8005c04:	f000 ffda 	bl	8006bbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2103      	movs	r1, #3
 8005c0c:	201c      	movs	r0, #28
 8005c0e:	f000 ff31 	bl	8006a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c12:	201c      	movs	r0, #28
 8005c14:	f000 ff43 	bl	8006a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005c18:	46c0      	nop			; (mov r8, r8)
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b00a      	add	sp, #40	; 0x28
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40004400 	.word	0x40004400
 8005c24:	40021000 	.word	0x40021000

08005c28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	0019      	movs	r1, r3
 8005c3e:	200d      	movs	r0, #13
 8005c40:	f000 ff18 	bl	8006a74 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8005c44:	200d      	movs	r0, #13
 8005c46:	f000 ff2a 	bl	8006a9e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005c4a:	4b21      	ldr	r3, [pc, #132]	; (8005cd0 <HAL_InitTick+0xa8>)
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	4b20      	ldr	r3, [pc, #128]	; (8005cd0 <HAL_InitTick+0xa8>)
 8005c50:	2180      	movs	r1, #128	; 0x80
 8005c52:	0109      	lsls	r1, r1, #4
 8005c54:	430a      	orrs	r2, r1
 8005c56:	619a      	str	r2, [r3, #24]
 8005c58:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <HAL_InitTick+0xa8>)
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	2380      	movs	r3, #128	; 0x80
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	4013      	ands	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]
 8005c64:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005c66:	230c      	movs	r3, #12
 8005c68:	18fa      	adds	r2, r7, r3
 8005c6a:	2310      	movs	r3, #16
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	0011      	movs	r1, r2
 8005c70:	0018      	movs	r0, r3
 8005c72:	f002 fa0b 	bl	800808c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005c76:	f002 f9f3 	bl	8008060 <HAL_RCC_GetPCLK1Freq>
 8005c7a:	0003      	movs	r3, r0
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	4914      	ldr	r1, [pc, #80]	; (8005cd4 <HAL_InitTick+0xac>)
 8005c82:	0018      	movs	r0, r3
 8005c84:	f7fa fa40 	bl	8000108 <__udivsi3>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <HAL_InitTick+0xb0>)
 8005c90:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <HAL_InitTick+0xb4>)
 8005c92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005c94:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <HAL_InitTick+0xb0>)
 8005c96:	4a12      	ldr	r2, [pc, #72]	; (8005ce0 <HAL_InitTick+0xb8>)
 8005c98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <HAL_InitTick+0xb0>)
 8005c9c:	6a3a      	ldr	r2, [r7, #32]
 8005c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8005ca0:	4b0d      	ldr	r3, [pc, #52]	; (8005cd8 <HAL_InitTick+0xb0>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <HAL_InitTick+0xb0>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005cac:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <HAL_InitTick+0xb0>)
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f003 fa04 	bl	80090bc <HAL_TIM_Base_Init>
 8005cb4:	1e03      	subs	r3, r0, #0
 8005cb6:	d105      	bne.n	8005cc4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005cb8:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <HAL_InitTick+0xb0>)
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f003 fa4e 	bl	800915c <HAL_TIM_Base_Start_IT>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	e000      	b.n	8005cc6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
}
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	b00a      	add	sp, #40	; 0x28
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	000f4240 	.word	0x000f4240
 8005cd8:	20003480 	.word	0x20003480
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	000003e7 	.word	0x000003e7

08005ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ce8:	e7fe      	b.n	8005ce8 <NMI_Handler+0x4>

08005cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cee:	e7fe      	b.n	8005cee <HardFault_Handler+0x4>

08005cf0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005cf4:	2010      	movs	r0, #16
 8005cf6:	f001 f8ef 	bl	8006ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005cfa:	2380      	movs	r3, #128	; 0x80
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f001 f8ea 	bl	8006ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	019b      	lsls	r3, r3, #6
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f001 f8e5 	bl	8006ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f003 fb74 	bl	8009408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8005d20:	46c0      	nop			; (mov r8, r8)
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	20003480 	.word	0x20003480

08005d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005d30:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <USART2_IRQHandler+0x14>)
 8005d32:	0018      	movs	r0, r3
 8005d34:	f004 faee 	bl	800a314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005d38:	46c0      	nop			; (mov r8, r8)
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	2000339c 	.word	0x2000339c

08005d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d4c:	4a14      	ldr	r2, [pc, #80]	; (8005da0 <_sbrk+0x5c>)
 8005d4e:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <_sbrk+0x60>)
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d58:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <_sbrk+0x64>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <_sbrk+0x64>)
 8005d62:	4a12      	ldr	r2, [pc, #72]	; (8005dac <_sbrk+0x68>)
 8005d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <_sbrk+0x64>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	18d3      	adds	r3, r2, r3
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d207      	bcs.n	8005d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d74:	f008 fda2 	bl	800e8bc <__errno>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	220c      	movs	r2, #12
 8005d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	425b      	negs	r3, r3
 8005d82:	e009      	b.n	8005d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d84:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <_sbrk+0x64>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <_sbrk+0x64>)
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	18d2      	adds	r2, r2, r3
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <_sbrk+0x64>)
 8005d94:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	0018      	movs	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b006      	add	sp, #24
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20004000 	.word	0x20004000
 8005da4:	00000400 	.word	0x00000400
 8005da8:	200004bc 	.word	0x200004bc
 8005dac:	20003510 	.word	0x20003510

08005db0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005db4:	46c0      	nop			; (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005dbc:	480d      	ldr	r0, [pc, #52]	; (8005df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005dbe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005dc0:	480d      	ldr	r0, [pc, #52]	; (8005df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005dc2:	490e      	ldr	r1, [pc, #56]	; (8005dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005dc4:	4a0e      	ldr	r2, [pc, #56]	; (8005e00 <LoopForever+0xe>)
  movs r3, #0
 8005dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dc8:	e002      	b.n	8005dd0 <LoopCopyDataInit>

08005dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dce:	3304      	adds	r3, #4

08005dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005dd4:	d3f9      	bcc.n	8005dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dd6:	4a0b      	ldr	r2, [pc, #44]	; (8005e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005dd8:	4c0b      	ldr	r4, [pc, #44]	; (8005e08 <LoopForever+0x16>)
  movs r3, #0
 8005dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ddc:	e001      	b.n	8005de2 <LoopFillZerobss>

08005dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005de0:	3204      	adds	r2, #4

08005de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005de4:	d3fb      	bcc.n	8005dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005de6:	f7ff ffe3 	bl	8005db0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005dea:	f008 fd6d 	bl	800e8c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005dee:	f7fd fe8d 	bl	8003b0c <main>

08005df2 <LoopForever>:

LoopForever:
    b LoopForever
 8005df2:	e7fe      	b.n	8005df2 <LoopForever>
  ldr   r0, =_estack
 8005df4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dfc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8005e00:	0800ff3c 	.word	0x0800ff3c
  ldr r2, =_sbss
 8005e04:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8005e08:	20003510 	.word	0x20003510

08005e0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e0c:	e7fe      	b.n	8005e0c <ADC1_IRQHandler>
	...

08005e10 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e14:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <HAL_Init+0x24>)
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <HAL_Init+0x24>)
 8005e1a:	2110      	movs	r1, #16
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005e20:	2000      	movs	r0, #0
 8005e22:	f7ff ff01 	bl	8005c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e26:	f7ff fd05 	bl	8005834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	40022000 	.word	0x40022000

08005e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_IncTick+0x1c>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	001a      	movs	r2, r3
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_IncTick+0x20>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	18d2      	adds	r2, r2, r3
 8005e48:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <HAL_IncTick+0x20>)
 8005e4a:	601a      	str	r2, [r3, #0]
}
 8005e4c:	46c0      	nop			; (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	20000028 	.word	0x20000028
 8005e58:	200034c8 	.word	0x200034c8

08005e5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e60:	4b02      	ldr	r3, [pc, #8]	; (8005e6c <HAL_GetTick+0x10>)
 8005e62:	681b      	ldr	r3, [r3, #0]
}
 8005e64:	0018      	movs	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	200034c8 	.word	0x200034c8

08005e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e78:	f7ff fff0 	bl	8005e5c <HAL_GetTick>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3301      	adds	r3, #1
 8005e88:	d005      	beq.n	8005e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <HAL_Delay+0x40>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	001a      	movs	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	189b      	adds	r3, r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	f7ff ffe0 	bl	8005e5c <HAL_GetTick>
 8005e9c:	0002      	movs	r2, r0
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d8f7      	bhi.n	8005e98 <HAL_Delay+0x28>
  {
  }
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b004      	add	sp, #16
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000028 	.word	0x20000028

08005eb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ebc:	230f      	movs	r3, #15
 8005ebe:	18fb      	adds	r3, r7, r3
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e125      	b.n	800611e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2234      	movs	r2, #52	; 0x34
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	0018      	movs	r0, r3
 8005eec:	f7ff fccc 	bl	8005888 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d000      	beq.n	8005efc <HAL_ADC_Init+0x48>
 8005efa:	e103      	b.n	8006104 <HAL_ADC_Init+0x250>
 8005efc:	230f      	movs	r3, #15
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d000      	beq.n	8005f08 <HAL_ADC_Init+0x54>
 8005f06:	e0fd      	b.n	8006104 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2204      	movs	r2, #4
 8005f10:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8005f12:	d000      	beq.n	8005f16 <HAL_ADC_Init+0x62>
 8005f14:	e0f6      	b.n	8006104 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	4a83      	ldr	r2, [pc, #524]	; (8006128 <HAL_ADC_Init+0x274>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2202      	movs	r2, #2
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d112      	bne.n	8005f5a <HAL_ADC_Init+0xa6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d009      	beq.n	8005f56 <HAL_ADC_Init+0xa2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	2380      	movs	r3, #128	; 0x80
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	401a      	ands	r2, r3
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d101      	bne.n	8005f5a <HAL_ADC_Init+0xa6>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_ADC_Init+0xa8>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d116      	bne.n	8005f8e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	2218      	movs	r2, #24
 8005f68:	4393      	bics	r3, r2
 8005f6a:	0019      	movs	r1, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	0899      	lsrs	r1, r3, #2
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4964      	ldr	r1, [pc, #400]	; (800612c <HAL_ADC_Init+0x278>)
 8005f9a:	400a      	ands	r2, r1
 8005f9c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7e1b      	ldrb	r3, [r3, #24]
 8005fa2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	7e5b      	ldrb	r3, [r3, #25]
 8005fa8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005faa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	7e9b      	ldrb	r3, [r3, #26]
 8005fb0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005fb2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d002      	beq.n	8005fc2 <HAL_ADC_Init+0x10e>
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	015b      	lsls	r3, r3, #5
 8005fc0:	e000      	b.n	8005fc4 <HAL_ADC_Init+0x110>
 8005fc2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005fc4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005fca:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d101      	bne.n	8005fd8 <HAL_ADC_Init+0x124>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	e000      	b.n	8005fda <HAL_ADC_Init+0x126>
 8005fd8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8005fda:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2124      	movs	r1, #36	; 0x24
 8005fe0:	5c5b      	ldrb	r3, [r3, r1]
 8005fe2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005fe4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	7edb      	ldrb	r3, [r3, #27]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d115      	bne.n	8006020 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	7e9b      	ldrb	r3, [r3, #26]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2280      	movs	r2, #128	; 0x80
 8006000:	0252      	lsls	r2, r2, #9
 8006002:	4313      	orrs	r3, r2
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	e00b      	b.n	8006020 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	2220      	movs	r2, #32
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006018:	2201      	movs	r2, #1
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	23c2      	movs	r3, #194	; 0xc2
 8006026:	33ff      	adds	r3, #255	; 0xff
 8006028:	429a      	cmp	r2, r3
 800602a:	d007      	beq.n	800603c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006034:	4313      	orrs	r3, r2
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	4313      	orrs	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68d9      	ldr	r1, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	430a      	orrs	r2, r1
 800604a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	055b      	lsls	r3, r3, #21
 8006054:	429a      	cmp	r2, r3
 8006056:	d01b      	beq.n	8006090 <HAL_ADC_Init+0x1dc>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d017      	beq.n	8006090 <HAL_ADC_Init+0x1dc>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	2b02      	cmp	r3, #2
 8006066:	d013      	beq.n	8006090 <HAL_ADC_Init+0x1dc>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	2b03      	cmp	r3, #3
 800606e:	d00f      	beq.n	8006090 <HAL_ADC_Init+0x1dc>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	2b04      	cmp	r3, #4
 8006076:	d00b      	beq.n	8006090 <HAL_ADC_Init+0x1dc>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	2b05      	cmp	r3, #5
 800607e:	d007      	beq.n	8006090 <HAL_ADC_Init+0x1dc>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	2b06      	cmp	r3, #6
 8006086:	d003      	beq.n	8006090 <HAL_ADC_Init+0x1dc>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	2b07      	cmp	r3, #7
 800608e:	d112      	bne.n	80060b6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695a      	ldr	r2, [r3, #20]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2107      	movs	r1, #7
 800609c:	438a      	bics	r2, r1
 800609e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6959      	ldr	r1, [r3, #20]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	2207      	movs	r2, #7
 80060ac:	401a      	ands	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a1c      	ldr	r2, [pc, #112]	; (8006130 <HAL_ADC_Init+0x27c>)
 80060be:	4013      	ands	r3, r2
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d10b      	bne.n	80060de <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	2203      	movs	r2, #3
 80060d2:	4393      	bics	r3, r2
 80060d4:	2201      	movs	r2, #1
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80060dc:	e01c      	b.n	8006118 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	2212      	movs	r2, #18
 80060e4:	4393      	bics	r3, r2
 80060e6:	2210      	movs	r2, #16
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	2201      	movs	r2, #1
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80060fa:	230f      	movs	r3, #15
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006102:	e009      	b.n	8006118 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006108:	2210      	movs	r2, #16
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8006110:	230f      	movs	r3, #15
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	2201      	movs	r2, #1
 8006116:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006118:	230f      	movs	r3, #15
 800611a:	18fb      	adds	r3, r7, r3
 800611c:	781b      	ldrb	r3, [r3, #0]
}
 800611e:	0018      	movs	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	b004      	add	sp, #16
 8006124:	bd80      	pop	{r7, pc}
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	fffffefd 	.word	0xfffffefd
 800612c:	fffe0219 	.word	0xfffe0219
 8006130:	833fffe7 	.word	0x833fffe7

08006134 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006134:	b590      	push	{r4, r7, lr}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800613c:	230f      	movs	r3, #15
 800613e:	18fb      	adds	r3, r7, r3
 8006140:	2200      	movs	r2, #0
 8006142:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2204      	movs	r2, #4
 800614c:	4013      	ands	r3, r2
 800614e:	d138      	bne.n	80061c2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2234      	movs	r2, #52	; 0x34
 8006154:	5c9b      	ldrb	r3, [r3, r2]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_ADC_Start+0x2a>
 800615a:	2302      	movs	r3, #2
 800615c:	e038      	b.n	80061d0 <HAL_ADC_Start+0x9c>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2234      	movs	r2, #52	; 0x34
 8006162:	2101      	movs	r1, #1
 8006164:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	7e5b      	ldrb	r3, [r3, #25]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d007      	beq.n	800617e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800616e:	230f      	movs	r3, #15
 8006170:	18fc      	adds	r4, r7, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	0018      	movs	r0, r3
 8006176:	f000 fa0b 	bl	8006590 <ADC_Enable>
 800617a:	0003      	movs	r3, r0
 800617c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800617e:	230f      	movs	r3, #15
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d120      	bne.n	80061ca <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	4a12      	ldr	r2, [pc, #72]	; (80061d8 <HAL_ADC_Start+0xa4>)
 800618e:	4013      	ands	r3, r2
 8006190:	2280      	movs	r2, #128	; 0x80
 8006192:	0052      	lsls	r2, r2, #1
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2234      	movs	r2, #52	; 0x34
 80061a4:	2100      	movs	r1, #0
 80061a6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	221c      	movs	r2, #28
 80061ae:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2104      	movs	r1, #4
 80061bc:	430a      	orrs	r2, r1
 80061be:	609a      	str	r2, [r3, #8]
 80061c0:	e003      	b.n	80061ca <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80061c2:	230f      	movs	r3, #15
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	2202      	movs	r2, #2
 80061c8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80061ca:	230f      	movs	r3, #15
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	781b      	ldrb	r3, [r3, #0]
}
 80061d0:	0018      	movs	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b005      	add	sp, #20
 80061d6:	bd90      	pop	{r4, r7, pc}
 80061d8:	fffff0fe 	.word	0xfffff0fe

080061dc <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80061dc:	b5b0      	push	{r4, r5, r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061e4:	230f      	movs	r3, #15
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2234      	movs	r2, #52	; 0x34
 80061f0:	5c9b      	ldrb	r3, [r3, r2]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_ADC_Stop+0x1e>
 80061f6:	2302      	movs	r3, #2
 80061f8:	e02a      	b.n	8006250 <HAL_ADC_Stop+0x74>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2234      	movs	r2, #52	; 0x34
 80061fe:	2101      	movs	r1, #1
 8006200:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006202:	250f      	movs	r5, #15
 8006204:	197c      	adds	r4, r7, r5
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0018      	movs	r0, r3
 800620a:	f000 fab6 	bl	800677a <ADC_ConversionStop>
 800620e:	0003      	movs	r3, r0
 8006210:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006212:	197b      	adds	r3, r7, r5
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d113      	bne.n	8006242 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800621a:	250f      	movs	r5, #15
 800621c:	197c      	adds	r4, r7, r5
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	0018      	movs	r0, r3
 8006222:	f000 fa39 	bl	8006698 <ADC_Disable>
 8006226:	0003      	movs	r3, r0
 8006228:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800622a:	197b      	adds	r3, r7, r5
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d107      	bne.n	8006242 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	4a08      	ldr	r2, [pc, #32]	; (8006258 <HAL_ADC_Stop+0x7c>)
 8006238:	4013      	ands	r3, r2
 800623a:	2201      	movs	r2, #1
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2234      	movs	r2, #52	; 0x34
 8006246:	2100      	movs	r1, #0
 8006248:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800624a:	230f      	movs	r3, #15
 800624c:	18fb      	adds	r3, r7, r3
 800624e:	781b      	ldrb	r3, [r3, #0]
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b004      	add	sp, #16
 8006256:	bdb0      	pop	{r4, r5, r7, pc}
 8006258:	fffffefe 	.word	0xfffffefe

0800625c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	2b08      	cmp	r3, #8
 800626c:	d102      	bne.n	8006274 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800626e:	2308      	movs	r3, #8
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e014      	b.n	800629e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	4013      	ands	r3, r2
 800627e:	2b01      	cmp	r3, #1
 8006280:	d10b      	bne.n	800629a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	2220      	movs	r2, #32
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2234      	movs	r2, #52	; 0x34
 8006292:	2100      	movs	r1, #0
 8006294:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e071      	b.n	800637e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800629a:	230c      	movs	r3, #12
 800629c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800629e:	f7ff fddd 	bl	8005e5c <HAL_GetTick>
 80062a2:	0003      	movs	r3, r0
 80062a4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80062a6:	e01f      	b.n	80062e8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	3301      	adds	r3, #1
 80062ac:	d01c      	beq.n	80062e8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d007      	beq.n	80062c4 <HAL_ADC_PollForConversion+0x68>
 80062b4:	f7ff fdd2 	bl	8005e5c <HAL_GetTick>
 80062b8:	0002      	movs	r2, r0
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d211      	bcs.n	80062e8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4013      	ands	r3, r2
 80062ce:	d10b      	bne.n	80062e8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	2204      	movs	r2, #4
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2234      	movs	r2, #52	; 0x34
 80062e0:	2100      	movs	r1, #0
 80062e2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e04a      	b.n	800637e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4013      	ands	r3, r2
 80062f2:	d0d9      	beq.n	80062a8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	2280      	movs	r2, #128	; 0x80
 80062fa:	0092      	lsls	r2, r2, #2
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	23c0      	movs	r3, #192	; 0xc0
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	4013      	ands	r3, r2
 800630e:	d12d      	bne.n	800636c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006314:	2b00      	cmp	r3, #0
 8006316:	d129      	bne.n	800636c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2208      	movs	r2, #8
 8006320:	4013      	ands	r3, r2
 8006322:	2b08      	cmp	r3, #8
 8006324:	d122      	bne.n	800636c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	2204      	movs	r2, #4
 800632e:	4013      	ands	r3, r2
 8006330:	d110      	bne.n	8006354 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	210c      	movs	r1, #12
 800633e:	438a      	bics	r2, r1
 8006340:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	4a10      	ldr	r2, [pc, #64]	; (8006388 <HAL_ADC_PollForConversion+0x12c>)
 8006348:	4013      	ands	r3, r2
 800634a:	2201      	movs	r2, #1
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	639a      	str	r2, [r3, #56]	; 0x38
 8006352:	e00b      	b.n	800636c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	2220      	movs	r2, #32
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006364:	2201      	movs	r2, #1
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7e1b      	ldrb	r3, [r3, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	220c      	movs	r2, #12
 800637a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	0018      	movs	r0, r3
 8006380:	46bd      	mov	sp, r7
 8006382:	b004      	add	sp, #16
 8006384:	bd80      	pop	{r7, pc}
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	fffffefe 	.word	0xfffffefe

0800638c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800639a:	0018      	movs	r0, r3
 800639c:	46bd      	mov	sp, r7
 800639e:	b002      	add	sp, #8
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063ae:	230f      	movs	r3, #15
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063be:	2380      	movs	r3, #128	; 0x80
 80063c0:	055b      	lsls	r3, r3, #21
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d011      	beq.n	80063ea <HAL_ADC_ConfigChannel+0x46>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d00d      	beq.n	80063ea <HAL_ADC_ConfigChannel+0x46>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d009      	beq.n	80063ea <HAL_ADC_ConfigChannel+0x46>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d005      	beq.n	80063ea <HAL_ADC_ConfigChannel+0x46>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d001      	beq.n	80063ea <HAL_ADC_ConfigChannel+0x46>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2234      	movs	r2, #52	; 0x34
 80063ee:	5c9b      	ldrb	r3, [r3, r2]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_ADC_ConfigChannel+0x54>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e0bb      	b.n	8006570 <HAL_ADC_ConfigChannel+0x1cc>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2234      	movs	r2, #52	; 0x34
 80063fc:	2101      	movs	r1, #1
 80063fe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2204      	movs	r2, #4
 8006408:	4013      	ands	r3, r2
 800640a:	d000      	beq.n	800640e <HAL_ADC_ConfigChannel+0x6a>
 800640c:	e09f      	b.n	800654e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4a59      	ldr	r2, [pc, #356]	; (8006578 <HAL_ADC_ConfigChannel+0x1d4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d100      	bne.n	800641a <HAL_ADC_ConfigChannel+0x76>
 8006418:	e077      	b.n	800650a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2201      	movs	r2, #1
 8006426:	409a      	lsls	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006434:	2380      	movs	r3, #128	; 0x80
 8006436:	055b      	lsls	r3, r3, #21
 8006438:	429a      	cmp	r2, r3
 800643a:	d037      	beq.n	80064ac <HAL_ADC_ConfigChannel+0x108>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	2b01      	cmp	r3, #1
 8006442:	d033      	beq.n	80064ac <HAL_ADC_ConfigChannel+0x108>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	2b02      	cmp	r3, #2
 800644a:	d02f      	beq.n	80064ac <HAL_ADC_ConfigChannel+0x108>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	2b03      	cmp	r3, #3
 8006452:	d02b      	beq.n	80064ac <HAL_ADC_ConfigChannel+0x108>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	2b04      	cmp	r3, #4
 800645a:	d027      	beq.n	80064ac <HAL_ADC_ConfigChannel+0x108>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	2b05      	cmp	r3, #5
 8006462:	d023      	beq.n	80064ac <HAL_ADC_ConfigChannel+0x108>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	2b06      	cmp	r3, #6
 800646a:	d01f      	beq.n	80064ac <HAL_ADC_ConfigChannel+0x108>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	2b07      	cmp	r3, #7
 8006472:	d01b      	beq.n	80064ac <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	2107      	movs	r1, #7
 8006480:	400b      	ands	r3, r1
 8006482:	429a      	cmp	r2, r3
 8006484:	d012      	beq.n	80064ac <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	695a      	ldr	r2, [r3, #20]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2107      	movs	r1, #7
 8006492:	438a      	bics	r2, r1
 8006494:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6959      	ldr	r1, [r3, #20]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	2207      	movs	r2, #7
 80064a2:	401a      	ands	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d003      	beq.n	80064bc <HAL_ADC_ConfigChannel+0x118>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b11      	cmp	r3, #17
 80064ba:	d152      	bne.n	8006562 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80064bc:	4b2f      	ldr	r3, [pc, #188]	; (800657c <HAL_ADC_ConfigChannel+0x1d8>)
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d102      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x12a>
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	041b      	lsls	r3, r3, #16
 80064cc:	e001      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x12e>
 80064ce:	2380      	movs	r3, #128	; 0x80
 80064d0:	03db      	lsls	r3, r3, #15
 80064d2:	4a2a      	ldr	r2, [pc, #168]	; (800657c <HAL_ADC_ConfigChannel+0x1d8>)
 80064d4:	430b      	orrs	r3, r1
 80064d6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b10      	cmp	r3, #16
 80064de:	d140      	bne.n	8006562 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80064e0:	4b27      	ldr	r3, [pc, #156]	; (8006580 <HAL_ADC_ConfigChannel+0x1dc>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4927      	ldr	r1, [pc, #156]	; (8006584 <HAL_ADC_ConfigChannel+0x1e0>)
 80064e6:	0018      	movs	r0, r3
 80064e8:	f7f9 fe0e 	bl	8000108 <__udivsi3>
 80064ec:	0003      	movs	r3, r0
 80064ee:	001a      	movs	r2, r3
 80064f0:	0013      	movs	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	189b      	adds	r3, r3, r2
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80064fa:	e002      	b.n	8006502 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	3b01      	subs	r3, #1
 8006500:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f9      	bne.n	80064fc <HAL_ADC_ConfigChannel+0x158>
 8006508:	e02b      	b.n	8006562 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2101      	movs	r1, #1
 8006516:	4099      	lsls	r1, r3
 8006518:	000b      	movs	r3, r1
 800651a:	43d9      	mvns	r1, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	400a      	ands	r2, r1
 8006522:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b10      	cmp	r3, #16
 800652a:	d003      	beq.n	8006534 <HAL_ADC_ConfigChannel+0x190>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b11      	cmp	r3, #17
 8006532:	d116      	bne.n	8006562 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006534:	4b11      	ldr	r3, [pc, #68]	; (800657c <HAL_ADC_ConfigChannel+0x1d8>)
 8006536:	6819      	ldr	r1, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b10      	cmp	r3, #16
 800653e:	d101      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x1a0>
 8006540:	4a11      	ldr	r2, [pc, #68]	; (8006588 <HAL_ADC_ConfigChannel+0x1e4>)
 8006542:	e000      	b.n	8006546 <HAL_ADC_ConfigChannel+0x1a2>
 8006544:	4a11      	ldr	r2, [pc, #68]	; (800658c <HAL_ADC_ConfigChannel+0x1e8>)
 8006546:	4b0d      	ldr	r3, [pc, #52]	; (800657c <HAL_ADC_ConfigChannel+0x1d8>)
 8006548:	400a      	ands	r2, r1
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e009      	b.n	8006562 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	2220      	movs	r2, #32
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800655a:	230f      	movs	r3, #15
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	2201      	movs	r2, #1
 8006560:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2234      	movs	r2, #52	; 0x34
 8006566:	2100      	movs	r1, #0
 8006568:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800656a:	230f      	movs	r3, #15
 800656c:	18fb      	adds	r3, r7, r3
 800656e:	781b      	ldrb	r3, [r3, #0]
}
 8006570:	0018      	movs	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	b004      	add	sp, #16
 8006576:	bd80      	pop	{r7, pc}
 8006578:	00001001 	.word	0x00001001
 800657c:	40012708 	.word	0x40012708
 8006580:	20000024 	.word	0x20000024
 8006584:	000f4240 	.word	0x000f4240
 8006588:	ff7fffff 	.word	0xff7fffff
 800658c:	ffbfffff 	.word	0xffbfffff

08006590 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2203      	movs	r2, #3
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d112      	bne.n	80065d4 <ADC_Enable+0x44>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2201      	movs	r2, #1
 80065b6:	4013      	ands	r3, r2
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d009      	beq.n	80065d0 <ADC_Enable+0x40>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	2380      	movs	r3, #128	; 0x80
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	401a      	ands	r2, r3
 80065c8:	2380      	movs	r3, #128	; 0x80
 80065ca:	021b      	lsls	r3, r3, #8
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d101      	bne.n	80065d4 <ADC_Enable+0x44>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <ADC_Enable+0x46>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d152      	bne.n	8006680 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4a2a      	ldr	r2, [pc, #168]	; (800668c <ADC_Enable+0xfc>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	d00d      	beq.n	8006602 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	2210      	movs	r2, #16
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f6:	2201      	movs	r2, #1
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e03f      	b.n	8006682 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2101      	movs	r1, #1
 800660e:	430a      	orrs	r2, r1
 8006610:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006612:	4b1f      	ldr	r3, [pc, #124]	; (8006690 <ADC_Enable+0x100>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	491f      	ldr	r1, [pc, #124]	; (8006694 <ADC_Enable+0x104>)
 8006618:	0018      	movs	r0, r3
 800661a:	f7f9 fd75 	bl	8000108 <__udivsi3>
 800661e:	0003      	movs	r3, r0
 8006620:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006622:	e002      	b.n	800662a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	3b01      	subs	r3, #1
 8006628:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f9      	bne.n	8006624 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006630:	f7ff fc14 	bl	8005e5c <HAL_GetTick>
 8006634:	0003      	movs	r3, r0
 8006636:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006638:	e01b      	b.n	8006672 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800663a:	f7ff fc0f 	bl	8005e5c <HAL_GetTick>
 800663e:	0002      	movs	r2, r0
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d914      	bls.n	8006672 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2201      	movs	r2, #1
 8006650:	4013      	ands	r3, r2
 8006652:	2b01      	cmp	r3, #1
 8006654:	d00d      	beq.n	8006672 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	2210      	movs	r2, #16
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006666:	2201      	movs	r2, #1
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e007      	b.n	8006682 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2201      	movs	r2, #1
 800667a:	4013      	ands	r3, r2
 800667c:	2b01      	cmp	r3, #1
 800667e:	d1dc      	bne.n	800663a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	0018      	movs	r0, r3
 8006684:	46bd      	mov	sp, r7
 8006686:	b004      	add	sp, #16
 8006688:	bd80      	pop	{r7, pc}
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	80000017 	.word	0x80000017
 8006690:	20000024 	.word	0x20000024
 8006694:	000f4240 	.word	0x000f4240

08006698 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2203      	movs	r2, #3
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d112      	bne.n	80066d8 <ADC_Disable+0x40>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2201      	movs	r2, #1
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d009      	beq.n	80066d4 <ADC_Disable+0x3c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	2380      	movs	r3, #128	; 0x80
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	401a      	ands	r2, r3
 80066cc:	2380      	movs	r3, #128	; 0x80
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d101      	bne.n	80066d8 <ADC_Disable+0x40>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <ADC_Disable+0x42>
 80066d8:	2300      	movs	r3, #0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d048      	beq.n	8006770 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2205      	movs	r2, #5
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d110      	bne.n	800670e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2102      	movs	r1, #2
 80066f8:	430a      	orrs	r2, r1
 80066fa:	609a      	str	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2203      	movs	r2, #3
 8006702:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006704:	f7ff fbaa 	bl	8005e5c <HAL_GetTick>
 8006708:	0003      	movs	r3, r0
 800670a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800670c:	e029      	b.n	8006762 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	2210      	movs	r2, #16
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	2201      	movs	r2, #1
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e023      	b.n	8006772 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800672a:	f7ff fb97 	bl	8005e5c <HAL_GetTick>
 800672e:	0002      	movs	r2, r0
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d914      	bls.n	8006762 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2201      	movs	r2, #1
 8006740:	4013      	ands	r3, r2
 8006742:	2b01      	cmp	r3, #1
 8006744:	d10d      	bne.n	8006762 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	2210      	movs	r2, #16
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006756:	2201      	movs	r2, #1
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e007      	b.n	8006772 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2201      	movs	r2, #1
 800676a:	4013      	ands	r3, r2
 800676c:	2b01      	cmp	r3, #1
 800676e:	d0dc      	beq.n	800672a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	0018      	movs	r0, r3
 8006774:	46bd      	mov	sp, r7
 8006776:	b004      	add	sp, #16
 8006778:	bd80      	pop	{r7, pc}

0800677a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2204      	movs	r2, #4
 800678e:	4013      	ands	r3, r2
 8006790:	d03a      	beq.n	8006808 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2204      	movs	r2, #4
 800679a:	4013      	ands	r3, r2
 800679c:	2b04      	cmp	r3, #4
 800679e:	d10d      	bne.n	80067bc <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2202      	movs	r2, #2
 80067a8:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80067aa:	d107      	bne.n	80067bc <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2110      	movs	r1, #16
 80067b8:	430a      	orrs	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80067bc:	f7ff fb4e 	bl	8005e5c <HAL_GetTick>
 80067c0:	0003      	movs	r3, r0
 80067c2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80067c4:	e01a      	b.n	80067fc <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80067c6:	f7ff fb49 	bl	8005e5c <HAL_GetTick>
 80067ca:	0002      	movs	r2, r0
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d913      	bls.n	80067fc <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2204      	movs	r2, #4
 80067dc:	4013      	ands	r3, r2
 80067de:	d00d      	beq.n	80067fc <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	2210      	movs	r2, #16
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f0:	2201      	movs	r2, #1
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e006      	b.n	800680a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2204      	movs	r2, #4
 8006804:	4013      	ands	r3, r2
 8006806:	d1de      	bne.n	80067c6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	0018      	movs	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	b004      	add	sp, #16
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800681c:	2317      	movs	r3, #23
 800681e:	18fb      	adds	r3, r7, r3
 8006820:	2200      	movs	r2, #0
 8006822:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2234      	movs	r2, #52	; 0x34
 8006830:	5c9b      	ldrb	r3, [r3, r2]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d101      	bne.n	800683a <HAL_ADCEx_Calibration_Start+0x26>
 8006836:	2302      	movs	r3, #2
 8006838:	e08d      	b.n	8006956 <HAL_ADCEx_Calibration_Start+0x142>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2234      	movs	r2, #52	; 0x34
 800683e:	2101      	movs	r1, #1
 8006840:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2203      	movs	r2, #3
 800684a:	4013      	ands	r3, r2
 800684c:	2b01      	cmp	r3, #1
 800684e:	d112      	bne.n	8006876 <HAL_ADCEx_Calibration_Start+0x62>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2201      	movs	r2, #1
 8006858:	4013      	ands	r3, r2
 800685a:	2b01      	cmp	r3, #1
 800685c:	d009      	beq.n	8006872 <HAL_ADCEx_Calibration_Start+0x5e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	2380      	movs	r3, #128	; 0x80
 8006866:	021b      	lsls	r3, r3, #8
 8006868:	401a      	ands	r2, r3
 800686a:	2380      	movs	r3, #128	; 0x80
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	429a      	cmp	r2, r3
 8006870:	d101      	bne.n	8006876 <HAL_ADCEx_Calibration_Start+0x62>
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <HAL_ADCEx_Calibration_Start+0x64>
 8006876:	2300      	movs	r3, #0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d15b      	bne.n	8006934 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	4a37      	ldr	r2, [pc, #220]	; (8006960 <HAL_ADCEx_Calibration_Start+0x14c>)
 8006882:	4013      	ands	r3, r2
 8006884:	2202      	movs	r2, #2
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	2203      	movs	r2, #3
 8006894:	4013      	ands	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2103      	movs	r1, #3
 80068a4:	438a      	bics	r2, r1
 80068a6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2180      	movs	r1, #128	; 0x80
 80068b4:	0609      	lsls	r1, r1, #24
 80068b6:	430a      	orrs	r2, r1
 80068b8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80068ba:	f7ff facf 	bl	8005e5c <HAL_GetTick>
 80068be:	0003      	movs	r3, r0
 80068c0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80068c2:	e01d      	b.n	8006900 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80068c4:	f7ff faca 	bl	8005e5c <HAL_GetTick>
 80068c8:	0002      	movs	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d916      	bls.n	8006900 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	0fdb      	lsrs	r3, r3, #31
 80068da:	07da      	lsls	r2, r3, #31
 80068dc:	2380      	movs	r3, #128	; 0x80
 80068de:	061b      	lsls	r3, r3, #24
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d10d      	bne.n	8006900 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	2212      	movs	r2, #18
 80068ea:	4393      	bics	r3, r2
 80068ec:	2210      	movs	r2, #16
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2234      	movs	r2, #52	; 0x34
 80068f8:	2100      	movs	r1, #0
 80068fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e02a      	b.n	8006956 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	0fdb      	lsrs	r3, r3, #31
 8006908:	07da      	lsls	r2, r3, #31
 800690a:	2380      	movs	r3, #128	; 0x80
 800690c:	061b      	lsls	r3, r3, #24
 800690e:	429a      	cmp	r2, r3
 8006910:	d0d8      	beq.n	80068c4 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68d9      	ldr	r1, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	430a      	orrs	r2, r1
 8006920:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	2203      	movs	r2, #3
 8006928:	4393      	bics	r3, r2
 800692a:	2201      	movs	r2, #1
 800692c:	431a      	orrs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	639a      	str	r2, [r3, #56]	; 0x38
 8006932:	e009      	b.n	8006948 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	2220      	movs	r2, #32
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006940:	2317      	movs	r3, #23
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	2201      	movs	r2, #1
 8006946:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2234      	movs	r2, #52	; 0x34
 800694c:	2100      	movs	r1, #0
 800694e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006950:	2317      	movs	r3, #23
 8006952:	18fb      	adds	r3, r7, r3
 8006954:	781b      	ldrb	r3, [r3, #0]
}
 8006956:	0018      	movs	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	b006      	add	sp, #24
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	fffffefd 	.word	0xfffffefd

08006964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	0002      	movs	r2, r0
 800696c:	1dfb      	adds	r3, r7, #7
 800696e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006970:	1dfb      	adds	r3, r7, #7
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b7f      	cmp	r3, #127	; 0x7f
 8006976:	d809      	bhi.n	800698c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006978:	1dfb      	adds	r3, r7, #7
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	001a      	movs	r2, r3
 800697e:	231f      	movs	r3, #31
 8006980:	401a      	ands	r2, r3
 8006982:	4b04      	ldr	r3, [pc, #16]	; (8006994 <__NVIC_EnableIRQ+0x30>)
 8006984:	2101      	movs	r1, #1
 8006986:	4091      	lsls	r1, r2
 8006988:	000a      	movs	r2, r1
 800698a:	601a      	str	r2, [r3, #0]
  }
}
 800698c:	46c0      	nop			; (mov r8, r8)
 800698e:	46bd      	mov	sp, r7
 8006990:	b002      	add	sp, #8
 8006992:	bd80      	pop	{r7, pc}
 8006994:	e000e100 	.word	0xe000e100

08006998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	0002      	movs	r2, r0
 80069a0:	6039      	str	r1, [r7, #0]
 80069a2:	1dfb      	adds	r3, r7, #7
 80069a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80069a6:	1dfb      	adds	r3, r7, #7
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b7f      	cmp	r3, #127	; 0x7f
 80069ac:	d828      	bhi.n	8006a00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80069ae:	4a2f      	ldr	r2, [pc, #188]	; (8006a6c <__NVIC_SetPriority+0xd4>)
 80069b0:	1dfb      	adds	r3, r7, #7
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	b25b      	sxtb	r3, r3
 80069b6:	089b      	lsrs	r3, r3, #2
 80069b8:	33c0      	adds	r3, #192	; 0xc0
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	589b      	ldr	r3, [r3, r2]
 80069be:	1dfa      	adds	r2, r7, #7
 80069c0:	7812      	ldrb	r2, [r2, #0]
 80069c2:	0011      	movs	r1, r2
 80069c4:	2203      	movs	r2, #3
 80069c6:	400a      	ands	r2, r1
 80069c8:	00d2      	lsls	r2, r2, #3
 80069ca:	21ff      	movs	r1, #255	; 0xff
 80069cc:	4091      	lsls	r1, r2
 80069ce:	000a      	movs	r2, r1
 80069d0:	43d2      	mvns	r2, r2
 80069d2:	401a      	ands	r2, r3
 80069d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	019b      	lsls	r3, r3, #6
 80069da:	22ff      	movs	r2, #255	; 0xff
 80069dc:	401a      	ands	r2, r3
 80069de:	1dfb      	adds	r3, r7, #7
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	0018      	movs	r0, r3
 80069e4:	2303      	movs	r3, #3
 80069e6:	4003      	ands	r3, r0
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80069ec:	481f      	ldr	r0, [pc, #124]	; (8006a6c <__NVIC_SetPriority+0xd4>)
 80069ee:	1dfb      	adds	r3, r7, #7
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	089b      	lsrs	r3, r3, #2
 80069f6:	430a      	orrs	r2, r1
 80069f8:	33c0      	adds	r3, #192	; 0xc0
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80069fe:	e031      	b.n	8006a64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a00:	4a1b      	ldr	r2, [pc, #108]	; (8006a70 <__NVIC_SetPriority+0xd8>)
 8006a02:	1dfb      	adds	r3, r7, #7
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	0019      	movs	r1, r3
 8006a08:	230f      	movs	r3, #15
 8006a0a:	400b      	ands	r3, r1
 8006a0c:	3b08      	subs	r3, #8
 8006a0e:	089b      	lsrs	r3, r3, #2
 8006a10:	3306      	adds	r3, #6
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	18d3      	adds	r3, r2, r3
 8006a16:	3304      	adds	r3, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	1dfa      	adds	r2, r7, #7
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	0011      	movs	r1, r2
 8006a20:	2203      	movs	r2, #3
 8006a22:	400a      	ands	r2, r1
 8006a24:	00d2      	lsls	r2, r2, #3
 8006a26:	21ff      	movs	r1, #255	; 0xff
 8006a28:	4091      	lsls	r1, r2
 8006a2a:	000a      	movs	r2, r1
 8006a2c:	43d2      	mvns	r2, r2
 8006a2e:	401a      	ands	r2, r3
 8006a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	019b      	lsls	r3, r3, #6
 8006a36:	22ff      	movs	r2, #255	; 0xff
 8006a38:	401a      	ands	r2, r3
 8006a3a:	1dfb      	adds	r3, r7, #7
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	0018      	movs	r0, r3
 8006a40:	2303      	movs	r3, #3
 8006a42:	4003      	ands	r3, r0
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a48:	4809      	ldr	r0, [pc, #36]	; (8006a70 <__NVIC_SetPriority+0xd8>)
 8006a4a:	1dfb      	adds	r3, r7, #7
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	001c      	movs	r4, r3
 8006a50:	230f      	movs	r3, #15
 8006a52:	4023      	ands	r3, r4
 8006a54:	3b08      	subs	r3, #8
 8006a56:	089b      	lsrs	r3, r3, #2
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	3306      	adds	r3, #6
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	18c3      	adds	r3, r0, r3
 8006a60:	3304      	adds	r3, #4
 8006a62:	601a      	str	r2, [r3, #0]
}
 8006a64:	46c0      	nop			; (mov r8, r8)
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b003      	add	sp, #12
 8006a6a:	bd90      	pop	{r4, r7, pc}
 8006a6c:	e000e100 	.word	0xe000e100
 8006a70:	e000ed00 	.word	0xe000ed00

08006a74 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	210f      	movs	r1, #15
 8006a80:	187b      	adds	r3, r7, r1
 8006a82:	1c02      	adds	r2, r0, #0
 8006a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	b25b      	sxtb	r3, r3
 8006a8e:	0011      	movs	r1, r2
 8006a90:	0018      	movs	r0, r3
 8006a92:	f7ff ff81 	bl	8006998 <__NVIC_SetPriority>
}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	b004      	add	sp, #16
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	0002      	movs	r2, r0
 8006aa6:	1dfb      	adds	r3, r7, #7
 8006aa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006aaa:	1dfb      	adds	r3, r7, #7
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	b25b      	sxtb	r3, r3
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f7ff ff57 	bl	8006964 <__NVIC_EnableIRQ>
}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b002      	add	sp, #8
 8006abc:	bd80      	pop	{r7, pc}

08006abe <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2221      	movs	r2, #33	; 0x21
 8006aca:	5c9b      	ldrb	r3, [r3, r2]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d008      	beq.n	8006ae4 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	2100      	movs	r1, #0
 8006ade:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e020      	b.n	8006b26 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	210e      	movs	r1, #14
 8006af0:	438a      	bics	r2, r1
 8006af2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2101      	movs	r1, #1
 8006b00:	438a      	bics	r2, r1
 8006b02:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4091      	lsls	r1, r2
 8006b10:	000a      	movs	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2221      	movs	r2, #33	; 0x21
 8006b18:	2101      	movs	r1, #1
 8006b1a:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	2100      	movs	r1, #0
 8006b22:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	0018      	movs	r0, r3
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b002      	add	sp, #8
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b36:	230f      	movs	r3, #15
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2221      	movs	r2, #33	; 0x21
 8006b42:	5c9b      	ldrb	r3, [r3, r2]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d007      	beq.n	8006b5a <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006b50:	230f      	movs	r3, #15
 8006b52:	18fb      	adds	r3, r7, r3
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e028      	b.n	8006bac <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	210e      	movs	r1, #14
 8006b66:	438a      	bics	r2, r1
 8006b68:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2101      	movs	r1, #1
 8006b76:	438a      	bics	r2, r1
 8006b78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b82:	2101      	movs	r1, #1
 8006b84:	4091      	lsls	r1, r2
 8006b86:	000a      	movs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2221      	movs	r2, #33	; 0x21
 8006b8e:	2101      	movs	r1, #1
 8006b90:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	2100      	movs	r1, #0
 8006b98:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	0010      	movs	r0, r2
 8006baa:	4798      	blx	r3
    } 
  }
  return status;
 8006bac:	230f      	movs	r3, #15
 8006bae:	18fb      	adds	r3, r7, r3
 8006bb0:	781b      	ldrb	r3, [r3, #0]
}
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b004      	add	sp, #16
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bca:	e14f      	b.n	8006e6c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4091      	lsls	r1, r2
 8006bd6:	000a      	movs	r2, r1
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d100      	bne.n	8006be4 <HAL_GPIO_Init+0x28>
 8006be2:	e140      	b.n	8006e66 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2203      	movs	r2, #3
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d005      	beq.n	8006bfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d130      	bne.n	8006c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	2203      	movs	r2, #3
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	0013      	movs	r3, r2
 8006c0c:	43da      	mvns	r2, r3
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4013      	ands	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	409a      	lsls	r2, r3
 8006c1e:	0013      	movs	r3, r2
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c32:	2201      	movs	r2, #1
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	409a      	lsls	r2, r3
 8006c38:	0013      	movs	r3, r2
 8006c3a:	43da      	mvns	r2, r3
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	091b      	lsrs	r3, r3, #4
 8006c48:	2201      	movs	r2, #1
 8006c4a:	401a      	ands	r2, r3
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	409a      	lsls	r2, r3
 8006c50:	0013      	movs	r3, r2
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2203      	movs	r2, #3
 8006c64:	4013      	ands	r3, r2
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d017      	beq.n	8006c9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	2203      	movs	r2, #3
 8006c76:	409a      	lsls	r2, r3
 8006c78:	0013      	movs	r3, r2
 8006c7a:	43da      	mvns	r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	409a      	lsls	r2, r3
 8006c8c:	0013      	movs	r3, r2
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d123      	bne.n	8006cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	08da      	lsrs	r2, r3, #3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3208      	adds	r2, #8
 8006cae:	0092      	lsls	r2, r2, #2
 8006cb0:	58d3      	ldr	r3, [r2, r3]
 8006cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2207      	movs	r2, #7
 8006cb8:	4013      	ands	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	220f      	movs	r2, #15
 8006cbe:	409a      	lsls	r2, r3
 8006cc0:	0013      	movs	r3, r2
 8006cc2:	43da      	mvns	r2, r3
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2107      	movs	r1, #7
 8006cd2:	400b      	ands	r3, r1
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	0013      	movs	r3, r2
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	08da      	lsrs	r2, r3, #3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3208      	adds	r2, #8
 8006ce8:	0092      	lsls	r2, r2, #2
 8006cea:	6939      	ldr	r1, [r7, #16]
 8006cec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	409a      	lsls	r2, r3
 8006cfc:	0013      	movs	r3, r2
 8006cfe:	43da      	mvns	r2, r3
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4013      	ands	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2203      	movs	r2, #3
 8006d0c:	401a      	ands	r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	409a      	lsls	r2, r3
 8006d14:	0013      	movs	r3, r2
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	23c0      	movs	r3, #192	; 0xc0
 8006d28:	029b      	lsls	r3, r3, #10
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d100      	bne.n	8006d30 <HAL_GPIO_Init+0x174>
 8006d2e:	e09a      	b.n	8006e66 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d30:	4b54      	ldr	r3, [pc, #336]	; (8006e84 <HAL_GPIO_Init+0x2c8>)
 8006d32:	699a      	ldr	r2, [r3, #24]
 8006d34:	4b53      	ldr	r3, [pc, #332]	; (8006e84 <HAL_GPIO_Init+0x2c8>)
 8006d36:	2101      	movs	r1, #1
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	619a      	str	r2, [r3, #24]
 8006d3c:	4b51      	ldr	r3, [pc, #324]	; (8006e84 <HAL_GPIO_Init+0x2c8>)
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	2201      	movs	r2, #1
 8006d42:	4013      	ands	r3, r2
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006d48:	4a4f      	ldr	r2, [pc, #316]	; (8006e88 <HAL_GPIO_Init+0x2cc>)
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	089b      	lsrs	r3, r3, #2
 8006d4e:	3302      	adds	r3, #2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	589b      	ldr	r3, [r3, r2]
 8006d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2203      	movs	r2, #3
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	220f      	movs	r2, #15
 8006d60:	409a      	lsls	r2, r3
 8006d62:	0013      	movs	r3, r2
 8006d64:	43da      	mvns	r2, r3
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	2390      	movs	r3, #144	; 0x90
 8006d70:	05db      	lsls	r3, r3, #23
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d013      	beq.n	8006d9e <HAL_GPIO_Init+0x1e2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a44      	ldr	r2, [pc, #272]	; (8006e8c <HAL_GPIO_Init+0x2d0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00d      	beq.n	8006d9a <HAL_GPIO_Init+0x1de>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a43      	ldr	r2, [pc, #268]	; (8006e90 <HAL_GPIO_Init+0x2d4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d007      	beq.n	8006d96 <HAL_GPIO_Init+0x1da>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a42      	ldr	r2, [pc, #264]	; (8006e94 <HAL_GPIO_Init+0x2d8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d101      	bne.n	8006d92 <HAL_GPIO_Init+0x1d6>
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e006      	b.n	8006da0 <HAL_GPIO_Init+0x1e4>
 8006d92:	2305      	movs	r3, #5
 8006d94:	e004      	b.n	8006da0 <HAL_GPIO_Init+0x1e4>
 8006d96:	2302      	movs	r3, #2
 8006d98:	e002      	b.n	8006da0 <HAL_GPIO_Init+0x1e4>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <HAL_GPIO_Init+0x1e4>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	2103      	movs	r1, #3
 8006da4:	400a      	ands	r2, r1
 8006da6:	0092      	lsls	r2, r2, #2
 8006da8:	4093      	lsls	r3, r2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006db0:	4935      	ldr	r1, [pc, #212]	; (8006e88 <HAL_GPIO_Init+0x2cc>)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	089b      	lsrs	r3, r3, #2
 8006db6:	3302      	adds	r3, #2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006dbe:	4b36      	ldr	r3, [pc, #216]	; (8006e98 <HAL_GPIO_Init+0x2dc>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	43da      	mvns	r2, r3
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	2380      	movs	r3, #128	; 0x80
 8006dd4:	025b      	lsls	r3, r3, #9
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d003      	beq.n	8006de2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006de2:	4b2d      	ldr	r3, [pc, #180]	; (8006e98 <HAL_GPIO_Init+0x2dc>)
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006de8:	4b2b      	ldr	r3, [pc, #172]	; (8006e98 <HAL_GPIO_Init+0x2dc>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	43da      	mvns	r2, r3
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	4013      	ands	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	2380      	movs	r3, #128	; 0x80
 8006dfe:	029b      	lsls	r3, r3, #10
 8006e00:	4013      	ands	r3, r2
 8006e02:	d003      	beq.n	8006e0c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006e0c:	4b22      	ldr	r3, [pc, #136]	; (8006e98 <HAL_GPIO_Init+0x2dc>)
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e12:	4b21      	ldr	r3, [pc, #132]	; (8006e98 <HAL_GPIO_Init+0x2dc>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	43da      	mvns	r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	2380      	movs	r3, #128	; 0x80
 8006e28:	035b      	lsls	r3, r3, #13
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006e36:	4b18      	ldr	r3, [pc, #96]	; (8006e98 <HAL_GPIO_Init+0x2dc>)
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006e3c:	4b16      	ldr	r3, [pc, #88]	; (8006e98 <HAL_GPIO_Init+0x2dc>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	43da      	mvns	r2, r3
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	039b      	lsls	r3, r3, #14
 8006e54:	4013      	ands	r3, r2
 8006e56:	d003      	beq.n	8006e60 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006e60:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <HAL_GPIO_Init+0x2dc>)
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	40da      	lsrs	r2, r3
 8006e74:	1e13      	subs	r3, r2, #0
 8006e76:	d000      	beq.n	8006e7a <HAL_GPIO_Init+0x2be>
 8006e78:	e6a8      	b.n	8006bcc <HAL_GPIO_Init+0x10>
  } 
}
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	b006      	add	sp, #24
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	40021000 	.word	0x40021000
 8006e88:	40010000 	.word	0x40010000
 8006e8c:	48000400 	.word	0x48000400
 8006e90:	48000800 	.word	0x48000800
 8006e94:	48000c00 	.word	0x48000c00
 8006e98:	40010400 	.word	0x40010400

08006e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	0008      	movs	r0, r1
 8006ea6:	0011      	movs	r1, r2
 8006ea8:	1cbb      	adds	r3, r7, #2
 8006eaa:	1c02      	adds	r2, r0, #0
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	1c7b      	adds	r3, r7, #1
 8006eb0:	1c0a      	adds	r2, r1, #0
 8006eb2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006eb4:	1c7b      	adds	r3, r7, #1
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ebc:	1cbb      	adds	r3, r7, #2
 8006ebe:	881a      	ldrh	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ec4:	e003      	b.n	8006ece <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ec6:	1cbb      	adds	r3, r7, #2
 8006ec8:	881a      	ldrh	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b002      	add	sp, #8
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	0002      	movs	r2, r0
 8006ee0:	1dbb      	adds	r3, r7, #6
 8006ee2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ee4:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	1dba      	adds	r2, r7, #6
 8006eea:	8812      	ldrh	r2, [r2, #0]
 8006eec:	4013      	ands	r3, r2
 8006eee:	d008      	beq.n	8006f02 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ef0:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006ef2:	1dba      	adds	r2, r7, #6
 8006ef4:	8812      	ldrh	r2, [r2, #0]
 8006ef6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ef8:	1dbb      	adds	r3, r7, #6
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	0018      	movs	r0, r3
 8006efe:	f7fd fa11 	bl	8004324 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	46bd      	mov	sp, r7
 8006f06:	b002      	add	sp, #8
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	40010400 	.word	0x40010400

08006f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e082      	b.n	8007028 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2241      	movs	r2, #65	; 0x41
 8006f26:	5c9b      	ldrb	r3, [r3, r2]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d107      	bne.n	8006f3e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2240      	movs	r2, #64	; 0x40
 8006f32:	2100      	movs	r1, #0
 8006f34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f7fe fceb 	bl	8005914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2241      	movs	r2, #65	; 0x41
 8006f42:	2124      	movs	r1, #36	; 0x24
 8006f44:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2101      	movs	r1, #1
 8006f52:	438a      	bics	r2, r1
 8006f54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4934      	ldr	r1, [pc, #208]	; (8007030 <HAL_I2C_Init+0x120>)
 8006f60:	400a      	ands	r2, r1
 8006f62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4931      	ldr	r1, [pc, #196]	; (8007034 <HAL_I2C_Init+0x124>)
 8006f70:	400a      	ands	r2, r1
 8006f72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d108      	bne.n	8006f8e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2180      	movs	r1, #128	; 0x80
 8006f86:	0209      	lsls	r1, r1, #8
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	609a      	str	r2, [r3, #8]
 8006f8c:	e007      	b.n	8006f9e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2184      	movs	r1, #132	; 0x84
 8006f98:	0209      	lsls	r1, r1, #8
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d104      	bne.n	8006fb0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2280      	movs	r2, #128	; 0x80
 8006fac:	0112      	lsls	r2, r2, #4
 8006fae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	491f      	ldr	r1, [pc, #124]	; (8007038 <HAL_I2C_Init+0x128>)
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	491a      	ldr	r1, [pc, #104]	; (8007034 <HAL_I2C_Init+0x124>)
 8006fcc:	400a      	ands	r2, r1
 8006fce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69d9      	ldr	r1, [r3, #28]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1a      	ldr	r2, [r3, #32]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2101      	movs	r1, #1
 8007006:	430a      	orrs	r2, r1
 8007008:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2241      	movs	r2, #65	; 0x41
 8007014:	2120      	movs	r1, #32
 8007016:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2242      	movs	r2, #66	; 0x42
 8007022:	2100      	movs	r1, #0
 8007024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	0018      	movs	r0, r3
 800702a:	46bd      	mov	sp, r7
 800702c:	b002      	add	sp, #8
 800702e:	bd80      	pop	{r7, pc}
 8007030:	f0ffffff 	.word	0xf0ffffff
 8007034:	ffff7fff 	.word	0xffff7fff
 8007038:	02008000 	.word	0x02008000

0800703c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800703c:	b590      	push	{r4, r7, lr}
 800703e:	b089      	sub	sp, #36	; 0x24
 8007040:	af02      	add	r7, sp, #8
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	000c      	movs	r4, r1
 8007046:	0010      	movs	r0, r2
 8007048:	0019      	movs	r1, r3
 800704a:	230a      	movs	r3, #10
 800704c:	18fb      	adds	r3, r7, r3
 800704e:	1c22      	adds	r2, r4, #0
 8007050:	801a      	strh	r2, [r3, #0]
 8007052:	2308      	movs	r3, #8
 8007054:	18fb      	adds	r3, r7, r3
 8007056:	1c02      	adds	r2, r0, #0
 8007058:	801a      	strh	r2, [r3, #0]
 800705a:	1dbb      	adds	r3, r7, #6
 800705c:	1c0a      	adds	r2, r1, #0
 800705e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2241      	movs	r2, #65	; 0x41
 8007064:	5c9b      	ldrb	r3, [r3, r2]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b20      	cmp	r3, #32
 800706a:	d000      	beq.n	800706e <HAL_I2C_Mem_Write+0x32>
 800706c:	e10c      	b.n	8007288 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <HAL_I2C_Mem_Write+0x42>
 8007074:	232c      	movs	r3, #44	; 0x2c
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2280      	movs	r2, #128	; 0x80
 8007082:	0092      	lsls	r2, r2, #2
 8007084:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e0ff      	b.n	800728a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2240      	movs	r2, #64	; 0x40
 800708e:	5c9b      	ldrb	r3, [r3, r2]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_I2C_Mem_Write+0x5c>
 8007094:	2302      	movs	r3, #2
 8007096:	e0f8      	b.n	800728a <HAL_I2C_Mem_Write+0x24e>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2240      	movs	r2, #64	; 0x40
 800709c:	2101      	movs	r1, #1
 800709e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80070a0:	f7fe fedc 	bl	8005e5c <HAL_GetTick>
 80070a4:	0003      	movs	r3, r0
 80070a6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	0219      	lsls	r1, r3, #8
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	2319      	movs	r3, #25
 80070b4:	2201      	movs	r2, #1
 80070b6:	f000 f975 	bl	80073a4 <I2C_WaitOnFlagUntilTimeout>
 80070ba:	1e03      	subs	r3, r0, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e0e3      	b.n	800728a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2241      	movs	r2, #65	; 0x41
 80070c6:	2121      	movs	r1, #33	; 0x21
 80070c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2242      	movs	r2, #66	; 0x42
 80070ce:	2140      	movs	r1, #64	; 0x40
 80070d0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	222c      	movs	r2, #44	; 0x2c
 80070e2:	18ba      	adds	r2, r7, r2
 80070e4:	8812      	ldrh	r2, [r2, #0]
 80070e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070ee:	1dbb      	adds	r3, r7, #6
 80070f0:	881c      	ldrh	r4, [r3, #0]
 80070f2:	2308      	movs	r3, #8
 80070f4:	18fb      	adds	r3, r7, r3
 80070f6:	881a      	ldrh	r2, [r3, #0]
 80070f8:	230a      	movs	r3, #10
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	8819      	ldrh	r1, [r3, #0]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	0023      	movs	r3, r4
 800710a:	f000 f8c5 	bl	8007298 <I2C_RequestMemoryWrite>
 800710e:	1e03      	subs	r3, r0, #0
 8007110:	d005      	beq.n	800711e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2240      	movs	r2, #64	; 0x40
 8007116:	2100      	movs	r1, #0
 8007118:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e0b5      	b.n	800728a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007122:	b29b      	uxth	r3, r3
 8007124:	2bff      	cmp	r3, #255	; 0xff
 8007126:	d911      	bls.n	800714c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	22ff      	movs	r2, #255	; 0xff
 800712c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007132:	b2da      	uxtb	r2, r3
 8007134:	2380      	movs	r3, #128	; 0x80
 8007136:	045c      	lsls	r4, r3, #17
 8007138:	230a      	movs	r3, #10
 800713a:	18fb      	adds	r3, r7, r3
 800713c:	8819      	ldrh	r1, [r3, #0]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	2300      	movs	r3, #0
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	0023      	movs	r3, r4
 8007146:	f000 fa61 	bl	800760c <I2C_TransferConfig>
 800714a:	e012      	b.n	8007172 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007150:	b29a      	uxth	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715a:	b2da      	uxtb	r2, r3
 800715c:	2380      	movs	r3, #128	; 0x80
 800715e:	049c      	lsls	r4, r3, #18
 8007160:	230a      	movs	r3, #10
 8007162:	18fb      	adds	r3, r7, r3
 8007164:	8819      	ldrh	r1, [r3, #0]
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	2300      	movs	r3, #0
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	0023      	movs	r3, r4
 800716e:	f000 fa4d 	bl	800760c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	0018      	movs	r0, r3
 800717a:	f000 f952 	bl	8007422 <I2C_WaitOnTXISFlagUntilTimeout>
 800717e:	1e03      	subs	r3, r0, #0
 8007180:	d001      	beq.n	8007186 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e081      	b.n	800728a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	781a      	ldrb	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d03a      	beq.n	8007236 <HAL_I2C_Mem_Write+0x1fa>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d136      	bne.n	8007236 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	0013      	movs	r3, r2
 80071d2:	2200      	movs	r2, #0
 80071d4:	2180      	movs	r1, #128	; 0x80
 80071d6:	f000 f8e5 	bl	80073a4 <I2C_WaitOnFlagUntilTimeout>
 80071da:	1e03      	subs	r3, r0, #0
 80071dc:	d001      	beq.n	80071e2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e053      	b.n	800728a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	2bff      	cmp	r3, #255	; 0xff
 80071ea:	d911      	bls.n	8007210 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	22ff      	movs	r2, #255	; 0xff
 80071f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	2380      	movs	r3, #128	; 0x80
 80071fa:	045c      	lsls	r4, r3, #17
 80071fc:	230a      	movs	r3, #10
 80071fe:	18fb      	adds	r3, r7, r3
 8007200:	8819      	ldrh	r1, [r3, #0]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	2300      	movs	r3, #0
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	0023      	movs	r3, r4
 800720a:	f000 f9ff 	bl	800760c <I2C_TransferConfig>
 800720e:	e012      	b.n	8007236 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721e:	b2da      	uxtb	r2, r3
 8007220:	2380      	movs	r3, #128	; 0x80
 8007222:	049c      	lsls	r4, r3, #18
 8007224:	230a      	movs	r3, #10
 8007226:	18fb      	adds	r3, r7, r3
 8007228:	8819      	ldrh	r1, [r3, #0]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	2300      	movs	r3, #0
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	0023      	movs	r3, r4
 8007232:	f000 f9eb 	bl	800760c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d198      	bne.n	8007172 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	0018      	movs	r0, r3
 8007248:	f000 f92a 	bl	80074a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800724c:	1e03      	subs	r3, r0, #0
 800724e:	d001      	beq.n	8007254 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e01a      	b.n	800728a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2220      	movs	r2, #32
 800725a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	490b      	ldr	r1, [pc, #44]	; (8007294 <HAL_I2C_Mem_Write+0x258>)
 8007268:	400a      	ands	r2, r1
 800726a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2241      	movs	r2, #65	; 0x41
 8007270:	2120      	movs	r1, #32
 8007272:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2242      	movs	r2, #66	; 0x42
 8007278:	2100      	movs	r1, #0
 800727a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2240      	movs	r2, #64	; 0x40
 8007280:	2100      	movs	r1, #0
 8007282:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	e000      	b.n	800728a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007288:	2302      	movs	r3, #2
  }
}
 800728a:	0018      	movs	r0, r3
 800728c:	46bd      	mov	sp, r7
 800728e:	b007      	add	sp, #28
 8007290:	bd90      	pop	{r4, r7, pc}
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	fe00e800 	.word	0xfe00e800

08007298 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007298:	b5b0      	push	{r4, r5, r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	000c      	movs	r4, r1
 80072a2:	0010      	movs	r0, r2
 80072a4:	0019      	movs	r1, r3
 80072a6:	250a      	movs	r5, #10
 80072a8:	197b      	adds	r3, r7, r5
 80072aa:	1c22      	adds	r2, r4, #0
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	2308      	movs	r3, #8
 80072b0:	18fb      	adds	r3, r7, r3
 80072b2:	1c02      	adds	r2, r0, #0
 80072b4:	801a      	strh	r2, [r3, #0]
 80072b6:	1dbb      	adds	r3, r7, #6
 80072b8:	1c0a      	adds	r2, r1, #0
 80072ba:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80072bc:	1dbb      	adds	r3, r7, #6
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	2380      	movs	r3, #128	; 0x80
 80072c4:	045c      	lsls	r4, r3, #17
 80072c6:	197b      	adds	r3, r7, r5
 80072c8:	8819      	ldrh	r1, [r3, #0]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	4b23      	ldr	r3, [pc, #140]	; (800735c <I2C_RequestMemoryWrite+0xc4>)
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	0023      	movs	r3, r4
 80072d2:	f000 f99b 	bl	800760c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d8:	6a39      	ldr	r1, [r7, #32]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	0018      	movs	r0, r3
 80072de:	f000 f8a0 	bl	8007422 <I2C_WaitOnTXISFlagUntilTimeout>
 80072e2:	1e03      	subs	r3, r0, #0
 80072e4:	d001      	beq.n	80072ea <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e033      	b.n	8007352 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072ea:	1dbb      	adds	r3, r7, #6
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d107      	bne.n	8007302 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072f2:	2308      	movs	r3, #8
 80072f4:	18fb      	adds	r3, r7, r3
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	629a      	str	r2, [r3, #40]	; 0x28
 8007300:	e019      	b.n	8007336 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007302:	2308      	movs	r3, #8
 8007304:	18fb      	adds	r3, r7, r3
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	0a1b      	lsrs	r3, r3, #8
 800730a:	b29b      	uxth	r3, r3
 800730c:	b2da      	uxtb	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007316:	6a39      	ldr	r1, [r7, #32]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	0018      	movs	r0, r3
 800731c:	f000 f881 	bl	8007422 <I2C_WaitOnTXISFlagUntilTimeout>
 8007320:	1e03      	subs	r3, r0, #0
 8007322:	d001      	beq.n	8007328 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e014      	b.n	8007352 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007328:	2308      	movs	r3, #8
 800732a:	18fb      	adds	r3, r7, r3
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	b2da      	uxtb	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007336:	6a3a      	ldr	r2, [r7, #32]
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	0013      	movs	r3, r2
 8007340:	2200      	movs	r2, #0
 8007342:	2180      	movs	r1, #128	; 0x80
 8007344:	f000 f82e 	bl	80073a4 <I2C_WaitOnFlagUntilTimeout>
 8007348:	1e03      	subs	r3, r0, #0
 800734a:	d001      	beq.n	8007350 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	0018      	movs	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	b004      	add	sp, #16
 8007358:	bdb0      	pop	{r4, r5, r7, pc}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	80002000 	.word	0x80002000

08007360 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	2202      	movs	r2, #2
 8007370:	4013      	ands	r3, r2
 8007372:	2b02      	cmp	r3, #2
 8007374:	d103      	bne.n	800737e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	2201      	movs	r2, #1
 8007386:	4013      	ands	r3, r2
 8007388:	2b01      	cmp	r3, #1
 800738a:	d007      	beq.n	800739c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699a      	ldr	r2, [r3, #24]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2101      	movs	r1, #1
 8007398:	430a      	orrs	r2, r1
 800739a:	619a      	str	r2, [r3, #24]
  }
}
 800739c:	46c0      	nop			; (mov r8, r8)
 800739e:	46bd      	mov	sp, r7
 80073a0:	b002      	add	sp, #8
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	1dfb      	adds	r3, r7, #7
 80073b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073b4:	e021      	b.n	80073fa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	3301      	adds	r3, #1
 80073ba:	d01e      	beq.n	80073fa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073bc:	f7fe fd4e 	bl	8005e5c <HAL_GetTick>
 80073c0:	0002      	movs	r2, r0
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d302      	bcc.n	80073d2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d113      	bne.n	80073fa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d6:	2220      	movs	r2, #32
 80073d8:	431a      	orrs	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2241      	movs	r2, #65	; 0x41
 80073e2:	2120      	movs	r1, #32
 80073e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2242      	movs	r2, #66	; 0x42
 80073ea:	2100      	movs	r1, #0
 80073ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2240      	movs	r2, #64	; 0x40
 80073f2:	2100      	movs	r1, #0
 80073f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e00f      	b.n	800741a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	4013      	ands	r3, r2
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	425a      	negs	r2, r3
 800740a:	4153      	adcs	r3, r2
 800740c:	b2db      	uxtb	r3, r3
 800740e:	001a      	movs	r2, r3
 8007410:	1dfb      	adds	r3, r7, #7
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	d0ce      	beq.n	80073b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	0018      	movs	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	b004      	add	sp, #16
 8007420:	bd80      	pop	{r7, pc}

08007422 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800742e:	e02b      	b.n	8007488 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	0018      	movs	r0, r3
 8007438:	f000 f86e 	bl	8007518 <I2C_IsAcknowledgeFailed>
 800743c:	1e03      	subs	r3, r0, #0
 800743e:	d001      	beq.n	8007444 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e029      	b.n	8007498 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	3301      	adds	r3, #1
 8007448:	d01e      	beq.n	8007488 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744a:	f7fe fd07 	bl	8005e5c <HAL_GetTick>
 800744e:	0002      	movs	r2, r0
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	429a      	cmp	r2, r3
 8007458:	d302      	bcc.n	8007460 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d113      	bne.n	8007488 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007464:	2220      	movs	r2, #32
 8007466:	431a      	orrs	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2241      	movs	r2, #65	; 0x41
 8007470:	2120      	movs	r1, #32
 8007472:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2242      	movs	r2, #66	; 0x42
 8007478:	2100      	movs	r1, #0
 800747a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2240      	movs	r2, #64	; 0x40
 8007480:	2100      	movs	r1, #0
 8007482:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e007      	b.n	8007498 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	2202      	movs	r2, #2
 8007490:	4013      	ands	r3, r2
 8007492:	2b02      	cmp	r3, #2
 8007494:	d1cc      	bne.n	8007430 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	0018      	movs	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	b004      	add	sp, #16
 800749e:	bd80      	pop	{r7, pc}

080074a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074ac:	e028      	b.n	8007500 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	0018      	movs	r0, r3
 80074b6:	f000 f82f 	bl	8007518 <I2C_IsAcknowledgeFailed>
 80074ba:	1e03      	subs	r3, r0, #0
 80074bc:	d001      	beq.n	80074c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e026      	b.n	8007510 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c2:	f7fe fccb 	bl	8005e5c <HAL_GetTick>
 80074c6:	0002      	movs	r2, r0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d302      	bcc.n	80074d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d113      	bne.n	8007500 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074dc:	2220      	movs	r2, #32
 80074de:	431a      	orrs	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2241      	movs	r2, #65	; 0x41
 80074e8:	2120      	movs	r1, #32
 80074ea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2242      	movs	r2, #66	; 0x42
 80074f0:	2100      	movs	r1, #0
 80074f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2240      	movs	r2, #64	; 0x40
 80074f8:	2100      	movs	r1, #0
 80074fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e007      	b.n	8007510 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2220      	movs	r2, #32
 8007508:	4013      	ands	r3, r2
 800750a:	2b20      	cmp	r3, #32
 800750c:	d1cf      	bne.n	80074ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	0018      	movs	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	b004      	add	sp, #16
 8007516:	bd80      	pop	{r7, pc}

08007518 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	2210      	movs	r2, #16
 800752c:	4013      	ands	r3, r2
 800752e:	2b10      	cmp	r3, #16
 8007530:	d164      	bne.n	80075fc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	2380      	movs	r3, #128	; 0x80
 800753a:	049b      	lsls	r3, r3, #18
 800753c:	401a      	ands	r2, r3
 800753e:	2380      	movs	r3, #128	; 0x80
 8007540:	049b      	lsls	r3, r3, #18
 8007542:	429a      	cmp	r2, r3
 8007544:	d02b      	beq.n	800759e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2180      	movs	r1, #128	; 0x80
 8007552:	01c9      	lsls	r1, r1, #7
 8007554:	430a      	orrs	r2, r1
 8007556:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007558:	e021      	b.n	800759e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	3301      	adds	r3, #1
 800755e:	d01e      	beq.n	800759e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007560:	f7fe fc7c 	bl	8005e5c <HAL_GetTick>
 8007564:	0002      	movs	r2, r0
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	429a      	cmp	r2, r3
 800756e:	d302      	bcc.n	8007576 <I2C_IsAcknowledgeFailed+0x5e>
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d113      	bne.n	800759e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	2220      	movs	r2, #32
 800757c:	431a      	orrs	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2241      	movs	r2, #65	; 0x41
 8007586:	2120      	movs	r1, #32
 8007588:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2242      	movs	r2, #66	; 0x42
 800758e:	2100      	movs	r1, #0
 8007590:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2240      	movs	r2, #64	; 0x40
 8007596:	2100      	movs	r1, #0
 8007598:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e02f      	b.n	80075fe <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	2220      	movs	r2, #32
 80075a6:	4013      	ands	r3, r2
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	d1d6      	bne.n	800755a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2210      	movs	r2, #16
 80075b2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2220      	movs	r2, #32
 80075ba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	0018      	movs	r0, r3
 80075c0:	f7ff fece 	bl	8007360 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	490e      	ldr	r1, [pc, #56]	; (8007608 <I2C_IsAcknowledgeFailed+0xf0>)
 80075d0:	400a      	ands	r2, r1
 80075d2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d8:	2204      	movs	r2, #4
 80075da:	431a      	orrs	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2241      	movs	r2, #65	; 0x41
 80075e4:	2120      	movs	r1, #32
 80075e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2242      	movs	r2, #66	; 0x42
 80075ec:	2100      	movs	r1, #0
 80075ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2240      	movs	r2, #64	; 0x40
 80075f4:	2100      	movs	r1, #0
 80075f6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	0018      	movs	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	b004      	add	sp, #16
 8007604:	bd80      	pop	{r7, pc}
 8007606:	46c0      	nop			; (mov r8, r8)
 8007608:	fe00e800 	.word	0xfe00e800

0800760c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800760c:	b590      	push	{r4, r7, lr}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	0008      	movs	r0, r1
 8007616:	0011      	movs	r1, r2
 8007618:	607b      	str	r3, [r7, #4]
 800761a:	240a      	movs	r4, #10
 800761c:	193b      	adds	r3, r7, r4
 800761e:	1c02      	adds	r2, r0, #0
 8007620:	801a      	strh	r2, [r3, #0]
 8007622:	2009      	movs	r0, #9
 8007624:	183b      	adds	r3, r7, r0
 8007626:	1c0a      	adds	r2, r1, #0
 8007628:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	6a3a      	ldr	r2, [r7, #32]
 8007632:	0d51      	lsrs	r1, r2, #21
 8007634:	2280      	movs	r2, #128	; 0x80
 8007636:	00d2      	lsls	r2, r2, #3
 8007638:	400a      	ands	r2, r1
 800763a:	490e      	ldr	r1, [pc, #56]	; (8007674 <I2C_TransferConfig+0x68>)
 800763c:	430a      	orrs	r2, r1
 800763e:	43d2      	mvns	r2, r2
 8007640:	401a      	ands	r2, r3
 8007642:	0011      	movs	r1, r2
 8007644:	193b      	adds	r3, r7, r4
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	059b      	lsls	r3, r3, #22
 800764a:	0d9a      	lsrs	r2, r3, #22
 800764c:	183b      	adds	r3, r7, r0
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	0418      	lsls	r0, r3, #16
 8007652:	23ff      	movs	r3, #255	; 0xff
 8007654:	041b      	lsls	r3, r3, #16
 8007656:	4003      	ands	r3, r0
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	431a      	orrs	r2, r3
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	431a      	orrs	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	46bd      	mov	sp, r7
 800766e:	b005      	add	sp, #20
 8007670:	bd90      	pop	{r4, r7, pc}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	03ff63ff 	.word	0x03ff63ff

08007678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2241      	movs	r2, #65	; 0x41
 8007686:	5c9b      	ldrb	r3, [r3, r2]
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b20      	cmp	r3, #32
 800768c:	d138      	bne.n	8007700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2240      	movs	r2, #64	; 0x40
 8007692:	5c9b      	ldrb	r3, [r3, r2]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007698:	2302      	movs	r3, #2
 800769a:	e032      	b.n	8007702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2240      	movs	r2, #64	; 0x40
 80076a0:	2101      	movs	r1, #1
 80076a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2241      	movs	r2, #65	; 0x41
 80076a8:	2124      	movs	r1, #36	; 0x24
 80076aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2101      	movs	r1, #1
 80076b8:	438a      	bics	r2, r1
 80076ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4911      	ldr	r1, [pc, #68]	; (800770c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80076c8:	400a      	ands	r2, r1
 80076ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6819      	ldr	r1, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2101      	movs	r1, #1
 80076e8:	430a      	orrs	r2, r1
 80076ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2241      	movs	r2, #65	; 0x41
 80076f0:	2120      	movs	r1, #32
 80076f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2240      	movs	r2, #64	; 0x40
 80076f8:	2100      	movs	r1, #0
 80076fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e000      	b.n	8007702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007700:	2302      	movs	r3, #2
  }
}
 8007702:	0018      	movs	r0, r3
 8007704:	46bd      	mov	sp, r7
 8007706:	b002      	add	sp, #8
 8007708:	bd80      	pop	{r7, pc}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	ffffefff 	.word	0xffffefff

08007710 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2241      	movs	r2, #65	; 0x41
 800771e:	5c9b      	ldrb	r3, [r3, r2]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b20      	cmp	r3, #32
 8007724:	d139      	bne.n	800779a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2240      	movs	r2, #64	; 0x40
 800772a:	5c9b      	ldrb	r3, [r3, r2]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007730:	2302      	movs	r3, #2
 8007732:	e033      	b.n	800779c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2240      	movs	r2, #64	; 0x40
 8007738:	2101      	movs	r1, #1
 800773a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2241      	movs	r2, #65	; 0x41
 8007740:	2124      	movs	r1, #36	; 0x24
 8007742:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2101      	movs	r1, #1
 8007750:	438a      	bics	r2, r1
 8007752:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4a11      	ldr	r2, [pc, #68]	; (80077a4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007760:	4013      	ands	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	021b      	lsls	r3, r3, #8
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2101      	movs	r1, #1
 8007782:	430a      	orrs	r2, r1
 8007784:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2241      	movs	r2, #65	; 0x41
 800778a:	2120      	movs	r1, #32
 800778c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2240      	movs	r2, #64	; 0x40
 8007792:	2100      	movs	r1, #0
 8007794:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	e000      	b.n	800779c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800779a:	2302      	movs	r3, #2
  }
}
 800779c:	0018      	movs	r0, r3
 800779e:	46bd      	mov	sp, r7
 80077a0:	b004      	add	sp, #16
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	fffff0ff 	.word	0xfffff0ff

080077a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e305      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2201      	movs	r2, #1
 80077c0:	4013      	ands	r3, r2
 80077c2:	d100      	bne.n	80077c6 <HAL_RCC_OscConfig+0x1e>
 80077c4:	e08d      	b.n	80078e2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80077c6:	4bc5      	ldr	r3, [pc, #788]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	220c      	movs	r2, #12
 80077cc:	4013      	ands	r3, r2
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d00e      	beq.n	80077f0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80077d2:	4bc2      	ldr	r3, [pc, #776]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	220c      	movs	r2, #12
 80077d8:	4013      	ands	r3, r2
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d116      	bne.n	800780c <HAL_RCC_OscConfig+0x64>
 80077de:	4bbf      	ldr	r3, [pc, #764]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	23c0      	movs	r3, #192	; 0xc0
 80077e4:	025b      	lsls	r3, r3, #9
 80077e6:	401a      	ands	r2, r3
 80077e8:	2380      	movs	r3, #128	; 0x80
 80077ea:	025b      	lsls	r3, r3, #9
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d10d      	bne.n	800780c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f0:	4bba      	ldr	r3, [pc, #744]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	2380      	movs	r3, #128	; 0x80
 80077f6:	029b      	lsls	r3, r3, #10
 80077f8:	4013      	ands	r3, r2
 80077fa:	d100      	bne.n	80077fe <HAL_RCC_OscConfig+0x56>
 80077fc:	e070      	b.n	80078e0 <HAL_RCC_OscConfig+0x138>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d000      	beq.n	8007808 <HAL_RCC_OscConfig+0x60>
 8007806:	e06b      	b.n	80078e0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e2dc      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d107      	bne.n	8007824 <HAL_RCC_OscConfig+0x7c>
 8007814:	4bb1      	ldr	r3, [pc, #708]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	4bb0      	ldr	r3, [pc, #704]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800781a:	2180      	movs	r1, #128	; 0x80
 800781c:	0249      	lsls	r1, r1, #9
 800781e:	430a      	orrs	r2, r1
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	e02f      	b.n	8007884 <HAL_RCC_OscConfig+0xdc>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10c      	bne.n	8007846 <HAL_RCC_OscConfig+0x9e>
 800782c:	4bab      	ldr	r3, [pc, #684]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	4baa      	ldr	r3, [pc, #680]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007832:	49ab      	ldr	r1, [pc, #684]	; (8007ae0 <HAL_RCC_OscConfig+0x338>)
 8007834:	400a      	ands	r2, r1
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	4ba8      	ldr	r3, [pc, #672]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	4ba7      	ldr	r3, [pc, #668]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800783e:	49a9      	ldr	r1, [pc, #676]	; (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007840:	400a      	ands	r2, r1
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e01e      	b.n	8007884 <HAL_RCC_OscConfig+0xdc>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b05      	cmp	r3, #5
 800784c:	d10e      	bne.n	800786c <HAL_RCC_OscConfig+0xc4>
 800784e:	4ba3      	ldr	r3, [pc, #652]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	4ba2      	ldr	r3, [pc, #648]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007854:	2180      	movs	r1, #128	; 0x80
 8007856:	02c9      	lsls	r1, r1, #11
 8007858:	430a      	orrs	r2, r1
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	4b9f      	ldr	r3, [pc, #636]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	4b9e      	ldr	r3, [pc, #632]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007862:	2180      	movs	r1, #128	; 0x80
 8007864:	0249      	lsls	r1, r1, #9
 8007866:	430a      	orrs	r2, r1
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	e00b      	b.n	8007884 <HAL_RCC_OscConfig+0xdc>
 800786c:	4b9b      	ldr	r3, [pc, #620]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	4b9a      	ldr	r3, [pc, #616]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007872:	499b      	ldr	r1, [pc, #620]	; (8007ae0 <HAL_RCC_OscConfig+0x338>)
 8007874:	400a      	ands	r2, r1
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	4b98      	ldr	r3, [pc, #608]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	4b97      	ldr	r3, [pc, #604]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800787e:	4999      	ldr	r1, [pc, #612]	; (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007880:	400a      	ands	r2, r1
 8007882:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d014      	beq.n	80078b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800788c:	f7fe fae6 	bl	8005e5c <HAL_GetTick>
 8007890:	0003      	movs	r3, r0
 8007892:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007894:	e008      	b.n	80078a8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007896:	f7fe fae1 	bl	8005e5c <HAL_GetTick>
 800789a:	0002      	movs	r2, r0
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b64      	cmp	r3, #100	; 0x64
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e28e      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078a8:	4b8c      	ldr	r3, [pc, #560]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	2380      	movs	r3, #128	; 0x80
 80078ae:	029b      	lsls	r3, r3, #10
 80078b0:	4013      	ands	r3, r2
 80078b2:	d0f0      	beq.n	8007896 <HAL_RCC_OscConfig+0xee>
 80078b4:	e015      	b.n	80078e2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078b6:	f7fe fad1 	bl	8005e5c <HAL_GetTick>
 80078ba:	0003      	movs	r3, r0
 80078bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078c0:	f7fe facc 	bl	8005e5c <HAL_GetTick>
 80078c4:	0002      	movs	r2, r0
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b64      	cmp	r3, #100	; 0x64
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e279      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078d2:	4b82      	ldr	r3, [pc, #520]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	2380      	movs	r3, #128	; 0x80
 80078d8:	029b      	lsls	r3, r3, #10
 80078da:	4013      	ands	r3, r2
 80078dc:	d1f0      	bne.n	80078c0 <HAL_RCC_OscConfig+0x118>
 80078de:	e000      	b.n	80078e2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2202      	movs	r2, #2
 80078e8:	4013      	ands	r3, r2
 80078ea:	d100      	bne.n	80078ee <HAL_RCC_OscConfig+0x146>
 80078ec:	e06c      	b.n	80079c8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80078ee:	4b7b      	ldr	r3, [pc, #492]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	220c      	movs	r2, #12
 80078f4:	4013      	ands	r3, r2
 80078f6:	d00e      	beq.n	8007916 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80078f8:	4b78      	ldr	r3, [pc, #480]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	220c      	movs	r2, #12
 80078fe:	4013      	ands	r3, r2
 8007900:	2b08      	cmp	r3, #8
 8007902:	d11f      	bne.n	8007944 <HAL_RCC_OscConfig+0x19c>
 8007904:	4b75      	ldr	r3, [pc, #468]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	23c0      	movs	r3, #192	; 0xc0
 800790a:	025b      	lsls	r3, r3, #9
 800790c:	401a      	ands	r2, r3
 800790e:	2380      	movs	r3, #128	; 0x80
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	429a      	cmp	r2, r3
 8007914:	d116      	bne.n	8007944 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007916:	4b71      	ldr	r3, [pc, #452]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2202      	movs	r2, #2
 800791c:	4013      	ands	r3, r2
 800791e:	d005      	beq.n	800792c <HAL_RCC_OscConfig+0x184>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d001      	beq.n	800792c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e24c      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800792c:	4b6b      	ldr	r3, [pc, #428]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	22f8      	movs	r2, #248	; 0xf8
 8007932:	4393      	bics	r3, r2
 8007934:	0019      	movs	r1, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	00da      	lsls	r2, r3, #3
 800793c:	4b67      	ldr	r3, [pc, #412]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800793e:	430a      	orrs	r2, r1
 8007940:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007942:	e041      	b.n	80079c8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d024      	beq.n	8007996 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800794c:	4b63      	ldr	r3, [pc, #396]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	4b62      	ldr	r3, [pc, #392]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007952:	2101      	movs	r1, #1
 8007954:	430a      	orrs	r2, r1
 8007956:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007958:	f7fe fa80 	bl	8005e5c <HAL_GetTick>
 800795c:	0003      	movs	r3, r0
 800795e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007960:	e008      	b.n	8007974 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007962:	f7fe fa7b 	bl	8005e5c <HAL_GetTick>
 8007966:	0002      	movs	r2, r0
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	2b02      	cmp	r3, #2
 800796e:	d901      	bls.n	8007974 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e228      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007974:	4b59      	ldr	r3, [pc, #356]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2202      	movs	r2, #2
 800797a:	4013      	ands	r3, r2
 800797c:	d0f1      	beq.n	8007962 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797e:	4b57      	ldr	r3, [pc, #348]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	22f8      	movs	r2, #248	; 0xf8
 8007984:	4393      	bics	r3, r2
 8007986:	0019      	movs	r1, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	00da      	lsls	r2, r3, #3
 800798e:	4b53      	ldr	r3, [pc, #332]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007990:	430a      	orrs	r2, r1
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e018      	b.n	80079c8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007996:	4b51      	ldr	r3, [pc, #324]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4b50      	ldr	r3, [pc, #320]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 800799c:	2101      	movs	r1, #1
 800799e:	438a      	bics	r2, r1
 80079a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a2:	f7fe fa5b 	bl	8005e5c <HAL_GetTick>
 80079a6:	0003      	movs	r3, r0
 80079a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079ac:	f7fe fa56 	bl	8005e5c <HAL_GetTick>
 80079b0:	0002      	movs	r2, r0
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e203      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079be:	4b47      	ldr	r3, [pc, #284]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2202      	movs	r2, #2
 80079c4:	4013      	ands	r3, r2
 80079c6:	d1f1      	bne.n	80079ac <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2208      	movs	r2, #8
 80079ce:	4013      	ands	r3, r2
 80079d0:	d036      	beq.n	8007a40 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d019      	beq.n	8007a0e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079da:	4b40      	ldr	r3, [pc, #256]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80079dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079de:	4b3f      	ldr	r3, [pc, #252]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 80079e0:	2101      	movs	r1, #1
 80079e2:	430a      	orrs	r2, r1
 80079e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079e6:	f7fe fa39 	bl	8005e5c <HAL_GetTick>
 80079ea:	0003      	movs	r3, r0
 80079ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ee:	e008      	b.n	8007a02 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079f0:	f7fe fa34 	bl	8005e5c <HAL_GetTick>
 80079f4:	0002      	movs	r2, r0
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e1e1      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a02:	4b36      	ldr	r3, [pc, #216]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	2202      	movs	r2, #2
 8007a08:	4013      	ands	r3, r2
 8007a0a:	d0f1      	beq.n	80079f0 <HAL_RCC_OscConfig+0x248>
 8007a0c:	e018      	b.n	8007a40 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a0e:	4b33      	ldr	r3, [pc, #204]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a12:	4b32      	ldr	r3, [pc, #200]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007a14:	2101      	movs	r1, #1
 8007a16:	438a      	bics	r2, r1
 8007a18:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a1a:	f7fe fa1f 	bl	8005e5c <HAL_GetTick>
 8007a1e:	0003      	movs	r3, r0
 8007a20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a22:	e008      	b.n	8007a36 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a24:	f7fe fa1a 	bl	8005e5c <HAL_GetTick>
 8007a28:	0002      	movs	r2, r0
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e1c7      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a36:	4b29      	ldr	r3, [pc, #164]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	d1f1      	bne.n	8007a24 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2204      	movs	r2, #4
 8007a46:	4013      	ands	r3, r2
 8007a48:	d100      	bne.n	8007a4c <HAL_RCC_OscConfig+0x2a4>
 8007a4a:	e0b5      	b.n	8007bb8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a4c:	231f      	movs	r3, #31
 8007a4e:	18fb      	adds	r3, r7, r3
 8007a50:	2200      	movs	r2, #0
 8007a52:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a54:	4b21      	ldr	r3, [pc, #132]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	055b      	lsls	r3, r3, #21
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	d111      	bne.n	8007a84 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a60:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007a62:	69da      	ldr	r2, [r3, #28]
 8007a64:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007a66:	2180      	movs	r1, #128	; 0x80
 8007a68:	0549      	lsls	r1, r1, #21
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	61da      	str	r2, [r3, #28]
 8007a6e:	4b1b      	ldr	r3, [pc, #108]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007a70:	69da      	ldr	r2, [r3, #28]
 8007a72:	2380      	movs	r3, #128	; 0x80
 8007a74:	055b      	lsls	r3, r3, #21
 8007a76:	4013      	ands	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007a7c:	231f      	movs	r3, #31
 8007a7e:	18fb      	adds	r3, r7, r3
 8007a80:	2201      	movs	r2, #1
 8007a82:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a84:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <HAL_RCC_OscConfig+0x340>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	2380      	movs	r3, #128	; 0x80
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	d11a      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a90:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <HAL_RCC_OscConfig+0x340>)
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <HAL_RCC_OscConfig+0x340>)
 8007a96:	2180      	movs	r1, #128	; 0x80
 8007a98:	0049      	lsls	r1, r1, #1
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a9e:	f7fe f9dd 	bl	8005e5c <HAL_GetTick>
 8007aa2:	0003      	movs	r3, r0
 8007aa4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa8:	f7fe f9d8 	bl	8005e5c <HAL_GetTick>
 8007aac:	0002      	movs	r2, r0
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b64      	cmp	r3, #100	; 0x64
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e185      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aba:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <HAL_RCC_OscConfig+0x340>)
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	2380      	movs	r3, #128	; 0x80
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	d0f0      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d10e      	bne.n	8007aec <HAL_RCC_OscConfig+0x344>
 8007ace:	4b03      	ldr	r3, [pc, #12]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007ad0:	6a1a      	ldr	r2, [r3, #32]
 8007ad2:	4b02      	ldr	r3, [pc, #8]	; (8007adc <HAL_RCC_OscConfig+0x334>)
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	621a      	str	r2, [r3, #32]
 8007ada:	e035      	b.n	8007b48 <HAL_RCC_OscConfig+0x3a0>
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	fffeffff 	.word	0xfffeffff
 8007ae4:	fffbffff 	.word	0xfffbffff
 8007ae8:	40007000 	.word	0x40007000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10c      	bne.n	8007b0e <HAL_RCC_OscConfig+0x366>
 8007af4:	4bb6      	ldr	r3, [pc, #728]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007af6:	6a1a      	ldr	r2, [r3, #32]
 8007af8:	4bb5      	ldr	r3, [pc, #724]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007afa:	2101      	movs	r1, #1
 8007afc:	438a      	bics	r2, r1
 8007afe:	621a      	str	r2, [r3, #32]
 8007b00:	4bb3      	ldr	r3, [pc, #716]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b02:	6a1a      	ldr	r2, [r3, #32]
 8007b04:	4bb2      	ldr	r3, [pc, #712]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b06:	2104      	movs	r1, #4
 8007b08:	438a      	bics	r2, r1
 8007b0a:	621a      	str	r2, [r3, #32]
 8007b0c:	e01c      	b.n	8007b48 <HAL_RCC_OscConfig+0x3a0>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	2b05      	cmp	r3, #5
 8007b14:	d10c      	bne.n	8007b30 <HAL_RCC_OscConfig+0x388>
 8007b16:	4bae      	ldr	r3, [pc, #696]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b18:	6a1a      	ldr	r2, [r3, #32]
 8007b1a:	4bad      	ldr	r3, [pc, #692]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b1c:	2104      	movs	r1, #4
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	621a      	str	r2, [r3, #32]
 8007b22:	4bab      	ldr	r3, [pc, #684]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b24:	6a1a      	ldr	r2, [r3, #32]
 8007b26:	4baa      	ldr	r3, [pc, #680]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b28:	2101      	movs	r1, #1
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	621a      	str	r2, [r3, #32]
 8007b2e:	e00b      	b.n	8007b48 <HAL_RCC_OscConfig+0x3a0>
 8007b30:	4ba7      	ldr	r3, [pc, #668]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b32:	6a1a      	ldr	r2, [r3, #32]
 8007b34:	4ba6      	ldr	r3, [pc, #664]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b36:	2101      	movs	r1, #1
 8007b38:	438a      	bics	r2, r1
 8007b3a:	621a      	str	r2, [r3, #32]
 8007b3c:	4ba4      	ldr	r3, [pc, #656]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b3e:	6a1a      	ldr	r2, [r3, #32]
 8007b40:	4ba3      	ldr	r3, [pc, #652]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b42:	2104      	movs	r1, #4
 8007b44:	438a      	bics	r2, r1
 8007b46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d014      	beq.n	8007b7a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b50:	f7fe f984 	bl	8005e5c <HAL_GetTick>
 8007b54:	0003      	movs	r3, r0
 8007b56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b58:	e009      	b.n	8007b6e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b5a:	f7fe f97f 	bl	8005e5c <HAL_GetTick>
 8007b5e:	0002      	movs	r2, r0
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	4a9b      	ldr	r2, [pc, #620]	; (8007dd4 <HAL_RCC_OscConfig+0x62c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e12b      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6e:	4b98      	ldr	r3, [pc, #608]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	2202      	movs	r2, #2
 8007b74:	4013      	ands	r3, r2
 8007b76:	d0f0      	beq.n	8007b5a <HAL_RCC_OscConfig+0x3b2>
 8007b78:	e013      	b.n	8007ba2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b7a:	f7fe f96f 	bl	8005e5c <HAL_GetTick>
 8007b7e:	0003      	movs	r3, r0
 8007b80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b82:	e009      	b.n	8007b98 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b84:	f7fe f96a 	bl	8005e5c <HAL_GetTick>
 8007b88:	0002      	movs	r2, r0
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	4a91      	ldr	r2, [pc, #580]	; (8007dd4 <HAL_RCC_OscConfig+0x62c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d901      	bls.n	8007b98 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e116      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b98:	4b8d      	ldr	r3, [pc, #564]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	d1f0      	bne.n	8007b84 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007ba2:	231f      	movs	r3, #31
 8007ba4:	18fb      	adds	r3, r7, r3
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d105      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bac:	4b88      	ldr	r3, [pc, #544]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007bae:	69da      	ldr	r2, [r3, #28]
 8007bb0:	4b87      	ldr	r3, [pc, #540]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007bb2:	4989      	ldr	r1, [pc, #548]	; (8007dd8 <HAL_RCC_OscConfig+0x630>)
 8007bb4:	400a      	ands	r2, r1
 8007bb6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2210      	movs	r2, #16
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	d063      	beq.n	8007c8a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d12a      	bne.n	8007c20 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007bca:	4b81      	ldr	r3, [pc, #516]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bce:	4b80      	ldr	r3, [pc, #512]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007bd0:	2104      	movs	r1, #4
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8007bd6:	4b7e      	ldr	r3, [pc, #504]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bda:	4b7d      	ldr	r3, [pc, #500]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007bdc:	2101      	movs	r1, #1
 8007bde:	430a      	orrs	r2, r1
 8007be0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007be2:	f7fe f93b 	bl	8005e5c <HAL_GetTick>
 8007be6:	0003      	movs	r3, r0
 8007be8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007bec:	f7fe f936 	bl	8005e5c <HAL_GetTick>
 8007bf0:	0002      	movs	r2, r0
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e0e3      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007bfe:	4b74      	ldr	r3, [pc, #464]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c02:	2202      	movs	r2, #2
 8007c04:	4013      	ands	r3, r2
 8007c06:	d0f1      	beq.n	8007bec <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007c08:	4b71      	ldr	r3, [pc, #452]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0c:	22f8      	movs	r2, #248	; 0xf8
 8007c0e:	4393      	bics	r3, r2
 8007c10:	0019      	movs	r1, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	00da      	lsls	r2, r3, #3
 8007c18:	4b6d      	ldr	r3, [pc, #436]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8007c1e:	e034      	b.n	8007c8a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	3305      	adds	r3, #5
 8007c26:	d111      	bne.n	8007c4c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8007c28:	4b69      	ldr	r3, [pc, #420]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c2c:	4b68      	ldr	r3, [pc, #416]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c2e:	2104      	movs	r1, #4
 8007c30:	438a      	bics	r2, r1
 8007c32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007c34:	4b66      	ldr	r3, [pc, #408]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c38:	22f8      	movs	r2, #248	; 0xf8
 8007c3a:	4393      	bics	r3, r2
 8007c3c:	0019      	movs	r1, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	00da      	lsls	r2, r3, #3
 8007c44:	4b62      	ldr	r3, [pc, #392]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c46:	430a      	orrs	r2, r1
 8007c48:	635a      	str	r2, [r3, #52]	; 0x34
 8007c4a:	e01e      	b.n	8007c8a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007c4c:	4b60      	ldr	r3, [pc, #384]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c50:	4b5f      	ldr	r3, [pc, #380]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c52:	2104      	movs	r1, #4
 8007c54:	430a      	orrs	r2, r1
 8007c56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8007c58:	4b5d      	ldr	r3, [pc, #372]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c5c:	4b5c      	ldr	r3, [pc, #368]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c5e:	2101      	movs	r1, #1
 8007c60:	438a      	bics	r2, r1
 8007c62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c64:	f7fe f8fa 	bl	8005e5c <HAL_GetTick>
 8007c68:	0003      	movs	r3, r0
 8007c6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007c6c:	e008      	b.n	8007c80 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007c6e:	f7fe f8f5 	bl	8005e5c <HAL_GetTick>
 8007c72:	0002      	movs	r2, r0
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e0a2      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007c80:	4b53      	ldr	r3, [pc, #332]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c84:	2202      	movs	r2, #2
 8007c86:	4013      	ands	r3, r2
 8007c88:	d1f1      	bne.n	8007c6e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d100      	bne.n	8007c94 <HAL_RCC_OscConfig+0x4ec>
 8007c92:	e097      	b.n	8007dc4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c94:	4b4e      	ldr	r3, [pc, #312]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	220c      	movs	r2, #12
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	d100      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x4fa>
 8007ca0:	e06b      	b.n	8007d7a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d14c      	bne.n	8007d44 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007caa:	4b49      	ldr	r3, [pc, #292]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4b48      	ldr	r3, [pc, #288]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007cb0:	494a      	ldr	r1, [pc, #296]	; (8007ddc <HAL_RCC_OscConfig+0x634>)
 8007cb2:	400a      	ands	r2, r1
 8007cb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb6:	f7fe f8d1 	bl	8005e5c <HAL_GetTick>
 8007cba:	0003      	movs	r3, r0
 8007cbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cc0:	f7fe f8cc 	bl	8005e5c <HAL_GetTick>
 8007cc4:	0002      	movs	r2, r0
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e079      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cd2:	4b3f      	ldr	r3, [pc, #252]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	2380      	movs	r3, #128	; 0x80
 8007cd8:	049b      	lsls	r3, r3, #18
 8007cda:	4013      	ands	r3, r2
 8007cdc:	d1f0      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cde:	4b3c      	ldr	r3, [pc, #240]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce2:	220f      	movs	r2, #15
 8007ce4:	4393      	bics	r3, r2
 8007ce6:	0019      	movs	r1, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cec:	4b38      	ldr	r3, [pc, #224]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007cf2:	4b37      	ldr	r3, [pc, #220]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	4a3a      	ldr	r2, [pc, #232]	; (8007de0 <HAL_RCC_OscConfig+0x638>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	0019      	movs	r1, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	431a      	orrs	r2, r3
 8007d06:	4b32      	ldr	r3, [pc, #200]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d0c:	4b30      	ldr	r3, [pc, #192]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4b2f      	ldr	r3, [pc, #188]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007d12:	2180      	movs	r1, #128	; 0x80
 8007d14:	0449      	lsls	r1, r1, #17
 8007d16:	430a      	orrs	r2, r1
 8007d18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d1a:	f7fe f89f 	bl	8005e5c <HAL_GetTick>
 8007d1e:	0003      	movs	r3, r0
 8007d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d22:	e008      	b.n	8007d36 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d24:	f7fe f89a 	bl	8005e5c <HAL_GetTick>
 8007d28:	0002      	movs	r2, r0
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e047      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d36:	4b26      	ldr	r3, [pc, #152]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	2380      	movs	r3, #128	; 0x80
 8007d3c:	049b      	lsls	r3, r3, #18
 8007d3e:	4013      	ands	r3, r2
 8007d40:	d0f0      	beq.n	8007d24 <HAL_RCC_OscConfig+0x57c>
 8007d42:	e03f      	b.n	8007dc4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d44:	4b22      	ldr	r3, [pc, #136]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007d4a:	4924      	ldr	r1, [pc, #144]	; (8007ddc <HAL_RCC_OscConfig+0x634>)
 8007d4c:	400a      	ands	r2, r1
 8007d4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d50:	f7fe f884 	bl	8005e5c <HAL_GetTick>
 8007d54:	0003      	movs	r3, r0
 8007d56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d58:	e008      	b.n	8007d6c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d5a:	f7fe f87f 	bl	8005e5c <HAL_GetTick>
 8007d5e:	0002      	movs	r2, r0
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d901      	bls.n	8007d6c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e02c      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d6c:	4b18      	ldr	r3, [pc, #96]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	2380      	movs	r3, #128	; 0x80
 8007d72:	049b      	lsls	r3, r3, #18
 8007d74:	4013      	ands	r3, r2
 8007d76:	d1f0      	bne.n	8007d5a <HAL_RCC_OscConfig+0x5b2>
 8007d78:	e024      	b.n	8007dc4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e01f      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007d86:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8007d8c:	4b10      	ldr	r3, [pc, #64]	; (8007dd0 <HAL_RCC_OscConfig+0x628>)
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	23c0      	movs	r3, #192	; 0xc0
 8007d96:	025b      	lsls	r3, r3, #9
 8007d98:	401a      	ands	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d10e      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	220f      	movs	r2, #15
 8007da6:	401a      	ands	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d107      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	23f0      	movs	r3, #240	; 0xf0
 8007db4:	039b      	lsls	r3, r3, #14
 8007db6:	401a      	ands	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d001      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e000      	b.n	8007dc6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b008      	add	sp, #32
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	40021000 	.word	0x40021000
 8007dd4:	00001388 	.word	0x00001388
 8007dd8:	efffffff 	.word	0xefffffff
 8007ddc:	feffffff 	.word	0xfeffffff
 8007de0:	ffc27fff 	.word	0xffc27fff

08007de4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e0b3      	b.n	8007f60 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007df8:	4b5b      	ldr	r3, [pc, #364]	; (8007f68 <HAL_RCC_ClockConfig+0x184>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4013      	ands	r3, r2
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d911      	bls.n	8007e2a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e06:	4b58      	ldr	r3, [pc, #352]	; (8007f68 <HAL_RCC_ClockConfig+0x184>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	4393      	bics	r3, r2
 8007e0e:	0019      	movs	r1, r3
 8007e10:	4b55      	ldr	r3, [pc, #340]	; (8007f68 <HAL_RCC_ClockConfig+0x184>)
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e18:	4b53      	ldr	r3, [pc, #332]	; (8007f68 <HAL_RCC_ClockConfig+0x184>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	4013      	ands	r3, r2
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d001      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e09a      	b.n	8007f60 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	4013      	ands	r3, r2
 8007e32:	d015      	beq.n	8007e60 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2204      	movs	r2, #4
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	d006      	beq.n	8007e4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007e3e:	4b4b      	ldr	r3, [pc, #300]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	4b4a      	ldr	r3, [pc, #296]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007e44:	21e0      	movs	r1, #224	; 0xe0
 8007e46:	00c9      	lsls	r1, r1, #3
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e4c:	4b47      	ldr	r3, [pc, #284]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	22f0      	movs	r2, #240	; 0xf0
 8007e52:	4393      	bics	r3, r2
 8007e54:	0019      	movs	r1, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689a      	ldr	r2, [r3, #8]
 8007e5a:	4b44      	ldr	r3, [pc, #272]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2201      	movs	r2, #1
 8007e66:	4013      	ands	r3, r2
 8007e68:	d040      	beq.n	8007eec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d107      	bne.n	8007e82 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e72:	4b3e      	ldr	r3, [pc, #248]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	2380      	movs	r3, #128	; 0x80
 8007e78:	029b      	lsls	r3, r3, #10
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	d114      	bne.n	8007ea8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e06e      	b.n	8007f60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d107      	bne.n	8007e9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e8a:	4b38      	ldr	r3, [pc, #224]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	2380      	movs	r3, #128	; 0x80
 8007e90:	049b      	lsls	r3, r3, #18
 8007e92:	4013      	ands	r3, r2
 8007e94:	d108      	bne.n	8007ea8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e062      	b.n	8007f60 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e9a:	4b34      	ldr	r3, [pc, #208]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	d101      	bne.n	8007ea8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e05b      	b.n	8007f60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ea8:	4b30      	ldr	r3, [pc, #192]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2203      	movs	r2, #3
 8007eae:	4393      	bics	r3, r2
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4b2d      	ldr	r3, [pc, #180]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ebc:	f7fd ffce 	bl	8005e5c <HAL_GetTick>
 8007ec0:	0003      	movs	r3, r0
 8007ec2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ec4:	e009      	b.n	8007eda <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ec6:	f7fd ffc9 	bl	8005e5c <HAL_GetTick>
 8007eca:	0002      	movs	r2, r0
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	4a27      	ldr	r2, [pc, #156]	; (8007f70 <HAL_RCC_ClockConfig+0x18c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e042      	b.n	8007f60 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eda:	4b24      	ldr	r3, [pc, #144]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	220c      	movs	r2, #12
 8007ee0:	401a      	ands	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d1ec      	bne.n	8007ec6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007eec:	4b1e      	ldr	r3, [pc, #120]	; (8007f68 <HAL_RCC_ClockConfig+0x184>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d211      	bcs.n	8007f1e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007efa:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <HAL_RCC_ClockConfig+0x184>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2201      	movs	r2, #1
 8007f00:	4393      	bics	r3, r2
 8007f02:	0019      	movs	r1, r3
 8007f04:	4b18      	ldr	r3, [pc, #96]	; (8007f68 <HAL_RCC_ClockConfig+0x184>)
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f0c:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <HAL_RCC_ClockConfig+0x184>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2201      	movs	r2, #1
 8007f12:	4013      	ands	r3, r2
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d001      	beq.n	8007f1e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e020      	b.n	8007f60 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2204      	movs	r2, #4
 8007f24:	4013      	ands	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007f28:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	4a11      	ldr	r2, [pc, #68]	; (8007f74 <HAL_RCC_ClockConfig+0x190>)
 8007f2e:	4013      	ands	r3, r2
 8007f30:	0019      	movs	r1, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007f3c:	f000 f820 	bl	8007f80 <HAL_RCC_GetSysClockFreq>
 8007f40:	0001      	movs	r1, r0
 8007f42:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <HAL_RCC_ClockConfig+0x188>)
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	091b      	lsrs	r3, r3, #4
 8007f48:	220f      	movs	r2, #15
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <HAL_RCC_ClockConfig+0x194>)
 8007f4e:	5cd3      	ldrb	r3, [r2, r3]
 8007f50:	000a      	movs	r2, r1
 8007f52:	40da      	lsrs	r2, r3
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <HAL_RCC_ClockConfig+0x198>)
 8007f56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007f58:	2000      	movs	r0, #0
 8007f5a:	f7fd fe65 	bl	8005c28 <HAL_InitTick>
  
  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	0018      	movs	r0, r3
 8007f62:	46bd      	mov	sp, r7
 8007f64:	b004      	add	sp, #16
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40022000 	.word	0x40022000
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	00001388 	.word	0x00001388
 8007f74:	fffff8ff 	.word	0xfffff8ff
 8007f78:	0800fe60 	.word	0x0800fe60
 8007f7c:	20000024 	.word	0x20000024

08007f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	b08f      	sub	sp, #60	; 0x3c
 8007f84:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8007f86:	2314      	movs	r3, #20
 8007f88:	18fb      	adds	r3, r7, r3
 8007f8a:	4a2c      	ldr	r2, [pc, #176]	; (800803c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007f8e:	c313      	stmia	r3!, {r0, r1, r4}
 8007f90:	6812      	ldr	r2, [r2, #0]
 8007f92:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8007f94:	1d3b      	adds	r3, r7, #4
 8007f96:	4a2a      	ldr	r2, [pc, #168]	; (8008040 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007f98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007f9a:	c313      	stmia	r3!, {r0, r1, r4}
 8007f9c:	6812      	ldr	r2, [r2, #0]
 8007f9e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fa8:	2300      	movs	r3, #0
 8007faa:	637b      	str	r3, [r7, #52]	; 0x34
 8007fac:	2300      	movs	r3, #0
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8007fb4:	4b23      	ldr	r3, [pc, #140]	; (8008044 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	220c      	movs	r2, #12
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d002      	beq.n	8007fca <HAL_RCC_GetSysClockFreq+0x4a>
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d003      	beq.n	8007fd0 <HAL_RCC_GetSysClockFreq+0x50>
 8007fc8:	e02f      	b.n	800802a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007fca:	4b1f      	ldr	r3, [pc, #124]	; (8008048 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007fcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007fce:	e02f      	b.n	8008030 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	0c9b      	lsrs	r3, r3, #18
 8007fd4:	220f      	movs	r2, #15
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2214      	movs	r2, #20
 8007fda:	18ba      	adds	r2, r7, r2
 8007fdc:	5cd3      	ldrb	r3, [r2, r3]
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007fe0:	4b18      	ldr	r3, [pc, #96]	; (8008044 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	220f      	movs	r2, #15
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	1d3a      	adds	r2, r7, #4
 8007fea:	5cd3      	ldrb	r3, [r2, r3]
 8007fec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff0:	23c0      	movs	r3, #192	; 0xc0
 8007ff2:	025b      	lsls	r3, r3, #9
 8007ff4:	401a      	ands	r2, r3
 8007ff6:	2380      	movs	r3, #128	; 0x80
 8007ff8:	025b      	lsls	r3, r3, #9
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d109      	bne.n	8008012 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008000:	4811      	ldr	r0, [pc, #68]	; (8008048 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008002:	f7f8 f881 	bl	8000108 <__udivsi3>
 8008006:	0003      	movs	r3, r0
 8008008:	001a      	movs	r2, r3
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	4353      	muls	r3, r2
 800800e:	637b      	str	r3, [r7, #52]	; 0x34
 8008010:	e008      	b.n	8008024 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008014:	480c      	ldr	r0, [pc, #48]	; (8008048 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008016:	f7f8 f877 	bl	8000108 <__udivsi3>
 800801a:	0003      	movs	r3, r0
 800801c:	001a      	movs	r2, r3
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	4353      	muls	r3, r2
 8008022:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8008024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008026:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008028:	e002      	b.n	8008030 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800802a:	4b07      	ldr	r3, [pc, #28]	; (8008048 <HAL_RCC_GetSysClockFreq+0xc8>)
 800802c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800802e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008032:	0018      	movs	r0, r3
 8008034:	46bd      	mov	sp, r7
 8008036:	b00f      	add	sp, #60	; 0x3c
 8008038:	bd90      	pop	{r4, r7, pc}
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	0800f318 	.word	0x0800f318
 8008040:	0800f328 	.word	0x0800f328
 8008044:	40021000 	.word	0x40021000
 8008048:	007a1200 	.word	0x007a1200

0800804c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008050:	4b02      	ldr	r3, [pc, #8]	; (800805c <HAL_RCC_GetHCLKFreq+0x10>)
 8008052:	681b      	ldr	r3, [r3, #0]
}
 8008054:	0018      	movs	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	46c0      	nop			; (mov r8, r8)
 800805c:	20000024 	.word	0x20000024

08008060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8008064:	f7ff fff2 	bl	800804c <HAL_RCC_GetHCLKFreq>
 8008068:	0001      	movs	r1, r0
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	0a1b      	lsrs	r3, r3, #8
 8008070:	2207      	movs	r2, #7
 8008072:	4013      	ands	r3, r2
 8008074:	4a04      	ldr	r2, [pc, #16]	; (8008088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008076:	5cd3      	ldrb	r3, [r2, r3]
 8008078:	40d9      	lsrs	r1, r3
 800807a:	000b      	movs	r3, r1
}    
 800807c:	0018      	movs	r0, r3
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	40021000 	.word	0x40021000
 8008088:	0800fe70 	.word	0x0800fe70

0800808c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2207      	movs	r2, #7
 800809a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800809c:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <HAL_RCC_GetClockConfig+0x4c>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2203      	movs	r2, #3
 80080a2:	401a      	ands	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80080a8:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <HAL_RCC_GetClockConfig+0x4c>)
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	22f0      	movs	r2, #240	; 0xf0
 80080ae:	401a      	ands	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80080b4:	4b08      	ldr	r3, [pc, #32]	; (80080d8 <HAL_RCC_GetClockConfig+0x4c>)
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	23e0      	movs	r3, #224	; 0xe0
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	401a      	ands	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80080c2:	4b06      	ldr	r3, [pc, #24]	; (80080dc <HAL_RCC_GetClockConfig+0x50>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2201      	movs	r2, #1
 80080c8:	401a      	ands	r2, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	601a      	str	r2, [r3, #0]
}
 80080ce:	46c0      	nop			; (mov r8, r8)
 80080d0:	46bd      	mov	sp, r7
 80080d2:	b002      	add	sp, #8
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	46c0      	nop			; (mov r8, r8)
 80080d8:	40021000 	.word	0x40021000
 80080dc:	40022000 	.word	0x40022000

080080e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	2380      	movs	r3, #128	; 0x80
 80080f6:	025b      	lsls	r3, r3, #9
 80080f8:	4013      	ands	r3, r2
 80080fa:	d100      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80080fc:	e08f      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80080fe:	2317      	movs	r3, #23
 8008100:	18fb      	adds	r3, r7, r3
 8008102:	2200      	movs	r2, #0
 8008104:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008106:	4b5f      	ldr	r3, [pc, #380]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008108:	69da      	ldr	r2, [r3, #28]
 800810a:	2380      	movs	r3, #128	; 0x80
 800810c:	055b      	lsls	r3, r3, #21
 800810e:	4013      	ands	r3, r2
 8008110:	d111      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008112:	4b5c      	ldr	r3, [pc, #368]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008114:	69da      	ldr	r2, [r3, #28]
 8008116:	4b5b      	ldr	r3, [pc, #364]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008118:	2180      	movs	r1, #128	; 0x80
 800811a:	0549      	lsls	r1, r1, #21
 800811c:	430a      	orrs	r2, r1
 800811e:	61da      	str	r2, [r3, #28]
 8008120:	4b58      	ldr	r3, [pc, #352]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008122:	69da      	ldr	r2, [r3, #28]
 8008124:	2380      	movs	r3, #128	; 0x80
 8008126:	055b      	lsls	r3, r3, #21
 8008128:	4013      	ands	r3, r2
 800812a:	60bb      	str	r3, [r7, #8]
 800812c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800812e:	2317      	movs	r3, #23
 8008130:	18fb      	adds	r3, r7, r3
 8008132:	2201      	movs	r2, #1
 8008134:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008136:	4b54      	ldr	r3, [pc, #336]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	2380      	movs	r3, #128	; 0x80
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	4013      	ands	r3, r2
 8008140:	d11a      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008142:	4b51      	ldr	r3, [pc, #324]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4b50      	ldr	r3, [pc, #320]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8008148:	2180      	movs	r1, #128	; 0x80
 800814a:	0049      	lsls	r1, r1, #1
 800814c:	430a      	orrs	r2, r1
 800814e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008150:	f7fd fe84 	bl	8005e5c <HAL_GetTick>
 8008154:	0003      	movs	r3, r0
 8008156:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008158:	e008      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800815a:	f7fd fe7f 	bl	8005e5c <HAL_GetTick>
 800815e:	0002      	movs	r2, r0
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b64      	cmp	r3, #100	; 0x64
 8008166:	d901      	bls.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e087      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800816c:	4b46      	ldr	r3, [pc, #280]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	2380      	movs	r3, #128	; 0x80
 8008172:	005b      	lsls	r3, r3, #1
 8008174:	4013      	ands	r3, r2
 8008176:	d0f0      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008178:	4b42      	ldr	r3, [pc, #264]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800817a:	6a1a      	ldr	r2, [r3, #32]
 800817c:	23c0      	movs	r3, #192	; 0xc0
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4013      	ands	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d034      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	23c0      	movs	r3, #192	; 0xc0
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4013      	ands	r3, r2
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	429a      	cmp	r2, r3
 8008198:	d02c      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800819a:	4b3a      	ldr	r3, [pc, #232]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	4a3b      	ldr	r2, [pc, #236]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081a0:	4013      	ands	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80081a4:	4b37      	ldr	r3, [pc, #220]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80081a6:	6a1a      	ldr	r2, [r3, #32]
 80081a8:	4b36      	ldr	r3, [pc, #216]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80081aa:	2180      	movs	r1, #128	; 0x80
 80081ac:	0249      	lsls	r1, r1, #9
 80081ae:	430a      	orrs	r2, r1
 80081b0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80081b2:	4b34      	ldr	r3, [pc, #208]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80081b4:	6a1a      	ldr	r2, [r3, #32]
 80081b6:	4b33      	ldr	r3, [pc, #204]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80081b8:	4935      	ldr	r1, [pc, #212]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80081ba:	400a      	ands	r2, r1
 80081bc:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80081be:	4b31      	ldr	r3, [pc, #196]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	4013      	ands	r3, r2
 80081ca:	d013      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081cc:	f7fd fe46 	bl	8005e5c <HAL_GetTick>
 80081d0:	0003      	movs	r3, r0
 80081d2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081d4:	e009      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081d6:	f7fd fe41 	bl	8005e5c <HAL_GetTick>
 80081da:	0002      	movs	r2, r0
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	4a2c      	ldr	r2, [pc, #176]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d901      	bls.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e048      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081ea:	4b26      	ldr	r3, [pc, #152]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	2202      	movs	r2, #2
 80081f0:	4013      	ands	r3, r2
 80081f2:	d0f0      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081f4:	4b23      	ldr	r3, [pc, #140]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	4a24      	ldr	r2, [pc, #144]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081fa:	4013      	ands	r3, r2
 80081fc:	0019      	movs	r1, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	4b20      	ldr	r3, [pc, #128]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008204:	430a      	orrs	r2, r1
 8008206:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008208:	2317      	movs	r3, #23
 800820a:	18fb      	adds	r3, r7, r3
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d105      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008212:	4b1c      	ldr	r3, [pc, #112]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008214:	69da      	ldr	r2, [r3, #28]
 8008216:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008218:	491f      	ldr	r1, [pc, #124]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800821a:	400a      	ands	r2, r1
 800821c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2201      	movs	r2, #1
 8008224:	4013      	ands	r3, r2
 8008226:	d009      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008228:	4b16      	ldr	r3, [pc, #88]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800822a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822c:	2203      	movs	r2, #3
 800822e:	4393      	bics	r3, r2
 8008230:	0019      	movs	r1, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	4b13      	ldr	r3, [pc, #76]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008238:	430a      	orrs	r2, r1
 800823a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2220      	movs	r2, #32
 8008242:	4013      	ands	r3, r2
 8008244:	d009      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008246:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	2210      	movs	r2, #16
 800824c:	4393      	bics	r3, r2
 800824e:	0019      	movs	r1, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008256:	430a      	orrs	r2, r1
 8008258:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	2380      	movs	r3, #128	; 0x80
 8008260:	029b      	lsls	r3, r3, #10
 8008262:	4013      	ands	r3, r2
 8008264:	d009      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008266:	4b07      	ldr	r3, [pc, #28]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	2280      	movs	r2, #128	; 0x80
 800826c:	4393      	bics	r3, r2
 800826e:	0019      	movs	r1, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691a      	ldr	r2, [r3, #16]
 8008274:	4b03      	ldr	r3, [pc, #12]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008276:	430a      	orrs	r2, r1
 8008278:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	0018      	movs	r0, r3
 800827e:	46bd      	mov	sp, r7
 8008280:	b006      	add	sp, #24
 8008282:	bd80      	pop	{r7, pc}
 8008284:	40021000 	.word	0x40021000
 8008288:	40007000 	.word	0x40007000
 800828c:	fffffcff 	.word	0xfffffcff
 8008290:	fffeffff 	.word	0xfffeffff
 8008294:	00001388 	.word	0x00001388
 8008298:	efffffff 	.word	0xefffffff

0800829c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e0a8      	b.n	8008400 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d109      	bne.n	80082ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	2382      	movs	r3, #130	; 0x82
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	429a      	cmp	r2, r3
 80082c0:	d009      	beq.n	80082d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	61da      	str	r2, [r3, #28]
 80082c8:	e005      	b.n	80082d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	225d      	movs	r2, #93	; 0x5d
 80082e0:	5c9b      	ldrb	r3, [r3, r2]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d107      	bne.n	80082f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	225c      	movs	r2, #92	; 0x5c
 80082ec:	2100      	movs	r1, #0
 80082ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	0018      	movs	r0, r3
 80082f4:	f7fd fb5c 	bl	80059b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	225d      	movs	r2, #93	; 0x5d
 80082fc:	2102      	movs	r1, #2
 80082fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2140      	movs	r1, #64	; 0x40
 800830c:	438a      	bics	r2, r1
 800830e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	23e0      	movs	r3, #224	; 0xe0
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	429a      	cmp	r2, r3
 800831a:	d902      	bls.n	8008322 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800831c:	2300      	movs	r3, #0
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	e002      	b.n	8008328 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008322:	2380      	movs	r3, #128	; 0x80
 8008324:	015b      	lsls	r3, r3, #5
 8008326:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	23f0      	movs	r3, #240	; 0xf0
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	429a      	cmp	r2, r3
 8008332:	d008      	beq.n	8008346 <HAL_SPI_Init+0xaa>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	23e0      	movs	r3, #224	; 0xe0
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	429a      	cmp	r2, r3
 800833e:	d002      	beq.n	8008346 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	2382      	movs	r3, #130	; 0x82
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	401a      	ands	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6899      	ldr	r1, [r3, #8]
 8008354:	2384      	movs	r3, #132	; 0x84
 8008356:	021b      	lsls	r3, r3, #8
 8008358:	400b      	ands	r3, r1
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2102      	movs	r1, #2
 8008362:	400b      	ands	r3, r1
 8008364:	431a      	orrs	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	2101      	movs	r1, #1
 800836c:	400b      	ands	r3, r1
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6999      	ldr	r1, [r3, #24]
 8008374:	2380      	movs	r3, #128	; 0x80
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	400b      	ands	r3, r1
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	2138      	movs	r1, #56	; 0x38
 8008382:	400b      	ands	r3, r1
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	2180      	movs	r1, #128	; 0x80
 800838c:	400b      	ands	r3, r1
 800838e:	431a      	orrs	r2, r3
 8008390:	0011      	movs	r1, r2
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008396:	2380      	movs	r3, #128	; 0x80
 8008398:	019b      	lsls	r3, r3, #6
 800839a:	401a      	ands	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	0c1b      	lsrs	r3, r3, #16
 80083aa:	2204      	movs	r2, #4
 80083ac:	401a      	ands	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	2110      	movs	r1, #16
 80083b4:	400b      	ands	r3, r1
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083bc:	2108      	movs	r1, #8
 80083be:	400b      	ands	r3, r1
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68d9      	ldr	r1, [r3, #12]
 80083c6:	23f0      	movs	r3, #240	; 0xf0
 80083c8:	011b      	lsls	r3, r3, #4
 80083ca:	400b      	ands	r3, r1
 80083cc:	431a      	orrs	r2, r3
 80083ce:	0011      	movs	r1, r2
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	2380      	movs	r3, #128	; 0x80
 80083d4:	015b      	lsls	r3, r3, #5
 80083d6:	401a      	ands	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	69da      	ldr	r2, [r3, #28]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4907      	ldr	r1, [pc, #28]	; (8008408 <HAL_SPI_Init+0x16c>)
 80083ec:	400a      	ands	r2, r1
 80083ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	225d      	movs	r2, #93	; 0x5d
 80083fa:	2101      	movs	r1, #1
 80083fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	0018      	movs	r0, r3
 8008402:	46bd      	mov	sp, r7
 8008404:	b004      	add	sp, #16
 8008406:	bd80      	pop	{r7, pc}
 8008408:	fffff7ff 	.word	0xfffff7ff

0800840c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	1dbb      	adds	r3, r7, #6
 800841a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800841c:	231f      	movs	r3, #31
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	225c      	movs	r2, #92	; 0x5c
 8008428:	5c9b      	ldrb	r3, [r3, r2]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <HAL_SPI_Transmit+0x26>
 800842e:	2302      	movs	r3, #2
 8008430:	e140      	b.n	80086b4 <HAL_SPI_Transmit+0x2a8>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	225c      	movs	r2, #92	; 0x5c
 8008436:	2101      	movs	r1, #1
 8008438:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800843a:	f7fd fd0f 	bl	8005e5c <HAL_GetTick>
 800843e:	0003      	movs	r3, r0
 8008440:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008442:	2316      	movs	r3, #22
 8008444:	18fb      	adds	r3, r7, r3
 8008446:	1dba      	adds	r2, r7, #6
 8008448:	8812      	ldrh	r2, [r2, #0]
 800844a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	225d      	movs	r2, #93	; 0x5d
 8008450:	5c9b      	ldrb	r3, [r3, r2]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b01      	cmp	r3, #1
 8008456:	d004      	beq.n	8008462 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008458:	231f      	movs	r3, #31
 800845a:	18fb      	adds	r3, r7, r3
 800845c:	2202      	movs	r2, #2
 800845e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008460:	e11d      	b.n	800869e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HAL_SPI_Transmit+0x64>
 8008468:	1dbb      	adds	r3, r7, #6
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008470:	231f      	movs	r3, #31
 8008472:	18fb      	adds	r3, r7, r3
 8008474:	2201      	movs	r2, #1
 8008476:	701a      	strb	r2, [r3, #0]
    goto error;
 8008478:	e111      	b.n	800869e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	225d      	movs	r2, #93	; 0x5d
 800847e:	2103      	movs	r1, #3
 8008480:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1dba      	adds	r2, r7, #6
 8008492:	8812      	ldrh	r2, [r2, #0]
 8008494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	1dba      	adds	r2, r7, #6
 800849a:	8812      	ldrh	r2, [r2, #0]
 800849c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2244      	movs	r2, #68	; 0x44
 80084a8:	2100      	movs	r1, #0
 80084aa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2246      	movs	r2, #70	; 0x46
 80084b0:	2100      	movs	r1, #0
 80084b2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	2380      	movs	r3, #128	; 0x80
 80084c6:	021b      	lsls	r3, r3, #8
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d110      	bne.n	80084ee <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2140      	movs	r1, #64	; 0x40
 80084d8:	438a      	bics	r2, r1
 80084da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2180      	movs	r1, #128	; 0x80
 80084e8:	01c9      	lsls	r1, r1, #7
 80084ea:	430a      	orrs	r2, r1
 80084ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2240      	movs	r2, #64	; 0x40
 80084f6:	4013      	ands	r3, r2
 80084f8:	2b40      	cmp	r3, #64	; 0x40
 80084fa:	d007      	beq.n	800850c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2140      	movs	r1, #64	; 0x40
 8008508:	430a      	orrs	r2, r1
 800850a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	23e0      	movs	r3, #224	; 0xe0
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	429a      	cmp	r2, r3
 8008516:	d94e      	bls.n	80085b6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d004      	beq.n	800852a <HAL_SPI_Transmit+0x11e>
 8008520:	2316      	movs	r3, #22
 8008522:	18fb      	adds	r3, r7, r3
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d13f      	bne.n	80085aa <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	881a      	ldrh	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	1c9a      	adds	r2, r3, #2
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008544:	b29b      	uxth	r3, r3
 8008546:	3b01      	subs	r3, #1
 8008548:	b29a      	uxth	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800854e:	e02c      	b.n	80085aa <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	2202      	movs	r2, #2
 8008558:	4013      	ands	r3, r2
 800855a:	2b02      	cmp	r3, #2
 800855c:	d112      	bne.n	8008584 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	881a      	ldrh	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856e:	1c9a      	adds	r2, r3, #2
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008578:	b29b      	uxth	r3, r3
 800857a:	3b01      	subs	r3, #1
 800857c:	b29a      	uxth	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008582:	e012      	b.n	80085aa <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008584:	f7fd fc6a 	bl	8005e5c <HAL_GetTick>
 8008588:	0002      	movs	r2, r0
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d802      	bhi.n	800859a <HAL_SPI_Transmit+0x18e>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	3301      	adds	r3, #1
 8008598:	d102      	bne.n	80085a0 <HAL_SPI_Transmit+0x194>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80085a0:	231f      	movs	r3, #31
 80085a2:	18fb      	adds	r3, r7, r3
 80085a4:	2203      	movs	r2, #3
 80085a6:	701a      	strb	r2, [r3, #0]
          goto error;
 80085a8:	e079      	b.n	800869e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1cd      	bne.n	8008550 <HAL_SPI_Transmit+0x144>
 80085b4:	e04f      	b.n	8008656 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d004      	beq.n	80085c8 <HAL_SPI_Transmit+0x1bc>
 80085be:	2316      	movs	r3, #22
 80085c0:	18fb      	adds	r3, r7, r3
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d141      	bne.n	800864c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	330c      	adds	r3, #12
 80085d2:	7812      	ldrb	r2, [r2, #0]
 80085d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80085ee:	e02d      	b.n	800864c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2202      	movs	r2, #2
 80085f8:	4013      	ands	r3, r2
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d113      	bne.n	8008626 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	330c      	adds	r3, #12
 8008608:	7812      	ldrb	r2, [r2, #0]
 800860a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800861a:	b29b      	uxth	r3, r3
 800861c:	3b01      	subs	r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008624:	e012      	b.n	800864c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008626:	f7fd fc19 	bl	8005e5c <HAL_GetTick>
 800862a:	0002      	movs	r2, r0
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d802      	bhi.n	800863c <HAL_SPI_Transmit+0x230>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	d102      	bne.n	8008642 <HAL_SPI_Transmit+0x236>
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8008642:	231f      	movs	r3, #31
 8008644:	18fb      	adds	r3, r7, r3
 8008646:	2203      	movs	r2, #3
 8008648:	701a      	strb	r2, [r3, #0]
          goto error;
 800864a:	e028      	b.n	800869e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1cc      	bne.n	80085f0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	0018      	movs	r0, r3
 800865e:	f000 fce7 	bl	8009030 <SPI_EndRxTxTransaction>
 8008662:	1e03      	subs	r3, r0, #0
 8008664:	d002      	beq.n	800866c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2220      	movs	r2, #32
 800866a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	613b      	str	r3, [r7, #16]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800868e:	2b00      	cmp	r3, #0
 8008690:	d004      	beq.n	800869c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8008692:	231f      	movs	r3, #31
 8008694:	18fb      	adds	r3, r7, r3
 8008696:	2201      	movs	r2, #1
 8008698:	701a      	strb	r2, [r3, #0]
 800869a:	e000      	b.n	800869e <HAL_SPI_Transmit+0x292>
  }

error:
 800869c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	225d      	movs	r2, #93	; 0x5d
 80086a2:	2101      	movs	r1, #1
 80086a4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	225c      	movs	r2, #92	; 0x5c
 80086aa:	2100      	movs	r1, #0
 80086ac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80086ae:	231f      	movs	r3, #31
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	781b      	ldrb	r3, [r3, #0]
}
 80086b4:	0018      	movs	r0, r3
 80086b6:	46bd      	mov	sp, r7
 80086b8:	b008      	add	sp, #32
 80086ba:	bd80      	pop	{r7, pc}

080086bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086bc:	b590      	push	{r4, r7, lr}
 80086be:	b089      	sub	sp, #36	; 0x24
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	1dbb      	adds	r3, r7, #6
 80086ca:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086cc:	2317      	movs	r3, #23
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	2200      	movs	r2, #0
 80086d2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	2382      	movs	r3, #130	; 0x82
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	429a      	cmp	r2, r3
 80086de:	d113      	bne.n	8008708 <HAL_SPI_Receive+0x4c>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10f      	bne.n	8008708 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	225d      	movs	r2, #93	; 0x5d
 80086ec:	2104      	movs	r1, #4
 80086ee:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80086f0:	1dbb      	adds	r3, r7, #6
 80086f2:	881c      	ldrh	r4, [r3, #0]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	0023      	movs	r3, r4
 8008700:	f000 f928 	bl	8008954 <HAL_SPI_TransmitReceive>
 8008704:	0003      	movs	r3, r0
 8008706:	e11c      	b.n	8008942 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	225c      	movs	r2, #92	; 0x5c
 800870c:	5c9b      	ldrb	r3, [r3, r2]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d101      	bne.n	8008716 <HAL_SPI_Receive+0x5a>
 8008712:	2302      	movs	r3, #2
 8008714:	e115      	b.n	8008942 <HAL_SPI_Receive+0x286>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	225c      	movs	r2, #92	; 0x5c
 800871a:	2101      	movs	r1, #1
 800871c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800871e:	f7fd fb9d 	bl	8005e5c <HAL_GetTick>
 8008722:	0003      	movs	r3, r0
 8008724:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	225d      	movs	r2, #93	; 0x5d
 800872a:	5c9b      	ldrb	r3, [r3, r2]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b01      	cmp	r3, #1
 8008730:	d004      	beq.n	800873c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8008732:	2317      	movs	r3, #23
 8008734:	18fb      	adds	r3, r7, r3
 8008736:	2202      	movs	r2, #2
 8008738:	701a      	strb	r2, [r3, #0]
    goto error;
 800873a:	e0f7      	b.n	800892c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_SPI_Receive+0x8e>
 8008742:	1dbb      	adds	r3, r7, #6
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d104      	bne.n	8008754 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800874a:	2317      	movs	r3, #23
 800874c:	18fb      	adds	r3, r7, r3
 800874e:	2201      	movs	r2, #1
 8008750:	701a      	strb	r2, [r3, #0]
    goto error;
 8008752:	e0eb      	b.n	800892c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	225d      	movs	r2, #93	; 0x5d
 8008758:	2104      	movs	r1, #4
 800875a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	1dba      	adds	r2, r7, #6
 800876c:	2144      	movs	r1, #68	; 0x44
 800876e:	8812      	ldrh	r2, [r2, #0]
 8008770:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	1dba      	adds	r2, r7, #6
 8008776:	2146      	movs	r1, #70	; 0x46
 8008778:	8812      	ldrh	r2, [r2, #0]
 800877a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	23e0      	movs	r3, #224	; 0xe0
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d908      	bls.n	80087b8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4966      	ldr	r1, [pc, #408]	; (800894c <HAL_SPI_Receive+0x290>)
 80087b2:	400a      	ands	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
 80087b6:	e008      	b.n	80087ca <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2180      	movs	r1, #128	; 0x80
 80087c4:	0149      	lsls	r1, r1, #5
 80087c6:	430a      	orrs	r2, r1
 80087c8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	2380      	movs	r3, #128	; 0x80
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d10f      	bne.n	80087f6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2140      	movs	r1, #64	; 0x40
 80087e2:	438a      	bics	r2, r1
 80087e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4957      	ldr	r1, [pc, #348]	; (8008950 <HAL_SPI_Receive+0x294>)
 80087f2:	400a      	ands	r2, r1
 80087f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2240      	movs	r2, #64	; 0x40
 80087fe:	4013      	ands	r3, r2
 8008800:	2b40      	cmp	r3, #64	; 0x40
 8008802:	d007      	beq.n	8008814 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2140      	movs	r1, #64	; 0x40
 8008810:	430a      	orrs	r2, r1
 8008812:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68da      	ldr	r2, [r3, #12]
 8008818:	23e0      	movs	r3, #224	; 0xe0
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	429a      	cmp	r2, r3
 800881e:	d900      	bls.n	8008822 <HAL_SPI_Receive+0x166>
 8008820:	e069      	b.n	80088f6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008822:	e031      	b.n	8008888 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	2201      	movs	r2, #1
 800882c:	4013      	ands	r3, r2
 800882e:	2b01      	cmp	r3, #1
 8008830:	d117      	bne.n	8008862 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	330c      	adds	r3, #12
 8008838:	001a      	movs	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883e:	7812      	ldrb	r2, [r2, #0]
 8008840:	b2d2      	uxtb	r2, r2
 8008842:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2246      	movs	r2, #70	; 0x46
 8008852:	5a9b      	ldrh	r3, [r3, r2]
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b299      	uxth	r1, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2246      	movs	r2, #70	; 0x46
 800885e:	5299      	strh	r1, [r3, r2]
 8008860:	e012      	b.n	8008888 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008862:	f7fd fafb 	bl	8005e5c <HAL_GetTick>
 8008866:	0002      	movs	r2, r0
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d802      	bhi.n	8008878 <HAL_SPI_Receive+0x1bc>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	3301      	adds	r3, #1
 8008876:	d102      	bne.n	800887e <HAL_SPI_Receive+0x1c2>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d104      	bne.n	8008888 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800887e:	2317      	movs	r3, #23
 8008880:	18fb      	adds	r3, r7, r3
 8008882:	2203      	movs	r2, #3
 8008884:	701a      	strb	r2, [r3, #0]
          goto error;
 8008886:	e051      	b.n	800892c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2246      	movs	r2, #70	; 0x46
 800888c:	5a9b      	ldrh	r3, [r3, r2]
 800888e:	b29b      	uxth	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1c7      	bne.n	8008824 <HAL_SPI_Receive+0x168>
 8008894:	e035      	b.n	8008902 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	2201      	movs	r2, #1
 800889e:	4013      	ands	r3, r2
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d115      	bne.n	80088d0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ae:	b292      	uxth	r2, r2
 80088b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	1c9a      	adds	r2, r3, #2
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2246      	movs	r2, #70	; 0x46
 80088c0:	5a9b      	ldrh	r3, [r3, r2]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b299      	uxth	r1, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2246      	movs	r2, #70	; 0x46
 80088cc:	5299      	strh	r1, [r3, r2]
 80088ce:	e012      	b.n	80088f6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088d0:	f7fd fac4 	bl	8005e5c <HAL_GetTick>
 80088d4:	0002      	movs	r2, r0
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d802      	bhi.n	80088e6 <HAL_SPI_Receive+0x22a>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	3301      	adds	r3, #1
 80088e4:	d102      	bne.n	80088ec <HAL_SPI_Receive+0x230>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80088ec:	2317      	movs	r3, #23
 80088ee:	18fb      	adds	r3, r7, r3
 80088f0:	2203      	movs	r2, #3
 80088f2:	701a      	strb	r2, [r3, #0]
          goto error;
 80088f4:	e01a      	b.n	800892c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2246      	movs	r2, #70	; 0x46
 80088fa:	5a9b      	ldrh	r3, [r3, r2]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1c9      	bne.n	8008896 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	0018      	movs	r0, r3
 800890a:	f000 fb33 	bl	8008f74 <SPI_EndRxTransaction>
 800890e:	1e03      	subs	r3, r0, #0
 8008910:	d002      	beq.n	8008918 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2220      	movs	r2, #32
 8008916:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800891c:	2b00      	cmp	r3, #0
 800891e:	d004      	beq.n	800892a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8008920:	2317      	movs	r3, #23
 8008922:	18fb      	adds	r3, r7, r3
 8008924:	2201      	movs	r2, #1
 8008926:	701a      	strb	r2, [r3, #0]
 8008928:	e000      	b.n	800892c <HAL_SPI_Receive+0x270>
  }

error :
 800892a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	225d      	movs	r2, #93	; 0x5d
 8008930:	2101      	movs	r1, #1
 8008932:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	225c      	movs	r2, #92	; 0x5c
 8008938:	2100      	movs	r1, #0
 800893a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800893c:	2317      	movs	r3, #23
 800893e:	18fb      	adds	r3, r7, r3
 8008940:	781b      	ldrb	r3, [r3, #0]
}
 8008942:	0018      	movs	r0, r3
 8008944:	46bd      	mov	sp, r7
 8008946:	b007      	add	sp, #28
 8008948:	bd90      	pop	{r4, r7, pc}
 800894a:	46c0      	nop			; (mov r8, r8)
 800894c:	ffffefff 	.word	0xffffefff
 8008950:	ffffbfff 	.word	0xffffbfff

08008954 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08a      	sub	sp, #40	; 0x28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	001a      	movs	r2, r3
 8008962:	1cbb      	adds	r3, r7, #2
 8008964:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008966:	2301      	movs	r3, #1
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800896a:	2323      	movs	r3, #35	; 0x23
 800896c:	18fb      	adds	r3, r7, r3
 800896e:	2200      	movs	r2, #0
 8008970:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	225c      	movs	r2, #92	; 0x5c
 8008976:	5c9b      	ldrb	r3, [r3, r2]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d101      	bne.n	8008980 <HAL_SPI_TransmitReceive+0x2c>
 800897c:	2302      	movs	r3, #2
 800897e:	e1b6      	b.n	8008cee <HAL_SPI_TransmitReceive+0x39a>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	225c      	movs	r2, #92	; 0x5c
 8008984:	2101      	movs	r1, #1
 8008986:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008988:	f7fd fa68 	bl	8005e5c <HAL_GetTick>
 800898c:	0003      	movs	r3, r0
 800898e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008990:	201b      	movs	r0, #27
 8008992:	183b      	adds	r3, r7, r0
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	215d      	movs	r1, #93	; 0x5d
 8008998:	5c52      	ldrb	r2, [r2, r1]
 800899a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80089a2:	2312      	movs	r3, #18
 80089a4:	18fb      	adds	r3, r7, r3
 80089a6:	1cba      	adds	r2, r7, #2
 80089a8:	8812      	ldrh	r2, [r2, #0]
 80089aa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80089ac:	183b      	adds	r3, r7, r0
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d012      	beq.n	80089da <HAL_SPI_TransmitReceive+0x86>
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	2382      	movs	r3, #130	; 0x82
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d108      	bne.n	80089d0 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d104      	bne.n	80089d0 <HAL_SPI_TransmitReceive+0x7c>
 80089c6:	231b      	movs	r3, #27
 80089c8:	18fb      	adds	r3, r7, r3
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	d004      	beq.n	80089da <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80089d0:	2323      	movs	r3, #35	; 0x23
 80089d2:	18fb      	adds	r3, r7, r3
 80089d4:	2202      	movs	r2, #2
 80089d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80089d8:	e17e      	b.n	8008cd8 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d006      	beq.n	80089ee <HAL_SPI_TransmitReceive+0x9a>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <HAL_SPI_TransmitReceive+0x9a>
 80089e6:	1cbb      	adds	r3, r7, #2
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d104      	bne.n	80089f8 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80089ee:	2323      	movs	r3, #35	; 0x23
 80089f0:	18fb      	adds	r3, r7, r3
 80089f2:	2201      	movs	r2, #1
 80089f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80089f6:	e16f      	b.n	8008cd8 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	225d      	movs	r2, #93	; 0x5d
 80089fc:	5c9b      	ldrb	r3, [r3, r2]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d003      	beq.n	8008a0c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	225d      	movs	r2, #93	; 0x5d
 8008a08:	2105      	movs	r1, #5
 8008a0a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	1cba      	adds	r2, r7, #2
 8008a1c:	2146      	movs	r1, #70	; 0x46
 8008a1e:	8812      	ldrh	r2, [r2, #0]
 8008a20:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	1cba      	adds	r2, r7, #2
 8008a26:	2144      	movs	r1, #68	; 0x44
 8008a28:	8812      	ldrh	r2, [r2, #0]
 8008a2a:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	1cba      	adds	r2, r7, #2
 8008a36:	8812      	ldrh	r2, [r2, #0]
 8008a38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	1cba      	adds	r2, r7, #2
 8008a3e:	8812      	ldrh	r2, [r2, #0]
 8008a40:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	23e0      	movs	r3, #224	; 0xe0
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d908      	bls.n	8008a6c <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	49a4      	ldr	r1, [pc, #656]	; (8008cf8 <HAL_SPI_TransmitReceive+0x3a4>)
 8008a66:	400a      	ands	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
 8008a6a:	e008      	b.n	8008a7e <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2180      	movs	r1, #128	; 0x80
 8008a78:	0149      	lsls	r1, r1, #5
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2240      	movs	r2, #64	; 0x40
 8008a86:	4013      	ands	r3, r2
 8008a88:	2b40      	cmp	r3, #64	; 0x40
 8008a8a:	d007      	beq.n	8008a9c <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2140      	movs	r1, #64	; 0x40
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68da      	ldr	r2, [r3, #12]
 8008aa0:	23e0      	movs	r3, #224	; 0xe0
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d800      	bhi.n	8008aaa <HAL_SPI_TransmitReceive+0x156>
 8008aa8:	e07f      	b.n	8008baa <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_SPI_TransmitReceive+0x16a>
 8008ab2:	2312      	movs	r3, #18
 8008ab4:	18fb      	adds	r3, r7, r3
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d000      	beq.n	8008abe <HAL_SPI_TransmitReceive+0x16a>
 8008abc:	e069      	b.n	8008b92 <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac2:	881a      	ldrh	r2, [r3, #0]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	1c9a      	adds	r2, r3, #2
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	3b01      	subs	r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ae2:	e056      	b.n	8008b92 <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	2202      	movs	r2, #2
 8008aec:	4013      	ands	r3, r2
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d11b      	bne.n	8008b2a <HAL_SPI_TransmitReceive+0x1d6>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d016      	beq.n	8008b2a <HAL_SPI_TransmitReceive+0x1d6>
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d113      	bne.n	8008b2a <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b06:	881a      	ldrh	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	1c9a      	adds	r2, r3, #2
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	2201      	movs	r2, #1
 8008b32:	4013      	ands	r3, r2
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d11c      	bne.n	8008b72 <HAL_SPI_TransmitReceive+0x21e>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2246      	movs	r2, #70	; 0x46
 8008b3c:	5a9b      	ldrh	r3, [r3, r2]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d016      	beq.n	8008b72 <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68da      	ldr	r2, [r3, #12]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	b292      	uxth	r2, r2
 8008b50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	1c9a      	adds	r2, r3, #2
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2246      	movs	r2, #70	; 0x46
 8008b60:	5a9b      	ldrh	r3, [r3, r2]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b299      	uxth	r1, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2246      	movs	r2, #70	; 0x46
 8008b6c:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b72:	f7fd f973 	bl	8005e5c <HAL_GetTick>
 8008b76:	0002      	movs	r2, r0
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d807      	bhi.n	8008b92 <HAL_SPI_TransmitReceive+0x23e>
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	3301      	adds	r3, #1
 8008b86:	d004      	beq.n	8008b92 <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8008b88:	2323      	movs	r3, #35	; 0x23
 8008b8a:	18fb      	adds	r3, r7, r3
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	701a      	strb	r2, [r3, #0]
        goto error;
 8008b90:	e0a2      	b.n	8008cd8 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1a3      	bne.n	8008ae4 <HAL_SPI_TransmitReceive+0x190>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2246      	movs	r2, #70	; 0x46
 8008ba0:	5a9b      	ldrh	r3, [r3, r2]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d19d      	bne.n	8008ae4 <HAL_SPI_TransmitReceive+0x190>
 8008ba8:	e085      	b.n	8008cb6 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d005      	beq.n	8008bbe <HAL_SPI_TransmitReceive+0x26a>
 8008bb2:	2312      	movs	r3, #18
 8008bb4:	18fb      	adds	r3, r7, r3
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d000      	beq.n	8008bbe <HAL_SPI_TransmitReceive+0x26a>
 8008bbc:	e070      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	330c      	adds	r3, #12
 8008bc8:	7812      	ldrb	r2, [r2, #0]
 8008bca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008be4:	e05c      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	2202      	movs	r2, #2
 8008bee:	4013      	ands	r3, r2
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d11c      	bne.n	8008c2e <HAL_SPI_TransmitReceive+0x2da>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d017      	beq.n	8008c2e <HAL_SPI_TransmitReceive+0x2da>
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d114      	bne.n	8008c2e <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	330c      	adds	r3, #12
 8008c0e:	7812      	ldrb	r2, [r2, #0]
 8008c10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	2201      	movs	r2, #1
 8008c36:	4013      	ands	r3, r2
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d11e      	bne.n	8008c7a <HAL_SPI_TransmitReceive+0x326>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2246      	movs	r2, #70	; 0x46
 8008c40:	5a9b      	ldrh	r3, [r3, r2]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d018      	beq.n	8008c7a <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	330c      	adds	r3, #12
 8008c4e:	001a      	movs	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	7812      	ldrb	r2, [r2, #0]
 8008c56:	b2d2      	uxtb	r2, r2
 8008c58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2246      	movs	r2, #70	; 0x46
 8008c68:	5a9b      	ldrh	r3, [r3, r2]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	b299      	uxth	r1, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2246      	movs	r2, #70	; 0x46
 8008c74:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c76:	2301      	movs	r3, #1
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c7a:	f7fd f8ef 	bl	8005e5c <HAL_GetTick>
 8008c7e:	0002      	movs	r2, r0
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d802      	bhi.n	8008c90 <HAL_SPI_TransmitReceive+0x33c>
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	d102      	bne.n	8008c96 <HAL_SPI_TransmitReceive+0x342>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8008c96:	2323      	movs	r3, #35	; 0x23
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	701a      	strb	r2, [r3, #0]
        goto error;
 8008c9e:	e01b      	b.n	8008cd8 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d19d      	bne.n	8008be6 <HAL_SPI_TransmitReceive+0x292>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2246      	movs	r2, #70	; 0x46
 8008cae:	5a9b      	ldrh	r3, [r3, r2]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d197      	bne.n	8008be6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f000 f9b7 	bl	8009030 <SPI_EndRxTxTransaction>
 8008cc2:	1e03      	subs	r3, r0, #0
 8008cc4:	d007      	beq.n	8008cd6 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8008cc6:	2323      	movs	r3, #35	; 0x23
 8008cc8:	18fb      	adds	r3, r7, r3
 8008cca:	2201      	movs	r2, #1
 8008ccc:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	661a      	str	r2, [r3, #96]	; 0x60
 8008cd4:	e000      	b.n	8008cd8 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8008cd6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	225d      	movs	r2, #93	; 0x5d
 8008cdc:	2101      	movs	r1, #1
 8008cde:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	225c      	movs	r2, #92	; 0x5c
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008ce8:	2323      	movs	r3, #35	; 0x23
 8008cea:	18fb      	adds	r3, r7, r3
 8008cec:	781b      	ldrb	r3, [r3, #0]
}
 8008cee:	0018      	movs	r0, r3
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	b00a      	add	sp, #40	; 0x28
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	46c0      	nop			; (mov r8, r8)
 8008cf8:	ffffefff 	.word	0xffffefff

08008cfc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	225d      	movs	r2, #93	; 0x5d
 8008d08:	5c9b      	ldrb	r3, [r3, r2]
 8008d0a:	b2db      	uxtb	r3, r3
}
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	b002      	add	sp, #8
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	1dfb      	adds	r3, r7, #7
 8008d22:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d24:	f7fd f89a 	bl	8005e5c <HAL_GetTick>
 8008d28:	0002      	movs	r2, r0
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	1a9b      	subs	r3, r3, r2
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	18d3      	adds	r3, r2, r3
 8008d32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d34:	f7fd f892 	bl	8005e5c <HAL_GetTick>
 8008d38:	0003      	movs	r3, r0
 8008d3a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d3c:	4b3a      	ldr	r3, [pc, #232]	; (8008e28 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	015b      	lsls	r3, r3, #5
 8008d42:	0d1b      	lsrs	r3, r3, #20
 8008d44:	69fa      	ldr	r2, [r7, #28]
 8008d46:	4353      	muls	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d4a:	e058      	b.n	8008dfe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	d055      	beq.n	8008dfe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d52:	f7fd f883 	bl	8005e5c <HAL_GetTick>
 8008d56:	0002      	movs	r2, r0
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d902      	bls.n	8008d68 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d142      	bne.n	8008dee <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	21e0      	movs	r1, #224	; 0xe0
 8008d74:	438a      	bics	r2, r1
 8008d76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	2382      	movs	r3, #130	; 0x82
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d113      	bne.n	8008dac <SPI_WaitFlagStateUntilTimeout+0x98>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	689a      	ldr	r2, [r3, #8]
 8008d88:	2380      	movs	r3, #128	; 0x80
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d005      	beq.n	8008d9c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	2380      	movs	r3, #128	; 0x80
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d107      	bne.n	8008dac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2140      	movs	r1, #64	; 0x40
 8008da8:	438a      	bics	r2, r1
 8008daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008db0:	2380      	movs	r3, #128	; 0x80
 8008db2:	019b      	lsls	r3, r3, #6
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d110      	bne.n	8008dda <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	491a      	ldr	r1, [pc, #104]	; (8008e2c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008dc4:	400a      	ands	r2, r1
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2180      	movs	r1, #128	; 0x80
 8008dd4:	0189      	lsls	r1, r1, #6
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	225d      	movs	r2, #93	; 0x5d
 8008dde:	2101      	movs	r1, #1
 8008de0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	225c      	movs	r2, #92	; 0x5c
 8008de6:	2100      	movs	r1, #0
 8008de8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e017      	b.n	8008e1e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	4013      	ands	r3, r2
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	425a      	negs	r2, r3
 8008e0e:	4153      	adcs	r3, r2
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	001a      	movs	r2, r3
 8008e14:	1dfb      	adds	r3, r7, #7
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d197      	bne.n	8008d4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	0018      	movs	r0, r3
 8008e20:	46bd      	mov	sp, r7
 8008e22:	b008      	add	sp, #32
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	46c0      	nop			; (mov r8, r8)
 8008e28:	20000024 	.word	0x20000024
 8008e2c:	ffffdfff 	.word	0xffffdfff

08008e30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08a      	sub	sp, #40	; 0x28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008e3e:	2317      	movs	r3, #23
 8008e40:	18fb      	adds	r3, r7, r3
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e46:	f7fd f809 	bl	8005e5c <HAL_GetTick>
 8008e4a:	0002      	movs	r2, r0
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4e:	1a9b      	subs	r3, r3, r2
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	18d3      	adds	r3, r2, r3
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008e56:	f7fd f801 	bl	8005e5c <HAL_GetTick>
 8008e5a:	0003      	movs	r3, r0
 8008e5c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	330c      	adds	r3, #12
 8008e64:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008e66:	4b41      	ldr	r3, [pc, #260]	; (8008f6c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	0013      	movs	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	189b      	adds	r3, r3, r2
 8008e70:	00da      	lsls	r2, r3, #3
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	0d1b      	lsrs	r3, r3, #20
 8008e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e78:	4353      	muls	r3, r2
 8008e7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008e7c:	e068      	b.n	8008f50 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	23c0      	movs	r3, #192	; 0xc0
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d10a      	bne.n	8008e9e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d107      	bne.n	8008e9e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	2117      	movs	r1, #23
 8008e96:	187b      	adds	r3, r7, r1
 8008e98:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008e9a:	187b      	adds	r3, r7, r1
 8008e9c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	d055      	beq.n	8008f50 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ea4:	f7fc ffda 	bl	8005e5c <HAL_GetTick>
 8008ea8:	0002      	movs	r2, r0
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d902      	bls.n	8008eba <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d142      	bne.n	8008f40 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	21e0      	movs	r1, #224	; 0xe0
 8008ec6:	438a      	bics	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	2382      	movs	r3, #130	; 0x82
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d113      	bne.n	8008efe <SPI_WaitFifoStateUntilTimeout+0xce>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	2380      	movs	r3, #128	; 0x80
 8008edc:	021b      	lsls	r3, r3, #8
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d005      	beq.n	8008eee <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	2380      	movs	r3, #128	; 0x80
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d107      	bne.n	8008efe <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2140      	movs	r1, #64	; 0x40
 8008efa:	438a      	bics	r2, r1
 8008efc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f02:	2380      	movs	r3, #128	; 0x80
 8008f04:	019b      	lsls	r3, r3, #6
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d110      	bne.n	8008f2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4916      	ldr	r1, [pc, #88]	; (8008f70 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008f16:	400a      	ands	r2, r1
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2180      	movs	r1, #128	; 0x80
 8008f26:	0189      	lsls	r1, r1, #6
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	225d      	movs	r2, #93	; 0x5d
 8008f30:	2101      	movs	r1, #1
 8008f32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	225c      	movs	r2, #92	; 0x5c
 8008f38:	2100      	movs	r1, #0
 8008f3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e010      	b.n	8008f62 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	4013      	ands	r3, r2
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d18e      	bne.n	8008e7e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	0018      	movs	r0, r3
 8008f64:	46bd      	mov	sp, r7
 8008f66:	b00a      	add	sp, #40	; 0x28
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	46c0      	nop			; (mov r8, r8)
 8008f6c:	20000024 	.word	0x20000024
 8008f70:	ffffdfff 	.word	0xffffdfff

08008f74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af02      	add	r7, sp, #8
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	2382      	movs	r3, #130	; 0x82
 8008f86:	005b      	lsls	r3, r3, #1
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d113      	bne.n	8008fb4 <SPI_EndRxTransaction+0x40>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	689a      	ldr	r2, [r3, #8]
 8008f90:	2380      	movs	r3, #128	; 0x80
 8008f92:	021b      	lsls	r3, r3, #8
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d005      	beq.n	8008fa4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	2380      	movs	r3, #128	; 0x80
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d107      	bne.n	8008fb4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2140      	movs	r1, #64	; 0x40
 8008fb0:	438a      	bics	r2, r1
 8008fb2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	0013      	movs	r3, r2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2180      	movs	r1, #128	; 0x80
 8008fc2:	f7ff fea7 	bl	8008d14 <SPI_WaitFlagStateUntilTimeout>
 8008fc6:	1e03      	subs	r3, r0, #0
 8008fc8:	d007      	beq.n	8008fda <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fce:	2220      	movs	r2, #32
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e026      	b.n	8009028 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	2382      	movs	r3, #130	; 0x82
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d11f      	bne.n	8009026 <SPI_EndRxTransaction+0xb2>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	2380      	movs	r3, #128	; 0x80
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d005      	beq.n	8008ffe <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	689a      	ldr	r2, [r3, #8]
 8008ff6:	2380      	movs	r3, #128	; 0x80
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d113      	bne.n	8009026 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	23c0      	movs	r3, #192	; 0xc0
 8009002:	00d9      	lsls	r1, r3, #3
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	0013      	movs	r3, r2
 800900c:	2200      	movs	r2, #0
 800900e:	f7ff ff0f 	bl	8008e30 <SPI_WaitFifoStateUntilTimeout>
 8009012:	1e03      	subs	r3, r0, #0
 8009014:	d007      	beq.n	8009026 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800901a:	2220      	movs	r2, #32
 800901c:	431a      	orrs	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e000      	b.n	8009028 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	0018      	movs	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	b004      	add	sp, #16
 800902e:	bd80      	pop	{r7, pc}

08009030 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	23c0      	movs	r3, #192	; 0xc0
 8009040:	0159      	lsls	r1, r3, #5
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	0013      	movs	r3, r2
 800904a:	2200      	movs	r2, #0
 800904c:	f7ff fef0 	bl	8008e30 <SPI_WaitFifoStateUntilTimeout>
 8009050:	1e03      	subs	r3, r0, #0
 8009052:	d007      	beq.n	8009064 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009058:	2220      	movs	r2, #32
 800905a:	431a      	orrs	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e027      	b.n	80090b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	0013      	movs	r3, r2
 800906e:	2200      	movs	r2, #0
 8009070:	2180      	movs	r1, #128	; 0x80
 8009072:	f7ff fe4f 	bl	8008d14 <SPI_WaitFlagStateUntilTimeout>
 8009076:	1e03      	subs	r3, r0, #0
 8009078:	d007      	beq.n	800908a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800907e:	2220      	movs	r2, #32
 8009080:	431a      	orrs	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e014      	b.n	80090b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	23c0      	movs	r3, #192	; 0xc0
 800908e:	00d9      	lsls	r1, r3, #3
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	0013      	movs	r3, r2
 8009098:	2200      	movs	r2, #0
 800909a:	f7ff fec9 	bl	8008e30 <SPI_WaitFifoStateUntilTimeout>
 800909e:	1e03      	subs	r3, r0, #0
 80090a0:	d007      	beq.n	80090b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a6:	2220      	movs	r2, #32
 80090a8:	431a      	orrs	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e000      	b.n	80090b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	0018      	movs	r0, r3
 80090b6:	46bd      	mov	sp, r7
 80090b8:	b004      	add	sp, #16
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e042      	b.n	8009154 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	223d      	movs	r2, #61	; 0x3d
 80090d2:	5c9b      	ldrb	r3, [r3, r2]
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d107      	bne.n	80090ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	223c      	movs	r2, #60	; 0x3c
 80090de:	2100      	movs	r1, #0
 80090e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7fc fced 	bl	8005ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	223d      	movs	r2, #61	; 0x3d
 80090ee:	2102      	movs	r1, #2
 80090f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3304      	adds	r3, #4
 80090fa:	0019      	movs	r1, r3
 80090fc:	0010      	movs	r0, r2
 80090fe:	f000 fc3f 	bl	8009980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2246      	movs	r2, #70	; 0x46
 8009106:	2101      	movs	r1, #1
 8009108:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	223e      	movs	r2, #62	; 0x3e
 800910e:	2101      	movs	r1, #1
 8009110:	5499      	strb	r1, [r3, r2]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	223f      	movs	r2, #63	; 0x3f
 8009116:	2101      	movs	r1, #1
 8009118:	5499      	strb	r1, [r3, r2]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2240      	movs	r2, #64	; 0x40
 800911e:	2101      	movs	r1, #1
 8009120:	5499      	strb	r1, [r3, r2]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2241      	movs	r2, #65	; 0x41
 8009126:	2101      	movs	r1, #1
 8009128:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2242      	movs	r2, #66	; 0x42
 800912e:	2101      	movs	r1, #1
 8009130:	5499      	strb	r1, [r3, r2]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2243      	movs	r2, #67	; 0x43
 8009136:	2101      	movs	r1, #1
 8009138:	5499      	strb	r1, [r3, r2]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2244      	movs	r2, #68	; 0x44
 800913e:	2101      	movs	r1, #1
 8009140:	5499      	strb	r1, [r3, r2]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2245      	movs	r2, #69	; 0x45
 8009146:	2101      	movs	r1, #1
 8009148:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	223d      	movs	r2, #61	; 0x3d
 800914e:	2101      	movs	r1, #1
 8009150:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	0018      	movs	r0, r3
 8009156:	46bd      	mov	sp, r7
 8009158:	b002      	add	sp, #8
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	223d      	movs	r2, #61	; 0x3d
 8009168:	5c9b      	ldrb	r3, [r3, r2]
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b01      	cmp	r3, #1
 800916e:	d001      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e035      	b.n	80091e0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	223d      	movs	r2, #61	; 0x3d
 8009178:	2102      	movs	r1, #2
 800917a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2101      	movs	r1, #1
 8009188:	430a      	orrs	r2, r1
 800918a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a15      	ldr	r2, [pc, #84]	; (80091e8 <HAL_TIM_Base_Start_IT+0x8c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d009      	beq.n	80091aa <HAL_TIM_Base_Start_IT+0x4e>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a14      	ldr	r2, [pc, #80]	; (80091ec <HAL_TIM_Base_Start_IT+0x90>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d004      	beq.n	80091aa <HAL_TIM_Base_Start_IT+0x4e>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a12      	ldr	r2, [pc, #72]	; (80091f0 <HAL_TIM_Base_Start_IT+0x94>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d111      	bne.n	80091ce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	2207      	movs	r2, #7
 80091b2:	4013      	ands	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b06      	cmp	r3, #6
 80091ba:	d010      	beq.n	80091de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2101      	movs	r1, #1
 80091c8:	430a      	orrs	r2, r1
 80091ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091cc:	e007      	b.n	80091de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2101      	movs	r1, #1
 80091da:	430a      	orrs	r2, r1
 80091dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	0018      	movs	r0, r3
 80091e2:	46bd      	mov	sp, r7
 80091e4:	b004      	add	sp, #16
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	40012c00 	.word	0x40012c00
 80091ec:	40000400 	.word	0x40000400
 80091f0:	40014000 	.word	0x40014000

080091f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e042      	b.n	800928c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	223d      	movs	r2, #61	; 0x3d
 800920a:	5c9b      	ldrb	r3, [r3, r2]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d107      	bne.n	8009222 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	223c      	movs	r2, #60	; 0x3c
 8009216:	2100      	movs	r1, #0
 8009218:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	0018      	movs	r0, r3
 800921e:	f000 f839 	bl	8009294 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	223d      	movs	r2, #61	; 0x3d
 8009226:	2102      	movs	r1, #2
 8009228:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	3304      	adds	r3, #4
 8009232:	0019      	movs	r1, r3
 8009234:	0010      	movs	r0, r2
 8009236:	f000 fba3 	bl	8009980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2246      	movs	r2, #70	; 0x46
 800923e:	2101      	movs	r1, #1
 8009240:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	223e      	movs	r2, #62	; 0x3e
 8009246:	2101      	movs	r1, #1
 8009248:	5499      	strb	r1, [r3, r2]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	223f      	movs	r2, #63	; 0x3f
 800924e:	2101      	movs	r1, #1
 8009250:	5499      	strb	r1, [r3, r2]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2240      	movs	r2, #64	; 0x40
 8009256:	2101      	movs	r1, #1
 8009258:	5499      	strb	r1, [r3, r2]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2241      	movs	r2, #65	; 0x41
 800925e:	2101      	movs	r1, #1
 8009260:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2242      	movs	r2, #66	; 0x42
 8009266:	2101      	movs	r1, #1
 8009268:	5499      	strb	r1, [r3, r2]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2243      	movs	r2, #67	; 0x43
 800926e:	2101      	movs	r1, #1
 8009270:	5499      	strb	r1, [r3, r2]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2244      	movs	r2, #68	; 0x44
 8009276:	2101      	movs	r1, #1
 8009278:	5499      	strb	r1, [r3, r2]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2245      	movs	r2, #69	; 0x45
 800927e:	2101      	movs	r1, #1
 8009280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	223d      	movs	r2, #61	; 0x3d
 8009286:	2101      	movs	r1, #1
 8009288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	0018      	movs	r0, r3
 800928e:	46bd      	mov	sp, r7
 8009290:	b002      	add	sp, #8
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800929c:	46c0      	nop			; (mov r8, r8)
 800929e:	46bd      	mov	sp, r7
 80092a0:	b002      	add	sp, #8
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d108      	bne.n	80092c6 <HAL_TIM_PWM_Start+0x22>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	223e      	movs	r2, #62	; 0x3e
 80092b8:	5c9b      	ldrb	r3, [r3, r2]
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	3b01      	subs	r3, #1
 80092be:	1e5a      	subs	r2, r3, #1
 80092c0:	4193      	sbcs	r3, r2
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	e01f      	b.n	8009306 <HAL_TIM_PWM_Start+0x62>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d108      	bne.n	80092de <HAL_TIM_PWM_Start+0x3a>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	223f      	movs	r2, #63	; 0x3f
 80092d0:	5c9b      	ldrb	r3, [r3, r2]
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	3b01      	subs	r3, #1
 80092d6:	1e5a      	subs	r2, r3, #1
 80092d8:	4193      	sbcs	r3, r2
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	e013      	b.n	8009306 <HAL_TIM_PWM_Start+0x62>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b08      	cmp	r3, #8
 80092e2:	d108      	bne.n	80092f6 <HAL_TIM_PWM_Start+0x52>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2240      	movs	r2, #64	; 0x40
 80092e8:	5c9b      	ldrb	r3, [r3, r2]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	3b01      	subs	r3, #1
 80092ee:	1e5a      	subs	r2, r3, #1
 80092f0:	4193      	sbcs	r3, r2
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	e007      	b.n	8009306 <HAL_TIM_PWM_Start+0x62>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2241      	movs	r2, #65	; 0x41
 80092fa:	5c9b      	ldrb	r3, [r3, r2]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	1e5a      	subs	r2, r3, #1
 8009302:	4193      	sbcs	r3, r2
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e06e      	b.n	80093ec <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d104      	bne.n	800931e <HAL_TIM_PWM_Start+0x7a>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	223e      	movs	r2, #62	; 0x3e
 8009318:	2102      	movs	r1, #2
 800931a:	5499      	strb	r1, [r3, r2]
 800931c:	e013      	b.n	8009346 <HAL_TIM_PWM_Start+0xa2>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b04      	cmp	r3, #4
 8009322:	d104      	bne.n	800932e <HAL_TIM_PWM_Start+0x8a>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	223f      	movs	r2, #63	; 0x3f
 8009328:	2102      	movs	r1, #2
 800932a:	5499      	strb	r1, [r3, r2]
 800932c:	e00b      	b.n	8009346 <HAL_TIM_PWM_Start+0xa2>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b08      	cmp	r3, #8
 8009332:	d104      	bne.n	800933e <HAL_TIM_PWM_Start+0x9a>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2240      	movs	r2, #64	; 0x40
 8009338:	2102      	movs	r1, #2
 800933a:	5499      	strb	r1, [r3, r2]
 800933c:	e003      	b.n	8009346 <HAL_TIM_PWM_Start+0xa2>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2241      	movs	r2, #65	; 0x41
 8009342:	2102      	movs	r1, #2
 8009344:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	2201      	movs	r2, #1
 800934e:	0018      	movs	r0, r3
 8009350:	f000 fe22 	bl	8009f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a26      	ldr	r2, [pc, #152]	; (80093f4 <HAL_TIM_PWM_Start+0x150>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d00e      	beq.n	800937c <HAL_TIM_PWM_Start+0xd8>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a25      	ldr	r2, [pc, #148]	; (80093f8 <HAL_TIM_PWM_Start+0x154>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d009      	beq.n	800937c <HAL_TIM_PWM_Start+0xd8>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a23      	ldr	r2, [pc, #140]	; (80093fc <HAL_TIM_PWM_Start+0x158>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d004      	beq.n	800937c <HAL_TIM_PWM_Start+0xd8>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a22      	ldr	r2, [pc, #136]	; (8009400 <HAL_TIM_PWM_Start+0x15c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d101      	bne.n	8009380 <HAL_TIM_PWM_Start+0xdc>
 800937c:	2301      	movs	r3, #1
 800937e:	e000      	b.n	8009382 <HAL_TIM_PWM_Start+0xde>
 8009380:	2300      	movs	r3, #0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d008      	beq.n	8009398 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2180      	movs	r1, #128	; 0x80
 8009392:	0209      	lsls	r1, r1, #8
 8009394:	430a      	orrs	r2, r1
 8009396:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a15      	ldr	r2, [pc, #84]	; (80093f4 <HAL_TIM_PWM_Start+0x150>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d009      	beq.n	80093b6 <HAL_TIM_PWM_Start+0x112>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a17      	ldr	r2, [pc, #92]	; (8009404 <HAL_TIM_PWM_Start+0x160>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d004      	beq.n	80093b6 <HAL_TIM_PWM_Start+0x112>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a11      	ldr	r2, [pc, #68]	; (80093f8 <HAL_TIM_PWM_Start+0x154>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d111      	bne.n	80093da <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	2207      	movs	r2, #7
 80093be:	4013      	ands	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2b06      	cmp	r3, #6
 80093c6:	d010      	beq.n	80093ea <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2101      	movs	r1, #1
 80093d4:	430a      	orrs	r2, r1
 80093d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d8:	e007      	b.n	80093ea <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2101      	movs	r1, #1
 80093e6:	430a      	orrs	r2, r1
 80093e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	0018      	movs	r0, r3
 80093ee:	46bd      	mov	sp, r7
 80093f0:	b004      	add	sp, #16
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	40012c00 	.word	0x40012c00
 80093f8:	40014000 	.word	0x40014000
 80093fc:	40014400 	.word	0x40014400
 8009400:	40014800 	.word	0x40014800
 8009404:	40000400 	.word	0x40000400

08009408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	2202      	movs	r2, #2
 8009418:	4013      	ands	r3, r2
 800941a:	2b02      	cmp	r3, #2
 800941c:	d124      	bne.n	8009468 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	2202      	movs	r2, #2
 8009426:	4013      	ands	r3, r2
 8009428:	2b02      	cmp	r3, #2
 800942a:	d11d      	bne.n	8009468 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2203      	movs	r2, #3
 8009432:	4252      	negs	r2, r2
 8009434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	2203      	movs	r2, #3
 8009444:	4013      	ands	r3, r2
 8009446:	d004      	beq.n	8009452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	0018      	movs	r0, r3
 800944c:	f000 fa80 	bl	8009950 <HAL_TIM_IC_CaptureCallback>
 8009450:	e007      	b.n	8009462 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	0018      	movs	r0, r3
 8009456:	f000 fa73 	bl	8009940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	0018      	movs	r0, r3
 800945e:	f000 fa7f 	bl	8009960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2204      	movs	r2, #4
 8009470:	4013      	ands	r3, r2
 8009472:	2b04      	cmp	r3, #4
 8009474:	d125      	bne.n	80094c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	2204      	movs	r2, #4
 800947e:	4013      	ands	r3, r2
 8009480:	2b04      	cmp	r3, #4
 8009482:	d11e      	bne.n	80094c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2205      	movs	r2, #5
 800948a:	4252      	negs	r2, r2
 800948c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2202      	movs	r2, #2
 8009492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	699a      	ldr	r2, [r3, #24]
 800949a:	23c0      	movs	r3, #192	; 0xc0
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4013      	ands	r3, r2
 80094a0:	d004      	beq.n	80094ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	0018      	movs	r0, r3
 80094a6:	f000 fa53 	bl	8009950 <HAL_TIM_IC_CaptureCallback>
 80094aa:	e007      	b.n	80094bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	0018      	movs	r0, r3
 80094b0:	f000 fa46 	bl	8009940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	0018      	movs	r0, r3
 80094b8:	f000 fa52 	bl	8009960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	2208      	movs	r2, #8
 80094ca:	4013      	ands	r3, r2
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d124      	bne.n	800951a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	2208      	movs	r2, #8
 80094d8:	4013      	ands	r3, r2
 80094da:	2b08      	cmp	r3, #8
 80094dc:	d11d      	bne.n	800951a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2209      	movs	r2, #9
 80094e4:	4252      	negs	r2, r2
 80094e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2204      	movs	r2, #4
 80094ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	2203      	movs	r2, #3
 80094f6:	4013      	ands	r3, r2
 80094f8:	d004      	beq.n	8009504 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	0018      	movs	r0, r3
 80094fe:	f000 fa27 	bl	8009950 <HAL_TIM_IC_CaptureCallback>
 8009502:	e007      	b.n	8009514 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	0018      	movs	r0, r3
 8009508:	f000 fa1a 	bl	8009940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	0018      	movs	r0, r3
 8009510:	f000 fa26 	bl	8009960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2210      	movs	r2, #16
 8009522:	4013      	ands	r3, r2
 8009524:	2b10      	cmp	r3, #16
 8009526:	d125      	bne.n	8009574 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	2210      	movs	r2, #16
 8009530:	4013      	ands	r3, r2
 8009532:	2b10      	cmp	r3, #16
 8009534:	d11e      	bne.n	8009574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2211      	movs	r2, #17
 800953c:	4252      	negs	r2, r2
 800953e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2208      	movs	r2, #8
 8009544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	69da      	ldr	r2, [r3, #28]
 800954c:	23c0      	movs	r3, #192	; 0xc0
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4013      	ands	r3, r2
 8009552:	d004      	beq.n	800955e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	0018      	movs	r0, r3
 8009558:	f000 f9fa 	bl	8009950 <HAL_TIM_IC_CaptureCallback>
 800955c:	e007      	b.n	800956e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	0018      	movs	r0, r3
 8009562:	f000 f9ed 	bl	8009940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	0018      	movs	r0, r3
 800956a:	f000 f9f9 	bl	8009960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	2201      	movs	r2, #1
 800957c:	4013      	ands	r3, r2
 800957e:	2b01      	cmp	r3, #1
 8009580:	d10f      	bne.n	80095a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	2201      	movs	r2, #1
 800958a:	4013      	ands	r3, r2
 800958c:	2b01      	cmp	r3, #1
 800958e:	d108      	bne.n	80095a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2202      	movs	r2, #2
 8009596:	4252      	negs	r2, r2
 8009598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	0018      	movs	r0, r3
 800959e:	f7fb febf 	bl	8005320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	2280      	movs	r2, #128	; 0x80
 80095aa:	4013      	ands	r3, r2
 80095ac:	2b80      	cmp	r3, #128	; 0x80
 80095ae:	d10f      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	2280      	movs	r2, #128	; 0x80
 80095b8:	4013      	ands	r3, r2
 80095ba:	2b80      	cmp	r3, #128	; 0x80
 80095bc:	d108      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2281      	movs	r2, #129	; 0x81
 80095c4:	4252      	negs	r2, r2
 80095c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	0018      	movs	r0, r3
 80095cc:	f000 fd68 	bl	800a0a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	2240      	movs	r2, #64	; 0x40
 80095d8:	4013      	ands	r3, r2
 80095da:	2b40      	cmp	r3, #64	; 0x40
 80095dc:	d10f      	bne.n	80095fe <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	2240      	movs	r2, #64	; 0x40
 80095e6:	4013      	ands	r3, r2
 80095e8:	2b40      	cmp	r3, #64	; 0x40
 80095ea:	d108      	bne.n	80095fe <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2241      	movs	r2, #65	; 0x41
 80095f2:	4252      	negs	r2, r2
 80095f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	0018      	movs	r0, r3
 80095fa:	f000 f9b9 	bl	8009970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	2220      	movs	r2, #32
 8009606:	4013      	ands	r3, r2
 8009608:	2b20      	cmp	r3, #32
 800960a:	d10f      	bne.n	800962c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	2220      	movs	r2, #32
 8009614:	4013      	ands	r3, r2
 8009616:	2b20      	cmp	r3, #32
 8009618:	d108      	bne.n	800962c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2221      	movs	r2, #33	; 0x21
 8009620:	4252      	negs	r2, r2
 8009622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	0018      	movs	r0, r3
 8009628:	f000 fd32 	bl	800a090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800962c:	46c0      	nop			; (mov r8, r8)
 800962e:	46bd      	mov	sp, r7
 8009630:	b002      	add	sp, #8
 8009632:	bd80      	pop	{r7, pc}

08009634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009640:	2317      	movs	r3, #23
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	2200      	movs	r2, #0
 8009646:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	223c      	movs	r2, #60	; 0x3c
 800964c:	5c9b      	ldrb	r3, [r3, r2]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d101      	bne.n	8009656 <HAL_TIM_PWM_ConfigChannel+0x22>
 8009652:	2302      	movs	r3, #2
 8009654:	e0a3      	b.n	800979e <HAL_TIM_PWM_ConfigChannel+0x16a>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	223c      	movs	r2, #60	; 0x3c
 800965a:	2101      	movs	r1, #1
 800965c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b04      	cmp	r3, #4
 8009662:	d029      	beq.n	80096b8 <HAL_TIM_PWM_ConfigChannel+0x84>
 8009664:	d802      	bhi.n	800966c <HAL_TIM_PWM_ConfigChannel+0x38>
 8009666:	2b00      	cmp	r3, #0
 8009668:	d005      	beq.n	8009676 <HAL_TIM_PWM_ConfigChannel+0x42>
 800966a:	e08c      	b.n	8009786 <HAL_TIM_PWM_ConfigChannel+0x152>
 800966c:	2b08      	cmp	r3, #8
 800966e:	d046      	beq.n	80096fe <HAL_TIM_PWM_ConfigChannel+0xca>
 8009670:	2b0c      	cmp	r3, #12
 8009672:	d065      	beq.n	8009740 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8009674:	e087      	b.n	8009786 <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	0011      	movs	r1, r2
 800967e:	0018      	movs	r0, r3
 8009680:	f000 f9f4 	bl	8009a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699a      	ldr	r2, [r3, #24]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2108      	movs	r1, #8
 8009690:	430a      	orrs	r2, r1
 8009692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2104      	movs	r1, #4
 80096a0:	438a      	bics	r2, r1
 80096a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6999      	ldr	r1, [r3, #24]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	691a      	ldr	r2, [r3, #16]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	619a      	str	r2, [r3, #24]
      break;
 80096b6:	e06b      	b.n	8009790 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	0011      	movs	r1, r2
 80096c0:	0018      	movs	r0, r3
 80096c2:	f000 fa5b 	bl	8009b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	699a      	ldr	r2, [r3, #24]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2180      	movs	r1, #128	; 0x80
 80096d2:	0109      	lsls	r1, r1, #4
 80096d4:	430a      	orrs	r2, r1
 80096d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699a      	ldr	r2, [r3, #24]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4931      	ldr	r1, [pc, #196]	; (80097a8 <HAL_TIM_PWM_ConfigChannel+0x174>)
 80096e4:	400a      	ands	r2, r1
 80096e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6999      	ldr	r1, [r3, #24]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	021a      	lsls	r2, r3, #8
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	619a      	str	r2, [r3, #24]
      break;
 80096fc:	e048      	b.n	8009790 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	0011      	movs	r1, r2
 8009706:	0018      	movs	r0, r3
 8009708:	f000 fabc 	bl	8009c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	69da      	ldr	r2, [r3, #28]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2108      	movs	r1, #8
 8009718:	430a      	orrs	r2, r1
 800971a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69da      	ldr	r2, [r3, #28]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2104      	movs	r1, #4
 8009728:	438a      	bics	r2, r1
 800972a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	69d9      	ldr	r1, [r3, #28]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	691a      	ldr	r2, [r3, #16]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	61da      	str	r2, [r3, #28]
      break;
 800973e:	e027      	b.n	8009790 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	0011      	movs	r1, r2
 8009748:	0018      	movs	r0, r3
 800974a:	f000 fb21 	bl	8009d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69da      	ldr	r2, [r3, #28]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2180      	movs	r1, #128	; 0x80
 800975a:	0109      	lsls	r1, r1, #4
 800975c:	430a      	orrs	r2, r1
 800975e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69da      	ldr	r2, [r3, #28]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	490f      	ldr	r1, [pc, #60]	; (80097a8 <HAL_TIM_PWM_ConfigChannel+0x174>)
 800976c:	400a      	ands	r2, r1
 800976e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	69d9      	ldr	r1, [r3, #28]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	021a      	lsls	r2, r3, #8
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	61da      	str	r2, [r3, #28]
      break;
 8009784:	e004      	b.n	8009790 <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 8009786:	2317      	movs	r3, #23
 8009788:	18fb      	adds	r3, r7, r3
 800978a:	2201      	movs	r2, #1
 800978c:	701a      	strb	r2, [r3, #0]
      break;
 800978e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	223c      	movs	r2, #60	; 0x3c
 8009794:	2100      	movs	r1, #0
 8009796:	5499      	strb	r1, [r3, r2]

  return status;
 8009798:	2317      	movs	r3, #23
 800979a:	18fb      	adds	r3, r7, r3
 800979c:	781b      	ldrb	r3, [r3, #0]
}
 800979e:	0018      	movs	r0, r3
 80097a0:	46bd      	mov	sp, r7
 80097a2:	b006      	add	sp, #24
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	46c0      	nop			; (mov r8, r8)
 80097a8:	fffffbff 	.word	0xfffffbff

080097ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097b6:	230f      	movs	r3, #15
 80097b8:	18fb      	adds	r3, r7, r3
 80097ba:	2200      	movs	r2, #0
 80097bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	223c      	movs	r2, #60	; 0x3c
 80097c2:	5c9b      	ldrb	r3, [r3, r2]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d101      	bne.n	80097cc <HAL_TIM_ConfigClockSource+0x20>
 80097c8:	2302      	movs	r3, #2
 80097ca:	e0b2      	b.n	8009932 <HAL_TIM_ConfigClockSource+0x186>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	223c      	movs	r2, #60	; 0x3c
 80097d0:	2101      	movs	r1, #1
 80097d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	223d      	movs	r2, #61	; 0x3d
 80097d8:	2102      	movs	r1, #2
 80097da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2277      	movs	r2, #119	; 0x77
 80097e8:	4393      	bics	r3, r2
 80097ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	4a53      	ldr	r2, [pc, #332]	; (800993c <HAL_TIM_ConfigClockSource+0x190>)
 80097f0:	4013      	ands	r3, r2
 80097f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b40      	cmp	r3, #64	; 0x40
 8009802:	d100      	bne.n	8009806 <HAL_TIM_ConfigClockSource+0x5a>
 8009804:	e06b      	b.n	80098de <HAL_TIM_ConfigClockSource+0x132>
 8009806:	d80e      	bhi.n	8009826 <HAL_TIM_ConfigClockSource+0x7a>
 8009808:	2b10      	cmp	r3, #16
 800980a:	d100      	bne.n	800980e <HAL_TIM_ConfigClockSource+0x62>
 800980c:	e077      	b.n	80098fe <HAL_TIM_ConfigClockSource+0x152>
 800980e:	d803      	bhi.n	8009818 <HAL_TIM_ConfigClockSource+0x6c>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d100      	bne.n	8009816 <HAL_TIM_ConfigClockSource+0x6a>
 8009814:	e073      	b.n	80098fe <HAL_TIM_ConfigClockSource+0x152>
 8009816:	e07b      	b.n	8009910 <HAL_TIM_ConfigClockSource+0x164>
 8009818:	2b20      	cmp	r3, #32
 800981a:	d100      	bne.n	800981e <HAL_TIM_ConfigClockSource+0x72>
 800981c:	e06f      	b.n	80098fe <HAL_TIM_ConfigClockSource+0x152>
 800981e:	2b30      	cmp	r3, #48	; 0x30
 8009820:	d100      	bne.n	8009824 <HAL_TIM_ConfigClockSource+0x78>
 8009822:	e06c      	b.n	80098fe <HAL_TIM_ConfigClockSource+0x152>
 8009824:	e074      	b.n	8009910 <HAL_TIM_ConfigClockSource+0x164>
 8009826:	2b70      	cmp	r3, #112	; 0x70
 8009828:	d00e      	beq.n	8009848 <HAL_TIM_ConfigClockSource+0x9c>
 800982a:	d804      	bhi.n	8009836 <HAL_TIM_ConfigClockSource+0x8a>
 800982c:	2b50      	cmp	r3, #80	; 0x50
 800982e:	d036      	beq.n	800989e <HAL_TIM_ConfigClockSource+0xf2>
 8009830:	2b60      	cmp	r3, #96	; 0x60
 8009832:	d044      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x112>
 8009834:	e06c      	b.n	8009910 <HAL_TIM_ConfigClockSource+0x164>
 8009836:	2280      	movs	r2, #128	; 0x80
 8009838:	0152      	lsls	r2, r2, #5
 800983a:	4293      	cmp	r3, r2
 800983c:	d06d      	beq.n	800991a <HAL_TIM_ConfigClockSource+0x16e>
 800983e:	2280      	movs	r2, #128	; 0x80
 8009840:	0192      	lsls	r2, r2, #6
 8009842:	4293      	cmp	r3, r2
 8009844:	d017      	beq.n	8009876 <HAL_TIM_ConfigClockSource+0xca>
 8009846:	e063      	b.n	8009910 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	6899      	ldr	r1, [r3, #8]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f000 fb7e 	bl	8009f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2277      	movs	r2, #119	; 0x77
 8009868:	4313      	orrs	r3, r2
 800986a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	609a      	str	r2, [r3, #8]
      break;
 8009874:	e052      	b.n	800991c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6818      	ldr	r0, [r3, #0]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	6899      	ldr	r1, [r3, #8]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f000 fb67 	bl	8009f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689a      	ldr	r2, [r3, #8]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2180      	movs	r1, #128	; 0x80
 8009896:	01c9      	lsls	r1, r1, #7
 8009898:	430a      	orrs	r2, r1
 800989a:	609a      	str	r2, [r3, #8]
      break;
 800989c:	e03e      	b.n	800991c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	6859      	ldr	r1, [r3, #4]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	001a      	movs	r2, r3
 80098ac:	f000 fada 	bl	8009e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2150      	movs	r1, #80	; 0x50
 80098b6:	0018      	movs	r0, r3
 80098b8:	f000 fb34 	bl	8009f24 <TIM_ITRx_SetConfig>
      break;
 80098bc:	e02e      	b.n	800991c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6818      	ldr	r0, [r3, #0]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	6859      	ldr	r1, [r3, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	001a      	movs	r2, r3
 80098cc:	f000 faf8 	bl	8009ec0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2160      	movs	r1, #96	; 0x60
 80098d6:	0018      	movs	r0, r3
 80098d8:	f000 fb24 	bl	8009f24 <TIM_ITRx_SetConfig>
      break;
 80098dc:	e01e      	b.n	800991c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6818      	ldr	r0, [r3, #0]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	6859      	ldr	r1, [r3, #4]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	001a      	movs	r2, r3
 80098ec:	f000 faba 	bl	8009e64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2140      	movs	r1, #64	; 0x40
 80098f6:	0018      	movs	r0, r3
 80098f8:	f000 fb14 	bl	8009f24 <TIM_ITRx_SetConfig>
      break;
 80098fc:	e00e      	b.n	800991c <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	0019      	movs	r1, r3
 8009908:	0010      	movs	r0, r2
 800990a:	f000 fb0b 	bl	8009f24 <TIM_ITRx_SetConfig>
      break;
 800990e:	e005      	b.n	800991c <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8009910:	230f      	movs	r3, #15
 8009912:	18fb      	adds	r3, r7, r3
 8009914:	2201      	movs	r2, #1
 8009916:	701a      	strb	r2, [r3, #0]
      break;
 8009918:	e000      	b.n	800991c <HAL_TIM_ConfigClockSource+0x170>
      break;
 800991a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	223d      	movs	r2, #61	; 0x3d
 8009920:	2101      	movs	r1, #1
 8009922:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	223c      	movs	r2, #60	; 0x3c
 8009928:	2100      	movs	r1, #0
 800992a:	5499      	strb	r1, [r3, r2]

  return status;
 800992c:	230f      	movs	r3, #15
 800992e:	18fb      	adds	r3, r7, r3
 8009930:	781b      	ldrb	r3, [r3, #0]
}
 8009932:	0018      	movs	r0, r3
 8009934:	46bd      	mov	sp, r7
 8009936:	b004      	add	sp, #16
 8009938:	bd80      	pop	{r7, pc}
 800993a:	46c0      	nop			; (mov r8, r8)
 800993c:	ffff00ff 	.word	0xffff00ff

08009940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009948:	46c0      	nop			; (mov r8, r8)
 800994a:	46bd      	mov	sp, r7
 800994c:	b002      	add	sp, #8
 800994e:	bd80      	pop	{r7, pc}

08009950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009958:	46c0      	nop			; (mov r8, r8)
 800995a:	46bd      	mov	sp, r7
 800995c:	b002      	add	sp, #8
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009968:	46c0      	nop			; (mov r8, r8)
 800996a:	46bd      	mov	sp, r7
 800996c:	b002      	add	sp, #8
 800996e:	bd80      	pop	{r7, pc}

08009970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009978:	46c0      	nop			; (mov r8, r8)
 800997a:	46bd      	mov	sp, r7
 800997c:	b002      	add	sp, #8
 800997e:	bd80      	pop	{r7, pc}

08009980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a2f      	ldr	r2, [pc, #188]	; (8009a50 <TIM_Base_SetConfig+0xd0>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d003      	beq.n	80099a0 <TIM_Base_SetConfig+0x20>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a2e      	ldr	r2, [pc, #184]	; (8009a54 <TIM_Base_SetConfig+0xd4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d108      	bne.n	80099b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2270      	movs	r2, #112	; 0x70
 80099a4:	4393      	bics	r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a26      	ldr	r2, [pc, #152]	; (8009a50 <TIM_Base_SetConfig+0xd0>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d013      	beq.n	80099e2 <TIM_Base_SetConfig+0x62>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a25      	ldr	r2, [pc, #148]	; (8009a54 <TIM_Base_SetConfig+0xd4>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d00f      	beq.n	80099e2 <TIM_Base_SetConfig+0x62>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a24      	ldr	r2, [pc, #144]	; (8009a58 <TIM_Base_SetConfig+0xd8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d00b      	beq.n	80099e2 <TIM_Base_SetConfig+0x62>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a23      	ldr	r2, [pc, #140]	; (8009a5c <TIM_Base_SetConfig+0xdc>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d007      	beq.n	80099e2 <TIM_Base_SetConfig+0x62>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a22      	ldr	r2, [pc, #136]	; (8009a60 <TIM_Base_SetConfig+0xe0>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d003      	beq.n	80099e2 <TIM_Base_SetConfig+0x62>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a21      	ldr	r2, [pc, #132]	; (8009a64 <TIM_Base_SetConfig+0xe4>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d108      	bne.n	80099f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4a20      	ldr	r2, [pc, #128]	; (8009a68 <TIM_Base_SetConfig+0xe8>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2280      	movs	r2, #128	; 0x80
 80099f8:	4393      	bics	r3, r2
 80099fa:	001a      	movs	r2, r3
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a0c      	ldr	r2, [pc, #48]	; (8009a50 <TIM_Base_SetConfig+0xd0>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d00b      	beq.n	8009a3a <TIM_Base_SetConfig+0xba>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a0d      	ldr	r2, [pc, #52]	; (8009a5c <TIM_Base_SetConfig+0xdc>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d007      	beq.n	8009a3a <TIM_Base_SetConfig+0xba>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a0c      	ldr	r2, [pc, #48]	; (8009a60 <TIM_Base_SetConfig+0xe0>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d003      	beq.n	8009a3a <TIM_Base_SetConfig+0xba>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a0b      	ldr	r2, [pc, #44]	; (8009a64 <TIM_Base_SetConfig+0xe4>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d103      	bne.n	8009a42 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	691a      	ldr	r2, [r3, #16]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	615a      	str	r2, [r3, #20]
}
 8009a48:	46c0      	nop			; (mov r8, r8)
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	b004      	add	sp, #16
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	40012c00 	.word	0x40012c00
 8009a54:	40000400 	.word	0x40000400
 8009a58:	40002000 	.word	0x40002000
 8009a5c:	40014000 	.word	0x40014000
 8009a60:	40014400 	.word	0x40014400
 8009a64:	40014800 	.word	0x40014800
 8009a68:	fffffcff 	.word	0xfffffcff

08009a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	4393      	bics	r3, r2
 8009a7e:	001a      	movs	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2270      	movs	r2, #112	; 0x70
 8009a9a:	4393      	bics	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2203      	movs	r2, #3
 8009aa2:	4393      	bics	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	4393      	bics	r3, r2
 8009ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a27      	ldr	r2, [pc, #156]	; (8009b64 <TIM_OC1_SetConfig+0xf8>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00b      	beq.n	8009ae2 <TIM_OC1_SetConfig+0x76>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a26      	ldr	r2, [pc, #152]	; (8009b68 <TIM_OC1_SetConfig+0xfc>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d007      	beq.n	8009ae2 <TIM_OC1_SetConfig+0x76>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a25      	ldr	r2, [pc, #148]	; (8009b6c <TIM_OC1_SetConfig+0x100>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d003      	beq.n	8009ae2 <TIM_OC1_SetConfig+0x76>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a24      	ldr	r2, [pc, #144]	; (8009b70 <TIM_OC1_SetConfig+0x104>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d10c      	bne.n	8009afc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2208      	movs	r2, #8
 8009ae6:	4393      	bics	r3, r2
 8009ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	2204      	movs	r2, #4
 8009af8:	4393      	bics	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a19      	ldr	r2, [pc, #100]	; (8009b64 <TIM_OC1_SetConfig+0xf8>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d00b      	beq.n	8009b1c <TIM_OC1_SetConfig+0xb0>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a18      	ldr	r2, [pc, #96]	; (8009b68 <TIM_OC1_SetConfig+0xfc>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d007      	beq.n	8009b1c <TIM_OC1_SetConfig+0xb0>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a17      	ldr	r2, [pc, #92]	; (8009b6c <TIM_OC1_SetConfig+0x100>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d003      	beq.n	8009b1c <TIM_OC1_SetConfig+0xb0>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a16      	ldr	r2, [pc, #88]	; (8009b70 <TIM_OC1_SetConfig+0x104>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d111      	bne.n	8009b40 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	4a15      	ldr	r2, [pc, #84]	; (8009b74 <TIM_OC1_SetConfig+0x108>)
 8009b20:	4013      	ands	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	4a14      	ldr	r2, [pc, #80]	; (8009b78 <TIM_OC1_SetConfig+0x10c>)
 8009b28:	4013      	ands	r3, r2
 8009b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	621a      	str	r2, [r3, #32]
}
 8009b5a:	46c0      	nop			; (mov r8, r8)
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	b006      	add	sp, #24
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	46c0      	nop			; (mov r8, r8)
 8009b64:	40012c00 	.word	0x40012c00
 8009b68:	40014000 	.word	0x40014000
 8009b6c:	40014400 	.word	0x40014400
 8009b70:	40014800 	.word	0x40014800
 8009b74:	fffffeff 	.word	0xfffffeff
 8009b78:	fffffdff 	.word	0xfffffdff

08009b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	2210      	movs	r2, #16
 8009b8c:	4393      	bics	r3, r2
 8009b8e:	001a      	movs	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4a2e      	ldr	r2, [pc, #184]	; (8009c64 <TIM_OC2_SetConfig+0xe8>)
 8009baa:	4013      	ands	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	4a2d      	ldr	r2, [pc, #180]	; (8009c68 <TIM_OC2_SetConfig+0xec>)
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	021b      	lsls	r3, r3, #8
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	4393      	bics	r3, r2
 8009bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a24      	ldr	r2, [pc, #144]	; (8009c6c <TIM_OC2_SetConfig+0xf0>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d10d      	bne.n	8009bfa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2280      	movs	r2, #128	; 0x80
 8009be2:	4393      	bics	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	011b      	lsls	r3, r3, #4
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2240      	movs	r2, #64	; 0x40
 8009bf6:	4393      	bics	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a1b      	ldr	r2, [pc, #108]	; (8009c6c <TIM_OC2_SetConfig+0xf0>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d00b      	beq.n	8009c1a <TIM_OC2_SetConfig+0x9e>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a1a      	ldr	r2, [pc, #104]	; (8009c70 <TIM_OC2_SetConfig+0xf4>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d007      	beq.n	8009c1a <TIM_OC2_SetConfig+0x9e>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a19      	ldr	r2, [pc, #100]	; (8009c74 <TIM_OC2_SetConfig+0xf8>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d003      	beq.n	8009c1a <TIM_OC2_SetConfig+0x9e>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a18      	ldr	r2, [pc, #96]	; (8009c78 <TIM_OC2_SetConfig+0xfc>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d113      	bne.n	8009c42 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	4a17      	ldr	r2, [pc, #92]	; (8009c7c <TIM_OC2_SetConfig+0x100>)
 8009c1e:	4013      	ands	r3, r2
 8009c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	4a16      	ldr	r2, [pc, #88]	; (8009c80 <TIM_OC2_SetConfig+0x104>)
 8009c26:	4013      	ands	r3, r2
 8009c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	621a      	str	r2, [r3, #32]
}
 8009c5c:	46c0      	nop			; (mov r8, r8)
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	b006      	add	sp, #24
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	ffff8fff 	.word	0xffff8fff
 8009c68:	fffffcff 	.word	0xfffffcff
 8009c6c:	40012c00 	.word	0x40012c00
 8009c70:	40014000 	.word	0x40014000
 8009c74:	40014400 	.word	0x40014400
 8009c78:	40014800 	.word	0x40014800
 8009c7c:	fffffbff 	.word	0xfffffbff
 8009c80:	fffff7ff 	.word	0xfffff7ff

08009c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	4a35      	ldr	r2, [pc, #212]	; (8009d68 <TIM_OC3_SetConfig+0xe4>)
 8009c94:	401a      	ands	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2270      	movs	r2, #112	; 0x70
 8009cb0:	4393      	bics	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	4393      	bics	r3, r2
 8009cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	4a28      	ldr	r2, [pc, #160]	; (8009d6c <TIM_OC3_SetConfig+0xe8>)
 8009cca:	4013      	ands	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	021b      	lsls	r3, r3, #8
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a24      	ldr	r2, [pc, #144]	; (8009d70 <TIM_OC3_SetConfig+0xec>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d10d      	bne.n	8009cfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	4a23      	ldr	r2, [pc, #140]	; (8009d74 <TIM_OC3_SetConfig+0xf0>)
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	021b      	lsls	r3, r3, #8
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	4a1f      	ldr	r2, [pc, #124]	; (8009d78 <TIM_OC3_SetConfig+0xf4>)
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a1b      	ldr	r2, [pc, #108]	; (8009d70 <TIM_OC3_SetConfig+0xec>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d00b      	beq.n	8009d1e <TIM_OC3_SetConfig+0x9a>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a1c      	ldr	r2, [pc, #112]	; (8009d7c <TIM_OC3_SetConfig+0xf8>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d007      	beq.n	8009d1e <TIM_OC3_SetConfig+0x9a>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a1b      	ldr	r2, [pc, #108]	; (8009d80 <TIM_OC3_SetConfig+0xfc>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d003      	beq.n	8009d1e <TIM_OC3_SetConfig+0x9a>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a1a      	ldr	r2, [pc, #104]	; (8009d84 <TIM_OC3_SetConfig+0x100>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d113      	bne.n	8009d46 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	4a19      	ldr	r2, [pc, #100]	; (8009d88 <TIM_OC3_SetConfig+0x104>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	4a18      	ldr	r2, [pc, #96]	; (8009d8c <TIM_OC3_SetConfig+0x108>)
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	011b      	lsls	r3, r3, #4
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	011b      	lsls	r3, r3, #4
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	621a      	str	r2, [r3, #32]
}
 8009d60:	46c0      	nop			; (mov r8, r8)
 8009d62:	46bd      	mov	sp, r7
 8009d64:	b006      	add	sp, #24
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	fffffeff 	.word	0xfffffeff
 8009d6c:	fffffdff 	.word	0xfffffdff
 8009d70:	40012c00 	.word	0x40012c00
 8009d74:	fffff7ff 	.word	0xfffff7ff
 8009d78:	fffffbff 	.word	0xfffffbff
 8009d7c:	40014000 	.word	0x40014000
 8009d80:	40014400 	.word	0x40014400
 8009d84:	40014800 	.word	0x40014800
 8009d88:	ffffefff 	.word	0xffffefff
 8009d8c:	ffffdfff 	.word	0xffffdfff

08009d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	4a28      	ldr	r2, [pc, #160]	; (8009e40 <TIM_OC4_SetConfig+0xb0>)
 8009da0:	401a      	ands	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4a22      	ldr	r2, [pc, #136]	; (8009e44 <TIM_OC4_SetConfig+0xb4>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4a21      	ldr	r2, [pc, #132]	; (8009e48 <TIM_OC4_SetConfig+0xb8>)
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	021b      	lsls	r3, r3, #8
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	4a1d      	ldr	r2, [pc, #116]	; (8009e4c <TIM_OC4_SetConfig+0xbc>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	031b      	lsls	r3, r3, #12
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a19      	ldr	r2, [pc, #100]	; (8009e50 <TIM_OC4_SetConfig+0xc0>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d00b      	beq.n	8009e08 <TIM_OC4_SetConfig+0x78>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a18      	ldr	r2, [pc, #96]	; (8009e54 <TIM_OC4_SetConfig+0xc4>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d007      	beq.n	8009e08 <TIM_OC4_SetConfig+0x78>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a17      	ldr	r2, [pc, #92]	; (8009e58 <TIM_OC4_SetConfig+0xc8>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d003      	beq.n	8009e08 <TIM_OC4_SetConfig+0x78>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a16      	ldr	r2, [pc, #88]	; (8009e5c <TIM_OC4_SetConfig+0xcc>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d109      	bne.n	8009e1c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <TIM_OC4_SetConfig+0xd0>)
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	019b      	lsls	r3, r3, #6
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	621a      	str	r2, [r3, #32]
}
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	b006      	add	sp, #24
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	46c0      	nop			; (mov r8, r8)
 8009e40:	ffffefff 	.word	0xffffefff
 8009e44:	ffff8fff 	.word	0xffff8fff
 8009e48:	fffffcff 	.word	0xfffffcff
 8009e4c:	ffffdfff 	.word	0xffffdfff
 8009e50:	40012c00 	.word	0x40012c00
 8009e54:	40014000 	.word	0x40014000
 8009e58:	40014400 	.word	0x40014400
 8009e5c:	40014800 	.word	0x40014800
 8009e60:	ffffbfff 	.word	0xffffbfff

08009e64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	4393      	bics	r3, r2
 8009e7e:	001a      	movs	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	22f0      	movs	r2, #240	; 0xf0
 8009e8e:	4393      	bics	r3, r2
 8009e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	011b      	lsls	r3, r3, #4
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	220a      	movs	r2, #10
 8009ea0:	4393      	bics	r3, r2
 8009ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	697a      	ldr	r2, [r7, #20]
 8009eb6:	621a      	str	r2, [r3, #32]
}
 8009eb8:	46c0      	nop			; (mov r8, r8)
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	b006      	add	sp, #24
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	2210      	movs	r2, #16
 8009ed2:	4393      	bics	r3, r2
 8009ed4:	001a      	movs	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6a1b      	ldr	r3, [r3, #32]
 8009ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	4a0d      	ldr	r2, [pc, #52]	; (8009f20 <TIM_TI2_ConfigInputStage+0x60>)
 8009eea:	4013      	ands	r3, r2
 8009eec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	031b      	lsls	r3, r3, #12
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	22a0      	movs	r2, #160	; 0xa0
 8009efc:	4393      	bics	r3, r2
 8009efe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	011b      	lsls	r3, r3, #4
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	621a      	str	r2, [r3, #32]
}
 8009f16:	46c0      	nop			; (mov r8, r8)
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	b006      	add	sp, #24
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	ffff0fff 	.word	0xffff0fff

08009f24 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2270      	movs	r2, #112	; 0x70
 8009f38:	4393      	bics	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	2207      	movs	r2, #7
 8009f44:	4313      	orrs	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	609a      	str	r2, [r3, #8]
}
 8009f4e:	46c0      	nop			; (mov r8, r8)
 8009f50:	46bd      	mov	sp, r7
 8009f52:	b004      	add	sp, #16
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	4a09      	ldr	r2, [pc, #36]	; (8009f94 <TIM_ETR_SetConfig+0x3c>)
 8009f70:	4013      	ands	r3, r2
 8009f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	021a      	lsls	r2, r3, #8
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	609a      	str	r2, [r3, #8]
}
 8009f8c:	46c0      	nop			; (mov r8, r8)
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	b006      	add	sp, #24
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	ffff00ff 	.word	0xffff00ff

08009f98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	221f      	movs	r2, #31
 8009fa8:	4013      	ands	r3, r2
 8009faa:	2201      	movs	r2, #1
 8009fac:	409a      	lsls	r2, r3
 8009fae:	0013      	movs	r3, r2
 8009fb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	43d2      	mvns	r2, r2
 8009fba:	401a      	ands	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6a1a      	ldr	r2, [r3, #32]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	211f      	movs	r1, #31
 8009fc8:	400b      	ands	r3, r1
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	4099      	lsls	r1, r3
 8009fce:	000b      	movs	r3, r1
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	621a      	str	r2, [r3, #32]
}
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	b006      	add	sp, #24
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	223c      	movs	r2, #60	; 0x3c
 8009fee:	5c9b      	ldrb	r3, [r3, r2]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	e041      	b.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	223c      	movs	r2, #60	; 0x3c
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	223d      	movs	r2, #61	; 0x3d
 800a004:	2102      	movs	r1, #2
 800a006:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2270      	movs	r2, #112	; 0x70
 800a01c:	4393      	bics	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a13      	ldr	r2, [pc, #76]	; (800a084 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d009      	beq.n	800a050 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a11      	ldr	r2, [pc, #68]	; (800a088 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d004      	beq.n	800a050 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a10      	ldr	r2, [pc, #64]	; (800a08c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10c      	bne.n	800a06a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2280      	movs	r2, #128	; 0x80
 800a054:	4393      	bics	r3, r2
 800a056:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	4313      	orrs	r3, r2
 800a060:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	223d      	movs	r2, #61	; 0x3d
 800a06e:	2101      	movs	r1, #1
 800a070:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	223c      	movs	r2, #60	; 0x3c
 800a076:	2100      	movs	r1, #0
 800a078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	0018      	movs	r0, r3
 800a07e:	46bd      	mov	sp, r7
 800a080:	b004      	add	sp, #16
 800a082:	bd80      	pop	{r7, pc}
 800a084:	40012c00 	.word	0x40012c00
 800a088:	40000400 	.word	0x40000400
 800a08c:	40014000 	.word	0x40014000

0800a090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a098:	46c0      	nop			; (mov r8, r8)
 800a09a:	46bd      	mov	sp, r7
 800a09c:	b002      	add	sp, #8
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0a8:	46c0      	nop			; (mov r8, r8)
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	b002      	add	sp, #8
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e044      	b.n	800a14c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d107      	bne.n	800a0da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2274      	movs	r2, #116	; 0x74
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	0018      	movs	r0, r3
 800a0d6:	f7fb fd53 	bl	8005b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2224      	movs	r2, #36	; 0x24
 800a0de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2101      	movs	r1, #1
 800a0ec:	438a      	bics	r2, r1
 800a0ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	f000 fbda 	bl	800a8ac <UART_SetConfig>
 800a0f8:	0003      	movs	r3, r0
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d101      	bne.n	800a102 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e024      	b.n	800a14c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	d003      	beq.n	800a112 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	0018      	movs	r0, r3
 800a10e:	f000 fd23 	bl	800ab58 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	490d      	ldr	r1, [pc, #52]	; (800a154 <HAL_UART_Init+0xa4>)
 800a11e:	400a      	ands	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	689a      	ldr	r2, [r3, #8]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2108      	movs	r1, #8
 800a12e:	438a      	bics	r2, r1
 800a130:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2101      	movs	r1, #1
 800a13e:	430a      	orrs	r2, r1
 800a140:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	0018      	movs	r0, r3
 800a146:	f000 fdbb 	bl	800acc0 <UART_CheckIdleState>
 800a14a:	0003      	movs	r3, r0
}
 800a14c:	0018      	movs	r0, r3
 800a14e:	46bd      	mov	sp, r7
 800a150:	b002      	add	sp, #8
 800a152:	bd80      	pop	{r7, pc}
 800a154:	fffff7ff 	.word	0xfffff7ff

0800a158 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	1dbb      	adds	r3, r7, #6
 800a164:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	d000      	beq.n	800a170 <HAL_UART_Transmit_IT+0x18>
 800a16e:	e068      	b.n	800a242 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <HAL_UART_Transmit_IT+0x26>
 800a176:	1dbb      	adds	r3, r7, #6
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e060      	b.n	800a244 <HAL_UART_Transmit_IT+0xec>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	2380      	movs	r3, #128	; 0x80
 800a188:	015b      	lsls	r3, r3, #5
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d109      	bne.n	800a1a2 <HAL_UART_Transmit_IT+0x4a>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d105      	bne.n	800a1a2 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	2201      	movs	r2, #1
 800a19a:	4013      	ands	r3, r2
 800a19c:	d001      	beq.n	800a1a2 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e050      	b.n	800a244 <HAL_UART_Transmit_IT+0xec>
      }
    }

    __HAL_LOCK(huart);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2274      	movs	r2, #116	; 0x74
 800a1a6:	5c9b      	ldrb	r3, [r3, r2]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d101      	bne.n	800a1b0 <HAL_UART_Transmit_IT+0x58>
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	e049      	b.n	800a244 <HAL_UART_Transmit_IT+0xec>
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2274      	movs	r2, #116	; 0x74
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	1dba      	adds	r2, r7, #6
 800a1c2:	2150      	movs	r1, #80	; 0x50
 800a1c4:	8812      	ldrh	r2, [r2, #0]
 800a1c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	1dba      	adds	r2, r7, #6
 800a1cc:	2152      	movs	r1, #82	; 0x52
 800a1ce:	8812      	ldrh	r2, [r2, #0]
 800a1d0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2280      	movs	r2, #128	; 0x80
 800a1dc:	2100      	movs	r1, #0
 800a1de:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2221      	movs	r2, #33	; 0x21
 800a1e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	2380      	movs	r3, #128	; 0x80
 800a1ec:	015b      	lsls	r3, r3, #5
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d107      	bne.n	800a202 <HAL_UART_Transmit_IT+0xaa>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d103      	bne.n	800a202 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4a13      	ldr	r2, [pc, #76]	; (800a24c <HAL_UART_Transmit_IT+0xf4>)
 800a1fe:	669a      	str	r2, [r3, #104]	; 0x68
 800a200:	e002      	b.n	800a208 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4a12      	ldr	r2, [pc, #72]	; (800a250 <HAL_UART_Transmit_IT+0xf8>)
 800a206:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2274      	movs	r2, #116	; 0x74
 800a20c:	2100      	movs	r1, #0
 800a20e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a210:	f3ef 8310 	mrs	r3, PRIMASK
 800a214:	613b      	str	r3, [r7, #16]
  return(result);
 800a216:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a218:	61fb      	str	r3, [r7, #28]
 800a21a:	2301      	movs	r3, #1
 800a21c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f383 8810 	msr	PRIMASK, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2180      	movs	r1, #128	; 0x80
 800a230:	430a      	orrs	r2, r1
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	61bb      	str	r3, [r7, #24]
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	f383 8810 	msr	PRIMASK, r3

    return HAL_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	e000      	b.n	800a244 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800a242:	2302      	movs	r3, #2
  }
}
 800a244:	0018      	movs	r0, r3
 800a246:	46bd      	mov	sp, r7
 800a248:	b008      	add	sp, #32
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	0800b1b7 	.word	0x0800b1b7
 800a250:	0800b10b 	.word	0x0800b10b

0800a254 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b088      	sub	sp, #32
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	1dbb      	adds	r3, r7, #6
 800a260:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a266:	2b20      	cmp	r3, #32
 800a268:	d14e      	bne.n	800a308 <HAL_UART_Receive_IT+0xb4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <HAL_UART_Receive_IT+0x24>
 800a270:	1dbb      	adds	r3, r7, #6
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e046      	b.n	800a30a <HAL_UART_Receive_IT+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	689a      	ldr	r2, [r3, #8]
 800a280:	2380      	movs	r3, #128	; 0x80
 800a282:	015b      	lsls	r3, r3, #5
 800a284:	429a      	cmp	r2, r3
 800a286:	d109      	bne.n	800a29c <HAL_UART_Receive_IT+0x48>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d105      	bne.n	800a29c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2201      	movs	r2, #1
 800a294:	4013      	ands	r3, r2
 800a296:	d001      	beq.n	800a29c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e036      	b.n	800a30a <HAL_UART_Receive_IT+0xb6>
      }
    }

    __HAL_LOCK(huart);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2274      	movs	r2, #116	; 0x74
 800a2a0:	5c9b      	ldrb	r3, [r3, r2]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d101      	bne.n	800a2aa <HAL_UART_Receive_IT+0x56>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	e02f      	b.n	800a30a <HAL_UART_Receive_IT+0xb6>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2274      	movs	r2, #116	; 0x74
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	2380      	movs	r3, #128	; 0x80
 800a2c0:	041b      	lsls	r3, r3, #16
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	d017      	beq.n	800a2f6 <HAL_UART_Receive_IT+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ca:	613b      	str	r3, [r7, #16]
  return(result);
 800a2cc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2ce:	61fb      	str	r3, [r7, #28]
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f383 8810 	msr	PRIMASK, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2180      	movs	r1, #128	; 0x80
 800a2e6:	04c9      	lsls	r1, r1, #19
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	61bb      	str	r3, [r7, #24]
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	f383 8810 	msr	PRIMASK, r3
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a2f6:	1dbb      	adds	r3, r7, #6
 800a2f8:	881a      	ldrh	r2, [r3, #0]
 800a2fa:	68b9      	ldr	r1, [r7, #8]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	0018      	movs	r0, r3
 800a300:	f000 fde4 	bl	800aecc <UART_Start_Receive_IT>
 800a304:	0003      	movs	r3, r0
 800a306:	e000      	b.n	800a30a <HAL_UART_Receive_IT+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a308:	2302      	movs	r3, #2
  }
}
 800a30a:	0018      	movs	r0, r3
 800a30c:	46bd      	mov	sp, r7
 800a30e:	b008      	add	sp, #32
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b0aa      	sub	sp, #168	; 0xa8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	22a4      	movs	r2, #164	; 0xa4
 800a324:	18b9      	adds	r1, r7, r2
 800a326:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	21a0      	movs	r1, #160	; 0xa0
 800a330:	1879      	adds	r1, r7, r1
 800a332:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	219c      	movs	r1, #156	; 0x9c
 800a33c:	1879      	adds	r1, r7, r1
 800a33e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a340:	18bb      	adds	r3, r7, r2
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a99      	ldr	r2, [pc, #612]	; (800a5ac <HAL_UART_IRQHandler+0x298>)
 800a346:	4013      	ands	r3, r2
 800a348:	2298      	movs	r2, #152	; 0x98
 800a34a:	18b9      	adds	r1, r7, r2
 800a34c:	600b      	str	r3, [r1, #0]
  if (errorflags == 0U)
 800a34e:	18bb      	adds	r3, r7, r2
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d116      	bne.n	800a384 <HAL_UART_IRQHandler+0x70>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a356:	23a4      	movs	r3, #164	; 0xa4
 800a358:	18fb      	adds	r3, r7, r3
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2220      	movs	r2, #32
 800a35e:	4013      	ands	r3, r2
 800a360:	d010      	beq.n	800a384 <HAL_UART_IRQHandler+0x70>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a362:	23a0      	movs	r3, #160	; 0xa0
 800a364:	18fb      	adds	r3, r7, r3
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2220      	movs	r2, #32
 800a36a:	4013      	ands	r3, r2
 800a36c:	d00a      	beq.n	800a384 <HAL_UART_IRQHandler+0x70>
    {
      if (huart->RxISR != NULL)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a372:	2b00      	cmp	r3, #0
 800a374:	d100      	bne.n	800a378 <HAL_UART_IRQHandler+0x64>
 800a376:	e274      	b.n	800a862 <HAL_UART_IRQHandler+0x54e>
      {
        huart->RxISR(huart);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	0010      	movs	r0, r2
 800a380:	4798      	blx	r3
      }
      return;
 800a382:	e26e      	b.n	800a862 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a384:	2398      	movs	r3, #152	; 0x98
 800a386:	18fb      	adds	r3, r7, r3
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d100      	bne.n	800a390 <HAL_UART_IRQHandler+0x7c>
 800a38e:	e113      	b.n	800a5b8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a390:	239c      	movs	r3, #156	; 0x9c
 800a392:	18fb      	adds	r3, r7, r3
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2201      	movs	r2, #1
 800a398:	4013      	ands	r3, r2
 800a39a:	d106      	bne.n	800a3aa <HAL_UART_IRQHandler+0x96>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a39c:	23a0      	movs	r3, #160	; 0xa0
 800a39e:	18fb      	adds	r3, r7, r3
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a83      	ldr	r2, [pc, #524]	; (800a5b0 <HAL_UART_IRQHandler+0x29c>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	d100      	bne.n	800a3aa <HAL_UART_IRQHandler+0x96>
 800a3a8:	e106      	b.n	800a5b8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3aa:	23a4      	movs	r3, #164	; 0xa4
 800a3ac:	18fb      	adds	r3, r7, r3
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	d012      	beq.n	800a3dc <HAL_UART_IRQHandler+0xc8>
 800a3b6:	23a0      	movs	r3, #160	; 0xa0
 800a3b8:	18fb      	adds	r3, r7, r3
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	2380      	movs	r3, #128	; 0x80
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	d00b      	beq.n	800a3dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2280      	movs	r2, #128	; 0x80
 800a3d0:	589b      	ldr	r3, [r3, r2]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2180      	movs	r1, #128	; 0x80
 800a3da:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3dc:	23a4      	movs	r3, #164	; 0xa4
 800a3de:	18fb      	adds	r3, r7, r3
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	d011      	beq.n	800a40c <HAL_UART_IRQHandler+0xf8>
 800a3e8:	239c      	movs	r3, #156	; 0x9c
 800a3ea:	18fb      	adds	r3, r7, r3
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	d00b      	beq.n	800a40c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2280      	movs	r2, #128	; 0x80
 800a400:	589b      	ldr	r3, [r3, r2]
 800a402:	2204      	movs	r2, #4
 800a404:	431a      	orrs	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2180      	movs	r1, #128	; 0x80
 800a40a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a40c:	23a4      	movs	r3, #164	; 0xa4
 800a40e:	18fb      	adds	r3, r7, r3
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2204      	movs	r2, #4
 800a414:	4013      	ands	r3, r2
 800a416:	d011      	beq.n	800a43c <HAL_UART_IRQHandler+0x128>
 800a418:	239c      	movs	r3, #156	; 0x9c
 800a41a:	18fb      	adds	r3, r7, r3
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2201      	movs	r2, #1
 800a420:	4013      	ands	r3, r2
 800a422:	d00b      	beq.n	800a43c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2204      	movs	r2, #4
 800a42a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2280      	movs	r2, #128	; 0x80
 800a430:	589b      	ldr	r3, [r3, r2]
 800a432:	2202      	movs	r2, #2
 800a434:	431a      	orrs	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2180      	movs	r1, #128	; 0x80
 800a43a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a43c:	23a4      	movs	r3, #164	; 0xa4
 800a43e:	18fb      	adds	r3, r7, r3
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2208      	movs	r2, #8
 800a444:	4013      	ands	r3, r2
 800a446:	d017      	beq.n	800a478 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a448:	23a0      	movs	r3, #160	; 0xa0
 800a44a:	18fb      	adds	r3, r7, r3
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2220      	movs	r2, #32
 800a450:	4013      	ands	r3, r2
 800a452:	d105      	bne.n	800a460 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a454:	239c      	movs	r3, #156	; 0x9c
 800a456:	18fb      	adds	r3, r7, r3
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2201      	movs	r2, #1
 800a45c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a45e:	d00b      	beq.n	800a478 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2208      	movs	r2, #8
 800a466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2280      	movs	r2, #128	; 0x80
 800a46c:	589b      	ldr	r3, [r3, r2]
 800a46e:	2208      	movs	r2, #8
 800a470:	431a      	orrs	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2180      	movs	r1, #128	; 0x80
 800a476:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a478:	23a4      	movs	r3, #164	; 0xa4
 800a47a:	18fb      	adds	r3, r7, r3
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	2380      	movs	r3, #128	; 0x80
 800a480:	011b      	lsls	r3, r3, #4
 800a482:	4013      	ands	r3, r2
 800a484:	d013      	beq.n	800a4ae <HAL_UART_IRQHandler+0x19a>
 800a486:	23a0      	movs	r3, #160	; 0xa0
 800a488:	18fb      	adds	r3, r7, r3
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	2380      	movs	r3, #128	; 0x80
 800a48e:	04db      	lsls	r3, r3, #19
 800a490:	4013      	ands	r3, r2
 800a492:	d00c      	beq.n	800a4ae <HAL_UART_IRQHandler+0x19a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2280      	movs	r2, #128	; 0x80
 800a49a:	0112      	lsls	r2, r2, #4
 800a49c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2280      	movs	r2, #128	; 0x80
 800a4a2:	589b      	ldr	r3, [r3, r2]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2180      	movs	r1, #128	; 0x80
 800a4ac:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2280      	movs	r2, #128	; 0x80
 800a4b2:	589b      	ldr	r3, [r3, r2]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d100      	bne.n	800a4ba <HAL_UART_IRQHandler+0x1a6>
 800a4b8:	e1d5      	b.n	800a866 <HAL_UART_IRQHandler+0x552>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a4ba:	23a4      	movs	r3, #164	; 0xa4
 800a4bc:	18fb      	adds	r3, r7, r3
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2220      	movs	r2, #32
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	d00e      	beq.n	800a4e4 <HAL_UART_IRQHandler+0x1d0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a4c6:	23a0      	movs	r3, #160	; 0xa0
 800a4c8:	18fb      	adds	r3, r7, r3
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	d008      	beq.n	800a4e4 <HAL_UART_IRQHandler+0x1d0>
      {
        if (huart->RxISR != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d004      	beq.n	800a4e4 <HAL_UART_IRQHandler+0x1d0>
        {
          huart->RxISR(huart);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	0010      	movs	r0, r2
 800a4e2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2280      	movs	r2, #128	; 0x80
 800a4e8:	589b      	ldr	r3, [r3, r2]
 800a4ea:	2294      	movs	r2, #148	; 0x94
 800a4ec:	18ba      	adds	r2, r7, r2
 800a4ee:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	2240      	movs	r2, #64	; 0x40
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	2b40      	cmp	r3, #64	; 0x40
 800a4fc:	d005      	beq.n	800a50a <HAL_UART_IRQHandler+0x1f6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a4fe:	2394      	movs	r3, #148	; 0x94
 800a500:	18fb      	adds	r3, r7, r3
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2228      	movs	r2, #40	; 0x28
 800a506:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a508:	d045      	beq.n	800a596 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	0018      	movs	r0, r3
 800a50e:	f000 fd89 	bl	800b024 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	2240      	movs	r2, #64	; 0x40
 800a51a:	4013      	ands	r3, r2
 800a51c:	2b40      	cmp	r3, #64	; 0x40
 800a51e:	d135      	bne.n	800a58c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a520:	f3ef 8310 	mrs	r3, PRIMASK
 800a524:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a528:	2090      	movs	r0, #144	; 0x90
 800a52a:	183a      	adds	r2, r7, r0
 800a52c:	6013      	str	r3, [r2, #0]
 800a52e:	2301      	movs	r3, #1
 800a530:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a534:	f383 8810 	msr	PRIMASK, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2140      	movs	r1, #64	; 0x40
 800a544:	438a      	bics	r2, r1
 800a546:	609a      	str	r2, [r3, #8]
 800a548:	183b      	adds	r3, r7, r0
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a54e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a550:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d012      	beq.n	800a582 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a560:	4a14      	ldr	r2, [pc, #80]	; (800a5b4 <HAL_UART_IRQHandler+0x2a0>)
 800a562:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a568:	0018      	movs	r0, r3
 800a56a:	f7fc fae0 	bl	8006b2e <HAL_DMA_Abort_IT>
 800a56e:	1e03      	subs	r3, r0, #0
 800a570:	d01a      	beq.n	800a5a8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a57c:	0018      	movs	r0, r3
 800a57e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a580:	e012      	b.n	800a5a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	0018      	movs	r0, r3
 800a586:	f000 f97d 	bl	800a884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a58a:	e00d      	b.n	800a5a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	0018      	movs	r0, r3
 800a590:	f000 f978 	bl	800a884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a594:	e008      	b.n	800a5a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	0018      	movs	r0, r3
 800a59a:	f000 f973 	bl	800a884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2280      	movs	r2, #128	; 0x80
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a5a6:	e15e      	b.n	800a866 <HAL_UART_IRQHandler+0x552>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a8:	46c0      	nop			; (mov r8, r8)
    return;
 800a5aa:	e15c      	b.n	800a866 <HAL_UART_IRQHandler+0x552>
 800a5ac:	0000080f 	.word	0x0000080f
 800a5b0:	04000120 	.word	0x04000120
 800a5b4:	0800b0dd 	.word	0x0800b0dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d000      	beq.n	800a5c2 <HAL_UART_IRQHandler+0x2ae>
 800a5c0:	e127      	b.n	800a812 <HAL_UART_IRQHandler+0x4fe>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a5c2:	23a4      	movs	r3, #164	; 0xa4
 800a5c4:	18fb      	adds	r3, r7, r3
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2210      	movs	r2, #16
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	d100      	bne.n	800a5d0 <HAL_UART_IRQHandler+0x2bc>
 800a5ce:	e120      	b.n	800a812 <HAL_UART_IRQHandler+0x4fe>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a5d0:	23a0      	movs	r3, #160	; 0xa0
 800a5d2:	18fb      	adds	r3, r7, r3
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2210      	movs	r2, #16
 800a5d8:	4013      	ands	r3, r2
 800a5da:	d100      	bne.n	800a5de <HAL_UART_IRQHandler+0x2ca>
 800a5dc:	e119      	b.n	800a812 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2210      	movs	r2, #16
 800a5e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	2240      	movs	r2, #64	; 0x40
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	2b40      	cmp	r3, #64	; 0x40
 800a5f2:	d000      	beq.n	800a5f6 <HAL_UART_IRQHandler+0x2e2>
 800a5f4:	e095      	b.n	800a722 <HAL_UART_IRQHandler+0x40e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	217e      	movs	r1, #126	; 0x7e
 800a600:	187b      	adds	r3, r7, r1
 800a602:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a604:	187b      	adds	r3, r7, r1
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d100      	bne.n	800a60e <HAL_UART_IRQHandler+0x2fa>
 800a60c:	e12d      	b.n	800a86a <HAL_UART_IRQHandler+0x556>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2258      	movs	r2, #88	; 0x58
 800a612:	5a9b      	ldrh	r3, [r3, r2]
 800a614:	227e      	movs	r2, #126	; 0x7e
 800a616:	18ba      	adds	r2, r7, r2
 800a618:	8812      	ldrh	r2, [r2, #0]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d300      	bcc.n	800a620 <HAL_UART_IRQHandler+0x30c>
 800a61e:	e124      	b.n	800a86a <HAL_UART_IRQHandler+0x556>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	227e      	movs	r2, #126	; 0x7e
 800a624:	18ba      	adds	r2, r7, r2
 800a626:	215a      	movs	r1, #90	; 0x5a
 800a628:	8812      	ldrh	r2, [r2, #0]
 800a62a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	2b20      	cmp	r3, #32
 800a634:	d066      	beq.n	800a704 <HAL_UART_IRQHandler+0x3f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a636:	f3ef 8310 	mrs	r3, PRIMASK
 800a63a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a63e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a640:	2301      	movs	r3, #1
 800a642:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a646:	f383 8810 	msr	PRIMASK, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4989      	ldr	r1, [pc, #548]	; (800a87c <HAL_UART_IRQHandler+0x568>)
 800a656:	400a      	ands	r2, r1
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a65c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a664:	f3ef 8310 	mrs	r3, PRIMASK
 800a668:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a66c:	677b      	str	r3, [r7, #116]	; 0x74
 800a66e:	2301      	movs	r3, #1
 800a670:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a674:	f383 8810 	msr	PRIMASK, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689a      	ldr	r2, [r3, #8]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2101      	movs	r1, #1
 800a684:	438a      	bics	r2, r1
 800a686:	609a      	str	r2, [r3, #8]
 800a688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a68a:	647b      	str	r3, [r7, #68]	; 0x44
 800a68c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a68e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a692:	f3ef 8310 	mrs	r3, PRIMASK
 800a696:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a698:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a69a:	673b      	str	r3, [r7, #112]	; 0x70
 800a69c:	2301      	movs	r3, #1
 800a69e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6a2:	f383 8810 	msr	PRIMASK, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689a      	ldr	r2, [r3, #8]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2140      	movs	r1, #64	; 0x40
 800a6b2:	438a      	bics	r2, r1
 800a6b4:	609a      	str	r2, [r3, #8]
 800a6b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6b8:	653b      	str	r3, [r7, #80]	; 0x50
 800a6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6bc:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a6d0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a6d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6dc:	f383 8810 	msr	PRIMASK, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2110      	movs	r1, #16
 800a6ec:	438a      	bics	r2, r1
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6f6:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fe:	0018      	movs	r0, r3
 800a700:	f7fc f9dd 	bl	8006abe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2258      	movs	r2, #88	; 0x58
 800a708:	5a9a      	ldrh	r2, [r3, r2]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	215a      	movs	r1, #90	; 0x5a
 800a70e:	5a5b      	ldrh	r3, [r3, r1]
 800a710:	b29b      	uxth	r3, r3
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	b29a      	uxth	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	0011      	movs	r1, r2
 800a71a:	0018      	movs	r0, r3
 800a71c:	f000 f8ba 	bl	800a894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a720:	e0a3      	b.n	800a86a <HAL_UART_IRQHandler+0x556>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2258      	movs	r2, #88	; 0x58
 800a726:	5a99      	ldrh	r1, [r3, r2]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	225a      	movs	r2, #90	; 0x5a
 800a72c:	5a9b      	ldrh	r3, [r3, r2]
 800a72e:	b29a      	uxth	r2, r3
 800a730:	238e      	movs	r3, #142	; 0x8e
 800a732:	18fb      	adds	r3, r7, r3
 800a734:	1a8a      	subs	r2, r1, r2
 800a736:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	225a      	movs	r2, #90	; 0x5a
 800a73c:	5a9b      	ldrh	r3, [r3, r2]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	2b00      	cmp	r3, #0
 800a742:	d100      	bne.n	800a746 <HAL_UART_IRQHandler+0x432>
 800a744:	e093      	b.n	800a86e <HAL_UART_IRQHandler+0x55a>
          && (nb_rx_data > 0U))
 800a746:	238e      	movs	r3, #142	; 0x8e
 800a748:	18fb      	adds	r3, r7, r3
 800a74a:	881b      	ldrh	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d100      	bne.n	800a752 <HAL_UART_IRQHandler+0x43e>
 800a750:	e08d      	b.n	800a86e <HAL_UART_IRQHandler+0x55a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a752:	f3ef 8310 	mrs	r3, PRIMASK
 800a756:	60fb      	str	r3, [r7, #12]
  return(result);
 800a758:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a75a:	2088      	movs	r0, #136	; 0x88
 800a75c:	183a      	adds	r2, r7, r0
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	2301      	movs	r3, #1
 800a762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	f383 8810 	msr	PRIMASK, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4942      	ldr	r1, [pc, #264]	; (800a880 <HAL_UART_IRQHandler+0x56c>)
 800a776:	400a      	ands	r2, r1
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	183b      	adds	r3, r7, r0
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	617b      	str	r3, [r7, #20]
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a786:	f3ef 8310 	mrs	r3, PRIMASK
 800a78a:	61bb      	str	r3, [r7, #24]
  return(result);
 800a78c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a78e:	2084      	movs	r0, #132	; 0x84
 800a790:	183a      	adds	r2, r7, r0
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	2301      	movs	r3, #1
 800a796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	f383 8810 	msr	PRIMASK, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	689a      	ldr	r2, [r3, #8]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	438a      	bics	r2, r1
 800a7ac:	609a      	str	r2, [r3, #8]
 800a7ae:	183b      	adds	r3, r7, r0
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	623b      	str	r3, [r7, #32]
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a7d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7d4:	2080      	movs	r0, #128	; 0x80
 800a7d6:	183a      	adds	r2, r7, r0
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	2301      	movs	r3, #1
 800a7dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	f383 8810 	msr	PRIMASK, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2110      	movs	r1, #16
 800a7f0:	438a      	bics	r2, r1
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	183b      	adds	r3, r7, r0
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a800:	238e      	movs	r3, #142	; 0x8e
 800a802:	18fb      	adds	r3, r7, r3
 800a804:	881a      	ldrh	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	0011      	movs	r1, r2
 800a80a:	0018      	movs	r0, r3
 800a80c:	f000 f842 	bl	800a894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a810:	e02d      	b.n	800a86e <HAL_UART_IRQHandler+0x55a>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a812:	23a4      	movs	r3, #164	; 0xa4
 800a814:	18fb      	adds	r3, r7, r3
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2280      	movs	r2, #128	; 0x80
 800a81a:	4013      	ands	r3, r2
 800a81c:	d00f      	beq.n	800a83e <HAL_UART_IRQHandler+0x52a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a81e:	23a0      	movs	r3, #160	; 0xa0
 800a820:	18fb      	adds	r3, r7, r3
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2280      	movs	r2, #128	; 0x80
 800a826:	4013      	ands	r3, r2
 800a828:	d009      	beq.n	800a83e <HAL_UART_IRQHandler+0x52a>
  {
    if (huart->TxISR != NULL)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d01f      	beq.n	800a872 <HAL_UART_IRQHandler+0x55e>
    {
      huart->TxISR(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	0010      	movs	r0, r2
 800a83a:	4798      	blx	r3
    }
    return;
 800a83c:	e019      	b.n	800a872 <HAL_UART_IRQHandler+0x55e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a83e:	23a4      	movs	r3, #164	; 0xa4
 800a840:	18fb      	adds	r3, r7, r3
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2240      	movs	r2, #64	; 0x40
 800a846:	4013      	ands	r3, r2
 800a848:	d014      	beq.n	800a874 <HAL_UART_IRQHandler+0x560>
 800a84a:	23a0      	movs	r3, #160	; 0xa0
 800a84c:	18fb      	adds	r3, r7, r3
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2240      	movs	r2, #64	; 0x40
 800a852:	4013      	ands	r3, r2
 800a854:	d00e      	beq.n	800a874 <HAL_UART_IRQHandler+0x560>
  {
    UART_EndTransmit_IT(huart);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	0018      	movs	r0, r3
 800a85a:	f000 fd06 	bl	800b26a <UART_EndTransmit_IT>
    return;
 800a85e:	46c0      	nop			; (mov r8, r8)
 800a860:	e008      	b.n	800a874 <HAL_UART_IRQHandler+0x560>
      return;
 800a862:	46c0      	nop			; (mov r8, r8)
 800a864:	e006      	b.n	800a874 <HAL_UART_IRQHandler+0x560>
    return;
 800a866:	46c0      	nop			; (mov r8, r8)
 800a868:	e004      	b.n	800a874 <HAL_UART_IRQHandler+0x560>
      return;
 800a86a:	46c0      	nop			; (mov r8, r8)
 800a86c:	e002      	b.n	800a874 <HAL_UART_IRQHandler+0x560>
      return;
 800a86e:	46c0      	nop			; (mov r8, r8)
 800a870:	e000      	b.n	800a874 <HAL_UART_IRQHandler+0x560>
    return;
 800a872:	46c0      	nop			; (mov r8, r8)
  }

}
 800a874:	46bd      	mov	sp, r7
 800a876:	b02a      	add	sp, #168	; 0xa8
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	46c0      	nop			; (mov r8, r8)
 800a87c:	fffffeff 	.word	0xfffffeff
 800a880:	fffffedf 	.word	0xfffffedf

0800a884 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a88c:	46c0      	nop			; (mov r8, r8)
 800a88e:	46bd      	mov	sp, r7
 800a890:	b002      	add	sp, #8
 800a892:	bd80      	pop	{r7, pc}

0800a894 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	000a      	movs	r2, r1
 800a89e:	1cbb      	adds	r3, r7, #2
 800a8a0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8a2:	46c0      	nop			; (mov r8, r8)
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	b002      	add	sp, #8
 800a8a8:	bd80      	pop	{r7, pc}
	...

0800a8ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8b4:	231e      	movs	r3, #30
 800a8b6:	18fb      	adds	r3, r7, r3
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	431a      	orrs	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a95      	ldr	r2, [pc, #596]	; (800ab30 <UART_SetConfig+0x284>)
 800a8dc:	4013      	ands	r3, r2
 800a8de:	0019      	movs	r1, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4a90      	ldr	r2, [pc, #576]	; (800ab34 <UART_SetConfig+0x288>)
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	0019      	movs	r1, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68da      	ldr	r2, [r3, #12]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	430a      	orrs	r2, r1
 800a900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a1b      	ldr	r3, [r3, #32]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	4313      	orrs	r3, r2
 800a910:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	4a87      	ldr	r2, [pc, #540]	; (800ab38 <UART_SetConfig+0x28c>)
 800a91a:	4013      	ands	r3, r2
 800a91c:	0019      	movs	r1, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	430a      	orrs	r2, r1
 800a926:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a83      	ldr	r2, [pc, #524]	; (800ab3c <UART_SetConfig+0x290>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d125      	bne.n	800a97e <UART_SetConfig+0xd2>
 800a932:	4b83      	ldr	r3, [pc, #524]	; (800ab40 <UART_SetConfig+0x294>)
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	2203      	movs	r2, #3
 800a938:	4013      	ands	r3, r2
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d00f      	beq.n	800a95e <UART_SetConfig+0xb2>
 800a93e:	d304      	bcc.n	800a94a <UART_SetConfig+0x9e>
 800a940:	2b02      	cmp	r3, #2
 800a942:	d011      	beq.n	800a968 <UART_SetConfig+0xbc>
 800a944:	2b03      	cmp	r3, #3
 800a946:	d005      	beq.n	800a954 <UART_SetConfig+0xa8>
 800a948:	e013      	b.n	800a972 <UART_SetConfig+0xc6>
 800a94a:	231f      	movs	r3, #31
 800a94c:	18fb      	adds	r3, r7, r3
 800a94e:	2200      	movs	r2, #0
 800a950:	701a      	strb	r2, [r3, #0]
 800a952:	e036      	b.n	800a9c2 <UART_SetConfig+0x116>
 800a954:	231f      	movs	r3, #31
 800a956:	18fb      	adds	r3, r7, r3
 800a958:	2202      	movs	r2, #2
 800a95a:	701a      	strb	r2, [r3, #0]
 800a95c:	e031      	b.n	800a9c2 <UART_SetConfig+0x116>
 800a95e:	231f      	movs	r3, #31
 800a960:	18fb      	adds	r3, r7, r3
 800a962:	2204      	movs	r2, #4
 800a964:	701a      	strb	r2, [r3, #0]
 800a966:	e02c      	b.n	800a9c2 <UART_SetConfig+0x116>
 800a968:	231f      	movs	r3, #31
 800a96a:	18fb      	adds	r3, r7, r3
 800a96c:	2208      	movs	r2, #8
 800a96e:	701a      	strb	r2, [r3, #0]
 800a970:	e027      	b.n	800a9c2 <UART_SetConfig+0x116>
 800a972:	231f      	movs	r3, #31
 800a974:	18fb      	adds	r3, r7, r3
 800a976:	2210      	movs	r2, #16
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	46c0      	nop			; (mov r8, r8)
 800a97c:	e021      	b.n	800a9c2 <UART_SetConfig+0x116>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a70      	ldr	r2, [pc, #448]	; (800ab44 <UART_SetConfig+0x298>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d104      	bne.n	800a992 <UART_SetConfig+0xe6>
 800a988:	231f      	movs	r3, #31
 800a98a:	18fb      	adds	r3, r7, r3
 800a98c:	2200      	movs	r2, #0
 800a98e:	701a      	strb	r2, [r3, #0]
 800a990:	e017      	b.n	800a9c2 <UART_SetConfig+0x116>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a6c      	ldr	r2, [pc, #432]	; (800ab48 <UART_SetConfig+0x29c>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d104      	bne.n	800a9a6 <UART_SetConfig+0xfa>
 800a99c:	231f      	movs	r3, #31
 800a99e:	18fb      	adds	r3, r7, r3
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]
 800a9a4:	e00d      	b.n	800a9c2 <UART_SetConfig+0x116>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a68      	ldr	r2, [pc, #416]	; (800ab4c <UART_SetConfig+0x2a0>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d104      	bne.n	800a9ba <UART_SetConfig+0x10e>
 800a9b0:	231f      	movs	r3, #31
 800a9b2:	18fb      	adds	r3, r7, r3
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	701a      	strb	r2, [r3, #0]
 800a9b8:	e003      	b.n	800a9c2 <UART_SetConfig+0x116>
 800a9ba:	231f      	movs	r3, #31
 800a9bc:	18fb      	adds	r3, r7, r3
 800a9be:	2210      	movs	r2, #16
 800a9c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	69da      	ldr	r2, [r3, #28]
 800a9c6:	2380      	movs	r3, #128	; 0x80
 800a9c8:	021b      	lsls	r3, r3, #8
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d15c      	bne.n	800aa88 <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 800a9ce:	231f      	movs	r3, #31
 800a9d0:	18fb      	adds	r3, r7, r3
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d00d      	beq.n	800a9f4 <UART_SetConfig+0x148>
 800a9d8:	dc02      	bgt.n	800a9e0 <UART_SetConfig+0x134>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <UART_SetConfig+0x13e>
 800a9de:	e015      	b.n	800aa0c <UART_SetConfig+0x160>
 800a9e0:	2b04      	cmp	r3, #4
 800a9e2:	d00a      	beq.n	800a9fa <UART_SetConfig+0x14e>
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d00d      	beq.n	800aa04 <UART_SetConfig+0x158>
 800a9e8:	e010      	b.n	800aa0c <UART_SetConfig+0x160>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9ea:	f7fd fb39 	bl	8008060 <HAL_RCC_GetPCLK1Freq>
 800a9ee:	0003      	movs	r3, r0
 800a9f0:	61bb      	str	r3, [r7, #24]
        break;
 800a9f2:	e012      	b.n	800aa1a <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9f4:	4b56      	ldr	r3, [pc, #344]	; (800ab50 <UART_SetConfig+0x2a4>)
 800a9f6:	61bb      	str	r3, [r7, #24]
        break;
 800a9f8:	e00f      	b.n	800aa1a <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9fa:	f7fd fac1 	bl	8007f80 <HAL_RCC_GetSysClockFreq>
 800a9fe:	0003      	movs	r3, r0
 800aa00:	61bb      	str	r3, [r7, #24]
        break;
 800aa02:	e00a      	b.n	800aa1a <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa04:	2380      	movs	r3, #128	; 0x80
 800aa06:	021b      	lsls	r3, r3, #8
 800aa08:	61bb      	str	r3, [r7, #24]
        break;
 800aa0a:	e006      	b.n	800aa1a <UART_SetConfig+0x16e>
      default:
        pclk = 0U;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aa10:	231e      	movs	r3, #30
 800aa12:	18fb      	adds	r3, r7, r3
 800aa14:	2201      	movs	r2, #1
 800aa16:	701a      	strb	r2, [r3, #0]
        break;
 800aa18:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d100      	bne.n	800aa22 <UART_SetConfig+0x176>
 800aa20:	e079      	b.n	800ab16 <UART_SetConfig+0x26a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	005a      	lsls	r2, r3, #1
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	085b      	lsrs	r3, r3, #1
 800aa2c:	18d2      	adds	r2, r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	0019      	movs	r1, r3
 800aa34:	0010      	movs	r0, r2
 800aa36:	f7f5 fb67 	bl	8000108 <__udivsi3>
 800aa3a:	0003      	movs	r3, r0
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	2b0f      	cmp	r3, #15
 800aa44:	d91b      	bls.n	800aa7e <UART_SetConfig+0x1d2>
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	4a42      	ldr	r2, [pc, #264]	; (800ab54 <UART_SetConfig+0x2a8>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d817      	bhi.n	800aa7e <UART_SetConfig+0x1d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	200e      	movs	r0, #14
 800aa54:	183b      	adds	r3, r7, r0
 800aa56:	210f      	movs	r1, #15
 800aa58:	438a      	bics	r2, r1
 800aa5a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	085b      	lsrs	r3, r3, #1
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	2207      	movs	r2, #7
 800aa64:	4013      	ands	r3, r2
 800aa66:	b299      	uxth	r1, r3
 800aa68:	183b      	adds	r3, r7, r0
 800aa6a:	183a      	adds	r2, r7, r0
 800aa6c:	8812      	ldrh	r2, [r2, #0]
 800aa6e:	430a      	orrs	r2, r1
 800aa70:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	183a      	adds	r2, r7, r0
 800aa78:	8812      	ldrh	r2, [r2, #0]
 800aa7a:	60da      	str	r2, [r3, #12]
 800aa7c:	e04b      	b.n	800ab16 <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 800aa7e:	231e      	movs	r3, #30
 800aa80:	18fb      	adds	r3, r7, r3
 800aa82:	2201      	movs	r2, #1
 800aa84:	701a      	strb	r2, [r3, #0]
 800aa86:	e046      	b.n	800ab16 <UART_SetConfig+0x26a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa88:	231f      	movs	r3, #31
 800aa8a:	18fb      	adds	r3, r7, r3
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d00d      	beq.n	800aaae <UART_SetConfig+0x202>
 800aa92:	dc02      	bgt.n	800aa9a <UART_SetConfig+0x1ee>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d005      	beq.n	800aaa4 <UART_SetConfig+0x1f8>
 800aa98:	e015      	b.n	800aac6 <UART_SetConfig+0x21a>
 800aa9a:	2b04      	cmp	r3, #4
 800aa9c:	d00a      	beq.n	800aab4 <UART_SetConfig+0x208>
 800aa9e:	2b08      	cmp	r3, #8
 800aaa0:	d00d      	beq.n	800aabe <UART_SetConfig+0x212>
 800aaa2:	e010      	b.n	800aac6 <UART_SetConfig+0x21a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaa4:	f7fd fadc 	bl	8008060 <HAL_RCC_GetPCLK1Freq>
 800aaa8:	0003      	movs	r3, r0
 800aaaa:	61bb      	str	r3, [r7, #24]
        break;
 800aaac:	e012      	b.n	800aad4 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aaae:	4b28      	ldr	r3, [pc, #160]	; (800ab50 <UART_SetConfig+0x2a4>)
 800aab0:	61bb      	str	r3, [r7, #24]
        break;
 800aab2:	e00f      	b.n	800aad4 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aab4:	f7fd fa64 	bl	8007f80 <HAL_RCC_GetSysClockFreq>
 800aab8:	0003      	movs	r3, r0
 800aaba:	61bb      	str	r3, [r7, #24]
        break;
 800aabc:	e00a      	b.n	800aad4 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aabe:	2380      	movs	r3, #128	; 0x80
 800aac0:	021b      	lsls	r3, r3, #8
 800aac2:	61bb      	str	r3, [r7, #24]
        break;
 800aac4:	e006      	b.n	800aad4 <UART_SetConfig+0x228>
      default:
        pclk = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aaca:	231e      	movs	r3, #30
 800aacc:	18fb      	adds	r3, r7, r3
 800aace:	2201      	movs	r2, #1
 800aad0:	701a      	strb	r2, [r3, #0]
        break;
 800aad2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d01d      	beq.n	800ab16 <UART_SetConfig+0x26a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	085a      	lsrs	r2, r3, #1
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	18d2      	adds	r2, r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	0019      	movs	r1, r3
 800aaea:	0010      	movs	r0, r2
 800aaec:	f7f5 fb0c 	bl	8000108 <__udivsi3>
 800aaf0:	0003      	movs	r3, r0
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	2b0f      	cmp	r3, #15
 800aafa:	d908      	bls.n	800ab0e <UART_SetConfig+0x262>
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	4a15      	ldr	r2, [pc, #84]	; (800ab54 <UART_SetConfig+0x2a8>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d804      	bhi.n	800ab0e <UART_SetConfig+0x262>
      {
        huart->Instance->BRR = usartdiv;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	60da      	str	r2, [r3, #12]
 800ab0c:	e003      	b.n	800ab16 <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 800ab0e:	231e      	movs	r3, #30
 800ab10:	18fb      	adds	r3, r7, r3
 800ab12:	2201      	movs	r2, #1
 800ab14:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ab22:	231e      	movs	r3, #30
 800ab24:	18fb      	adds	r3, r7, r3
 800ab26:	781b      	ldrb	r3, [r3, #0]
}
 800ab28:	0018      	movs	r0, r3
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	b008      	add	sp, #32
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	efff69f3 	.word	0xefff69f3
 800ab34:	ffffcfff 	.word	0xffffcfff
 800ab38:	fffff4ff 	.word	0xfffff4ff
 800ab3c:	40013800 	.word	0x40013800
 800ab40:	40021000 	.word	0x40021000
 800ab44:	40004400 	.word	0x40004400
 800ab48:	40004800 	.word	0x40004800
 800ab4c:	40004c00 	.word	0x40004c00
 800ab50:	007a1200 	.word	0x007a1200
 800ab54:	0000ffff 	.word	0x0000ffff

0800ab58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2201      	movs	r2, #1
 800ab66:	4013      	ands	r3, r2
 800ab68:	d00b      	beq.n	800ab82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	4a4a      	ldr	r2, [pc, #296]	; (800ac9c <UART_AdvFeatureConfig+0x144>)
 800ab72:	4013      	ands	r3, r2
 800ab74:	0019      	movs	r1, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	430a      	orrs	r2, r1
 800ab80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab86:	2202      	movs	r2, #2
 800ab88:	4013      	ands	r3, r2
 800ab8a:	d00b      	beq.n	800aba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	4a43      	ldr	r2, [pc, #268]	; (800aca0 <UART_AdvFeatureConfig+0x148>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	0019      	movs	r1, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	430a      	orrs	r2, r1
 800aba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba8:	2204      	movs	r2, #4
 800abaa:	4013      	ands	r3, r2
 800abac:	d00b      	beq.n	800abc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	4a3b      	ldr	r2, [pc, #236]	; (800aca4 <UART_AdvFeatureConfig+0x14c>)
 800abb6:	4013      	ands	r3, r2
 800abb8:	0019      	movs	r1, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	430a      	orrs	r2, r1
 800abc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abca:	2208      	movs	r2, #8
 800abcc:	4013      	ands	r3, r2
 800abce:	d00b      	beq.n	800abe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	4a34      	ldr	r2, [pc, #208]	; (800aca8 <UART_AdvFeatureConfig+0x150>)
 800abd8:	4013      	ands	r3, r2
 800abda:	0019      	movs	r1, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	2210      	movs	r2, #16
 800abee:	4013      	ands	r3, r2
 800abf0:	d00b      	beq.n	800ac0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	4a2c      	ldr	r2, [pc, #176]	; (800acac <UART_AdvFeatureConfig+0x154>)
 800abfa:	4013      	ands	r3, r2
 800abfc:	0019      	movs	r1, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	430a      	orrs	r2, r1
 800ac08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0e:	2220      	movs	r2, #32
 800ac10:	4013      	ands	r3, r2
 800ac12:	d00b      	beq.n	800ac2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	4a25      	ldr	r2, [pc, #148]	; (800acb0 <UART_AdvFeatureConfig+0x158>)
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	0019      	movs	r1, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	2240      	movs	r2, #64	; 0x40
 800ac32:	4013      	ands	r3, r2
 800ac34:	d01d      	beq.n	800ac72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	4a1d      	ldr	r2, [pc, #116]	; (800acb4 <UART_AdvFeatureConfig+0x15c>)
 800ac3e:	4013      	ands	r3, r2
 800ac40:	0019      	movs	r1, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac52:	2380      	movs	r3, #128	; 0x80
 800ac54:	035b      	lsls	r3, r3, #13
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d10b      	bne.n	800ac72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4a15      	ldr	r2, [pc, #84]	; (800acb8 <UART_AdvFeatureConfig+0x160>)
 800ac62:	4013      	ands	r3, r2
 800ac64:	0019      	movs	r1, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	2280      	movs	r2, #128	; 0x80
 800ac78:	4013      	ands	r3, r2
 800ac7a:	d00b      	beq.n	800ac94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	4a0e      	ldr	r2, [pc, #56]	; (800acbc <UART_AdvFeatureConfig+0x164>)
 800ac84:	4013      	ands	r3, r2
 800ac86:	0019      	movs	r1, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	605a      	str	r2, [r3, #4]
  }
}
 800ac94:	46c0      	nop			; (mov r8, r8)
 800ac96:	46bd      	mov	sp, r7
 800ac98:	b002      	add	sp, #8
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	fffdffff 	.word	0xfffdffff
 800aca0:	fffeffff 	.word	0xfffeffff
 800aca4:	fffbffff 	.word	0xfffbffff
 800aca8:	ffff7fff 	.word	0xffff7fff
 800acac:	ffffefff 	.word	0xffffefff
 800acb0:	ffffdfff 	.word	0xffffdfff
 800acb4:	ffefffff 	.word	0xffefffff
 800acb8:	ff9fffff 	.word	0xff9fffff
 800acbc:	fff7ffff 	.word	0xfff7ffff

0800acc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2280      	movs	r2, #128	; 0x80
 800accc:	2100      	movs	r1, #0
 800acce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acd0:	f7fb f8c4 	bl	8005e5c <HAL_GetTick>
 800acd4:	0003      	movs	r3, r0
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2208      	movs	r2, #8
 800ace0:	4013      	ands	r3, r2
 800ace2:	2b08      	cmp	r3, #8
 800ace4:	d10d      	bne.n	800ad02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	2380      	movs	r3, #128	; 0x80
 800acea:	0399      	lsls	r1, r3, #14
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	4b18      	ldr	r3, [pc, #96]	; (800ad50 <UART_CheckIdleState+0x90>)
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	0013      	movs	r3, r2
 800acf4:	2200      	movs	r2, #0
 800acf6:	f000 f82d 	bl	800ad54 <UART_WaitOnFlagUntilTimeout>
 800acfa:	1e03      	subs	r3, r0, #0
 800acfc:	d001      	beq.n	800ad02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e022      	b.n	800ad48 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2204      	movs	r2, #4
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	2b04      	cmp	r3, #4
 800ad0e:	d10d      	bne.n	800ad2c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	2380      	movs	r3, #128	; 0x80
 800ad14:	03d9      	lsls	r1, r3, #15
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	4b0d      	ldr	r3, [pc, #52]	; (800ad50 <UART_CheckIdleState+0x90>)
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	0013      	movs	r3, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f000 f818 	bl	800ad54 <UART_WaitOnFlagUntilTimeout>
 800ad24:	1e03      	subs	r3, r0, #0
 800ad26:	d001      	beq.n	800ad2c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e00d      	b.n	800ad48 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2220      	movs	r2, #32
 800ad30:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2220      	movs	r2, #32
 800ad36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2274      	movs	r2, #116	; 0x74
 800ad42:	2100      	movs	r1, #0
 800ad44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	0018      	movs	r0, r3
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	b004      	add	sp, #16
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	01ffffff 	.word	0x01ffffff

0800ad54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b094      	sub	sp, #80	; 0x50
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	603b      	str	r3, [r7, #0]
 800ad60:	1dfb      	adds	r3, r7, #7
 800ad62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad64:	e09b      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad68:	3301      	adds	r3, #1
 800ad6a:	d100      	bne.n	800ad6e <UART_WaitOnFlagUntilTimeout+0x1a>
 800ad6c:	e097      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad6e:	f7fb f875 	bl	8005e5c <HAL_GetTick>
 800ad72:	0002      	movs	r2, r0
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d302      	bcc.n	800ad84 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d139      	bne.n	800adf8 <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad84:	f3ef 8310 	mrs	r3, PRIMASK
 800ad88:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad8c:	647b      	str	r3, [r7, #68]	; 0x44
 800ad8e:	2301      	movs	r3, #1
 800ad90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	f383 8810 	msr	PRIMASK, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4949      	ldr	r1, [pc, #292]	; (800aec8 <UART_WaitOnFlagUntilTimeout+0x174>)
 800ada4:	400a      	ands	r2, r1
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adaa:	633b      	str	r3, [r7, #48]	; 0x30
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adb2:	f3ef 8310 	mrs	r3, PRIMASK
 800adb6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800adb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adba:	643b      	str	r3, [r7, #64]	; 0x40
 800adbc:	2301      	movs	r3, #1
 800adbe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	f383 8810 	msr	PRIMASK, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689a      	ldr	r2, [r3, #8]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2101      	movs	r1, #1
 800add2:	438a      	bics	r2, r1
 800add4:	609a      	str	r2, [r3, #8]
 800add6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800add8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800addc:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2220      	movs	r2, #32
 800ade4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2220      	movs	r2, #32
 800adea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2274      	movs	r2, #116	; 0x74
 800adf0:	2100      	movs	r1, #0
 800adf2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e063      	b.n	800aec0 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2204      	movs	r2, #4
 800ae00:	4013      	ands	r3, r2
 800ae02:	d04c      	beq.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	69da      	ldr	r2, [r3, #28]
 800ae0a:	2380      	movs	r3, #128	; 0x80
 800ae0c:	011b      	lsls	r3, r3, #4
 800ae0e:	401a      	ands	r2, r3
 800ae10:	2380      	movs	r3, #128	; 0x80
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d142      	bne.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2280      	movs	r2, #128	; 0x80
 800ae1e:	0112      	lsls	r2, r2, #4
 800ae20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae22:	f3ef 8310 	mrs	r3, PRIMASK
 800ae26:	613b      	str	r3, [r7, #16]
  return(result);
 800ae28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	f383 8810 	msr	PRIMASK, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4921      	ldr	r1, [pc, #132]	; (800aec8 <UART_WaitOnFlagUntilTimeout+0x174>)
 800ae42:	400a      	ands	r2, r1
 800ae44:	601a      	str	r2, [r3, #0]
 800ae46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae48:	61bb      	str	r3, [r7, #24]
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae50:	f3ef 8310 	mrs	r3, PRIMASK
 800ae54:	61fb      	str	r3, [r7, #28]
  return(result);
 800ae56:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	f383 8810 	msr	PRIMASK, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	689a      	ldr	r2, [r3, #8]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2101      	movs	r1, #1
 800ae70:	438a      	bics	r2, r1
 800ae72:	609a      	str	r2, [r3, #8]
 800ae74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae76:	627b      	str	r3, [r7, #36]	; 0x24
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2220      	movs	r2, #32
 800ae82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2220      	movs	r2, #32
 800ae88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2280      	movs	r2, #128	; 0x80
 800ae8e:	2120      	movs	r1, #32
 800ae90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2274      	movs	r2, #116	; 0x74
 800ae96:	2100      	movs	r1, #0
 800ae98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e010      	b.n	800aec0 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	69db      	ldr	r3, [r3, #28]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	4013      	ands	r3, r2
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	425a      	negs	r2, r3
 800aeae:	4153      	adcs	r3, r2
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	001a      	movs	r2, r3
 800aeb4:	1dfb      	adds	r3, r7, #7
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d100      	bne.n	800aebe <UART_WaitOnFlagUntilTimeout+0x16a>
 800aebc:	e753      	b.n	800ad66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	0018      	movs	r0, r3
 800aec2:	46bd      	mov	sp, r7
 800aec4:	b014      	add	sp, #80	; 0x50
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	fffffe5f 	.word	0xfffffe5f

0800aecc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08c      	sub	sp, #48	; 0x30
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	1dbb      	adds	r3, r7, #6
 800aed8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	1dba      	adds	r2, r7, #6
 800aee4:	2158      	movs	r1, #88	; 0x58
 800aee6:	8812      	ldrh	r2, [r2, #0]
 800aee8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	1dba      	adds	r2, r7, #6
 800aeee:	215a      	movs	r1, #90	; 0x5a
 800aef0:	8812      	ldrh	r2, [r2, #0]
 800aef2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	689a      	ldr	r2, [r3, #8]
 800aefe:	2380      	movs	r3, #128	; 0x80
 800af00:	015b      	lsls	r3, r3, #5
 800af02:	429a      	cmp	r2, r3
 800af04:	d10d      	bne.n	800af22 <UART_Start_Receive_IT+0x56>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d104      	bne.n	800af18 <UART_Start_Receive_IT+0x4c>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	225c      	movs	r2, #92	; 0x5c
 800af12:	4941      	ldr	r1, [pc, #260]	; (800b018 <UART_Start_Receive_IT+0x14c>)
 800af14:	5299      	strh	r1, [r3, r2]
 800af16:	e02e      	b.n	800af76 <UART_Start_Receive_IT+0xaa>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	225c      	movs	r2, #92	; 0x5c
 800af1c:	21ff      	movs	r1, #255	; 0xff
 800af1e:	5299      	strh	r1, [r3, r2]
 800af20:	e029      	b.n	800af76 <UART_Start_Receive_IT+0xaa>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10d      	bne.n	800af46 <UART_Start_Receive_IT+0x7a>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d104      	bne.n	800af3c <UART_Start_Receive_IT+0x70>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	225c      	movs	r2, #92	; 0x5c
 800af36:	21ff      	movs	r1, #255	; 0xff
 800af38:	5299      	strh	r1, [r3, r2]
 800af3a:	e01c      	b.n	800af76 <UART_Start_Receive_IT+0xaa>
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	225c      	movs	r2, #92	; 0x5c
 800af40:	217f      	movs	r1, #127	; 0x7f
 800af42:	5299      	strh	r1, [r3, r2]
 800af44:	e017      	b.n	800af76 <UART_Start_Receive_IT+0xaa>
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	689a      	ldr	r2, [r3, #8]
 800af4a:	2380      	movs	r3, #128	; 0x80
 800af4c:	055b      	lsls	r3, r3, #21
 800af4e:	429a      	cmp	r2, r3
 800af50:	d10d      	bne.n	800af6e <UART_Start_Receive_IT+0xa2>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d104      	bne.n	800af64 <UART_Start_Receive_IT+0x98>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	225c      	movs	r2, #92	; 0x5c
 800af5e:	217f      	movs	r1, #127	; 0x7f
 800af60:	5299      	strh	r1, [r3, r2]
 800af62:	e008      	b.n	800af76 <UART_Start_Receive_IT+0xaa>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	225c      	movs	r2, #92	; 0x5c
 800af68:	213f      	movs	r1, #63	; 0x3f
 800af6a:	5299      	strh	r1, [r3, r2]
 800af6c:	e003      	b.n	800af76 <UART_Start_Receive_IT+0xaa>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	225c      	movs	r2, #92	; 0x5c
 800af72:	2100      	movs	r1, #0
 800af74:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2280      	movs	r2, #128	; 0x80
 800af7a:	2100      	movs	r1, #0
 800af7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2222      	movs	r2, #34	; 0x22
 800af82:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af84:	f3ef 8310 	mrs	r3, PRIMASK
 800af88:	61fb      	str	r3, [r7, #28]
  return(result);
 800af8a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af8e:	2301      	movs	r3, #1
 800af90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	f383 8810 	msr	PRIMASK, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	689a      	ldr	r2, [r3, #8]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2101      	movs	r1, #1
 800afa4:	430a      	orrs	r2, r1
 800afa6:	609a      	str	r2, [r3, #8]
 800afa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afaa:	627b      	str	r3, [r7, #36]	; 0x24
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	f383 8810 	msr	PRIMASK, r3

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	689a      	ldr	r2, [r3, #8]
 800afb6:	2380      	movs	r3, #128	; 0x80
 800afb8:	015b      	lsls	r3, r3, #5
 800afba:	429a      	cmp	r2, r3
 800afbc:	d107      	bne.n	800afce <UART_Start_Receive_IT+0x102>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d103      	bne.n	800afce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	4a14      	ldr	r2, [pc, #80]	; (800b01c <UART_Start_Receive_IT+0x150>)
 800afca:	665a      	str	r2, [r3, #100]	; 0x64
 800afcc:	e002      	b.n	800afd4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	4a13      	ldr	r2, [pc, #76]	; (800b020 <UART_Start_Receive_IT+0x154>)
 800afd2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2274      	movs	r2, #116	; 0x74
 800afd8:	2100      	movs	r1, #0
 800afda:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afdc:	f3ef 8310 	mrs	r3, PRIMASK
 800afe0:	613b      	str	r3, [r7, #16]
  return(result);
 800afe2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800afe4:	62bb      	str	r3, [r7, #40]	; 0x28
 800afe6:	2301      	movs	r3, #1
 800afe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f383 8810 	msr	PRIMASK, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2190      	movs	r1, #144	; 0x90
 800affc:	0049      	lsls	r1, r1, #1
 800affe:	430a      	orrs	r2, r1
 800b000:	601a      	str	r2, [r3, #0]
 800b002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b004:	61bb      	str	r3, [r7, #24]
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	f383 8810 	msr	PRIMASK, r3
  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	0018      	movs	r0, r3
 800b010:	46bd      	mov	sp, r7
 800b012:	b00c      	add	sp, #48	; 0x30
 800b014:	bd80      	pop	{r7, pc}
 800b016:	46c0      	nop			; (mov r8, r8)
 800b018:	000001ff 	.word	0x000001ff
 800b01c:	0800b419 	.word	0x0800b419
 800b020:	0800b2bd 	.word	0x0800b2bd

0800b024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08e      	sub	sp, #56	; 0x38
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b02c:	f3ef 8310 	mrs	r3, PRIMASK
 800b030:	617b      	str	r3, [r7, #20]
  return(result);
 800b032:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b034:	637b      	str	r3, [r7, #52]	; 0x34
 800b036:	2301      	movs	r3, #1
 800b038:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	f383 8810 	msr	PRIMASK, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4923      	ldr	r1, [pc, #140]	; (800b0d8 <UART_EndRxTransfer+0xb4>)
 800b04c:	400a      	ands	r2, r1
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b052:	61fb      	str	r3, [r7, #28]
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b05a:	f3ef 8310 	mrs	r3, PRIMASK
 800b05e:	623b      	str	r3, [r7, #32]
  return(result);
 800b060:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b062:	633b      	str	r3, [r7, #48]	; 0x30
 800b064:	2301      	movs	r3, #1
 800b066:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	f383 8810 	msr	PRIMASK, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2101      	movs	r1, #1
 800b07a:	438a      	bics	r2, r1
 800b07c:	609a      	str	r2, [r3, #8]
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	62bb      	str	r3, [r7, #40]	; 0x28
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d116      	bne.n	800b0be <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b090:	f3ef 8310 	mrs	r3, PRIMASK
 800b094:	60bb      	str	r3, [r7, #8]
  return(result);
 800b096:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b09a:	2301      	movs	r3, #1
 800b09c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f383 8810 	msr	PRIMASK, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2110      	movs	r1, #16
 800b0b0:	438a      	bics	r2, r1
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b6:	613b      	str	r3, [r7, #16]
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b0d0:	46c0      	nop			; (mov r8, r8)
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	b00e      	add	sp, #56	; 0x38
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	fffffedf 	.word	0xfffffedf

0800b0dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	225a      	movs	r2, #90	; 0x5a
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2252      	movs	r2, #82	; 0x52
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	f7ff fbc1 	bl	800a884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b102:	46c0      	nop			; (mov r8, r8)
 800b104:	46bd      	mov	sp, r7
 800b106:	b004      	add	sp, #16
 800b108:	bd80      	pop	{r7, pc}

0800b10a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b08a      	sub	sp, #40	; 0x28
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b116:	2b21      	cmp	r3, #33	; 0x21
 800b118:	d149      	bne.n	800b1ae <UART_TxISR_8BIT+0xa4>
  {
    if (huart->TxXferCount == 0U)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2252      	movs	r2, #82	; 0x52
 800b11e:	5a9b      	ldrh	r3, [r3, r2]
 800b120:	b29b      	uxth	r3, r3
 800b122:	2b00      	cmp	r3, #0
 800b124:	d12e      	bne.n	800b184 <UART_TxISR_8BIT+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b126:	f3ef 8310 	mrs	r3, PRIMASK
 800b12a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b12c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
 800b130:	2301      	movs	r3, #1
 800b132:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f383 8810 	msr	PRIMASK, r3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2180      	movs	r1, #128	; 0x80
 800b146:	438a      	bics	r2, r1
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b154:	f3ef 8310 	mrs	r3, PRIMASK
 800b158:	617b      	str	r3, [r7, #20]
  return(result);
 800b15a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b15c:	623b      	str	r3, [r7, #32]
 800b15e:	2301      	movs	r3, #1
 800b160:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	f383 8810 	msr	PRIMASK, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2140      	movs	r1, #64	; 0x40
 800b174:	430a      	orrs	r2, r1
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	61fb      	str	r3, [r7, #28]
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	f383 8810 	msr	PRIMASK, r3
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b182:	e014      	b.n	800b1ae <UART_TxISR_8BIT+0xa4>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b188:	781a      	ldrb	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	b292      	uxth	r2, r2
 800b190:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2252      	movs	r2, #82	; 0x52
 800b1a0:	5a9b      	ldrh	r3, [r3, r2]
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	b299      	uxth	r1, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2252      	movs	r2, #82	; 0x52
 800b1ac:	5299      	strh	r1, [r3, r2]
}
 800b1ae:	46c0      	nop			; (mov r8, r8)
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	b00a      	add	sp, #40	; 0x28
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b08c      	sub	sp, #48	; 0x30
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1c2:	2b21      	cmp	r3, #33	; 0x21
 800b1c4:	d14d      	bne.n	800b262 <UART_TxISR_16BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2252      	movs	r2, #82	; 0x52
 800b1ca:	5a9b      	ldrh	r3, [r3, r2]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d12e      	bne.n	800b230 <UART_TxISR_16BIT+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b1d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b1da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1dc:	2301      	movs	r3, #1
 800b1de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f383 8810 	msr	PRIMASK, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2180      	movs	r1, #128	; 0x80
 800b1f2:	438a      	bics	r2, r1
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	617b      	str	r3, [r7, #20]
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b200:	f3ef 8310 	mrs	r3, PRIMASK
 800b204:	61bb      	str	r3, [r7, #24]
  return(result);
 800b206:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b208:	627b      	str	r3, [r7, #36]	; 0x24
 800b20a:	2301      	movs	r3, #1
 800b20c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	f383 8810 	msr	PRIMASK, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2140      	movs	r1, #64	; 0x40
 800b220:	430a      	orrs	r2, r1
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	623b      	str	r3, [r7, #32]
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	f383 8810 	msr	PRIMASK, r3
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b22e:	e018      	b.n	800b262 <UART_TxISR_16BIT+0xac>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b234:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b238:	881a      	ldrh	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	05d2      	lsls	r2, r2, #23
 800b240:	0dd2      	lsrs	r2, r2, #23
 800b242:	b292      	uxth	r2, r2
 800b244:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b24a:	1c9a      	adds	r2, r3, #2
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2252      	movs	r2, #82	; 0x52
 800b254:	5a9b      	ldrh	r3, [r3, r2]
 800b256:	b29b      	uxth	r3, r3
 800b258:	3b01      	subs	r3, #1
 800b25a:	b299      	uxth	r1, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2252      	movs	r2, #82	; 0x52
 800b260:	5299      	strh	r1, [r3, r2]
}
 800b262:	46c0      	nop			; (mov r8, r8)
 800b264:	46bd      	mov	sp, r7
 800b266:	b00c      	add	sp, #48	; 0x30
 800b268:	bd80      	pop	{r7, pc}

0800b26a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b086      	sub	sp, #24
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b272:	f3ef 8310 	mrs	r3, PRIMASK
 800b276:	60bb      	str	r3, [r7, #8]
  return(result);
 800b278:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b27a:	617b      	str	r3, [r7, #20]
 800b27c:	2301      	movs	r3, #1
 800b27e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f383 8810 	msr	PRIMASK, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2140      	movs	r1, #64	; 0x40
 800b292:	438a      	bics	r2, r1
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	613b      	str	r3, [r7, #16]
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2220      	movs	r2, #32
 800b2a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	0018      	movs	r0, r3
 800b2b0:	f7f9 f80c 	bl	80042cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2b4:	46c0      	nop			; (mov r8, r8)
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	b006      	add	sp, #24
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b090      	sub	sp, #64	; 0x40
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b2c4:	233e      	movs	r3, #62	; 0x3e
 800b2c6:	18fb      	adds	r3, r7, r3
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	215c      	movs	r1, #92	; 0x5c
 800b2cc:	5a52      	ldrh	r2, [r2, r1]
 800b2ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2d4:	2b22      	cmp	r3, #34	; 0x22
 800b2d6:	d000      	beq.n	800b2da <UART_RxISR_8BIT+0x1e>
 800b2d8:	e090      	b.n	800b3fc <UART_RxISR_8BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	213c      	movs	r1, #60	; 0x3c
 800b2e0:	187b      	adds	r3, r7, r1
 800b2e2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800b2e4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b2e6:	187b      	adds	r3, r7, r1
 800b2e8:	881b      	ldrh	r3, [r3, #0]
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	233e      	movs	r3, #62	; 0x3e
 800b2ee:	18fb      	adds	r3, r7, r3
 800b2f0:	881b      	ldrh	r3, [r3, #0]
 800b2f2:	b2d9      	uxtb	r1, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f8:	400a      	ands	r2, r1
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	225a      	movs	r2, #90	; 0x5a
 800b30c:	5a9b      	ldrh	r3, [r3, r2]
 800b30e:	b29b      	uxth	r3, r3
 800b310:	3b01      	subs	r3, #1
 800b312:	b299      	uxth	r1, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	225a      	movs	r2, #90	; 0x5a
 800b318:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	225a      	movs	r2, #90	; 0x5a
 800b31e:	5a9b      	ldrh	r3, [r3, r2]
 800b320:	b29b      	uxth	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d172      	bne.n	800b40c <UART_RxISR_8BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b326:	f3ef 8310 	mrs	r3, PRIMASK
 800b32a:	61bb      	str	r3, [r7, #24]
  return(result);
 800b32c:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b32e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b330:	2301      	movs	r3, #1
 800b332:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	f383 8810 	msr	PRIMASK, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4933      	ldr	r1, [pc, #204]	; (800b414 <UART_RxISR_8BIT+0x158>)
 800b346:	400a      	ands	r2, r1
 800b348:	601a      	str	r2, [r3, #0]
 800b34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34c:	623b      	str	r3, [r7, #32]
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b354:	f3ef 8310 	mrs	r3, PRIMASK
 800b358:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b35c:	637b      	str	r3, [r7, #52]	; 0x34
 800b35e:	2301      	movs	r3, #1
 800b360:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	f383 8810 	msr	PRIMASK, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	689a      	ldr	r2, [r3, #8]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2101      	movs	r1, #1
 800b374:	438a      	bics	r2, r1
 800b376:	609a      	str	r2, [r3, #8]
 800b378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b37a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37e:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2220      	movs	r2, #32
 800b386:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b392:	2b01      	cmp	r3, #1
 800b394:	d12d      	bne.n	800b3f2 <UART_RxISR_8BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b39c:	f3ef 8310 	mrs	r3, PRIMASK
 800b3a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3a2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3a4:	633b      	str	r3, [r7, #48]	; 0x30
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	f383 8810 	msr	PRIMASK, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2110      	movs	r1, #16
 800b3bc:	438a      	bics	r2, r1
 800b3be:	601a      	str	r2, [r3, #0]
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	2210      	movs	r2, #16
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	2b10      	cmp	r3, #16
 800b3d6:	d103      	bne.n	800b3e0 <UART_RxISR_8BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2210      	movs	r2, #16
 800b3de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2258      	movs	r2, #88	; 0x58
 800b3e4:	5a9a      	ldrh	r2, [r3, r2]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	0011      	movs	r1, r2
 800b3ea:	0018      	movs	r0, r3
 800b3ec:	f7ff fa52 	bl	800a894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b3f0:	e00c      	b.n	800b40c <UART_RxISR_8BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	f7f8 ff79 	bl	80042ec <HAL_UART_RxCpltCallback>
}
 800b3fa:	e007      	b.n	800b40c <UART_RxISR_8BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	699a      	ldr	r2, [r3, #24]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2108      	movs	r1, #8
 800b408:	430a      	orrs	r2, r1
 800b40a:	619a      	str	r2, [r3, #24]
}
 800b40c:	46c0      	nop			; (mov r8, r8)
 800b40e:	46bd      	mov	sp, r7
 800b410:	b010      	add	sp, #64	; 0x40
 800b412:	bd80      	pop	{r7, pc}
 800b414:	fffffedf 	.word	0xfffffedf

0800b418 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b090      	sub	sp, #64	; 0x40
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b420:	233e      	movs	r3, #62	; 0x3e
 800b422:	18fb      	adds	r3, r7, r3
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	215c      	movs	r1, #92	; 0x5c
 800b428:	5a52      	ldrh	r2, [r2, r1]
 800b42a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b430:	2b22      	cmp	r3, #34	; 0x22
 800b432:	d000      	beq.n	800b436 <UART_RxISR_16BIT+0x1e>
 800b434:	e090      	b.n	800b558 <UART_RxISR_16BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	213c      	movs	r1, #60	; 0x3c
 800b43c:	187b      	adds	r3, r7, r1
 800b43e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800b440:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b446:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800b448:	187b      	adds	r3, r7, r1
 800b44a:	223e      	movs	r2, #62	; 0x3e
 800b44c:	18ba      	adds	r2, r7, r2
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	8812      	ldrh	r2, [r2, #0]
 800b452:	4013      	ands	r3, r2
 800b454:	b29a      	uxth	r2, r3
 800b456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b458:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b45e:	1c9a      	adds	r2, r3, #2
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	225a      	movs	r2, #90	; 0x5a
 800b468:	5a9b      	ldrh	r3, [r3, r2]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3b01      	subs	r3, #1
 800b46e:	b299      	uxth	r1, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	225a      	movs	r2, #90	; 0x5a
 800b474:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	225a      	movs	r2, #90	; 0x5a
 800b47a:	5a9b      	ldrh	r3, [r3, r2]
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d172      	bne.n	800b568 <UART_RxISR_16BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b482:	f3ef 8310 	mrs	r3, PRIMASK
 800b486:	617b      	str	r3, [r7, #20]
  return(result);
 800b488:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b48a:	637b      	str	r3, [r7, #52]	; 0x34
 800b48c:	2301      	movs	r3, #1
 800b48e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	f383 8810 	msr	PRIMASK, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4933      	ldr	r1, [pc, #204]	; (800b570 <UART_RxISR_16BIT+0x158>)
 800b4a2:	400a      	ands	r2, r1
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a8:	61fb      	str	r3, [r7, #28]
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4b0:	f3ef 8310 	mrs	r3, PRIMASK
 800b4b4:	623b      	str	r3, [r7, #32]
  return(result);
 800b4b6:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4b8:	633b      	str	r3, [r7, #48]	; 0x30
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	f383 8810 	msr	PRIMASK, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2101      	movs	r1, #1
 800b4d0:	438a      	bics	r2, r1
 800b4d2:	609a      	str	r2, [r3, #8]
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4da:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d12d      	bne.n	800b54e <UART_RxISR_16BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b4fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4fe:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b500:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b502:	2301      	movs	r3, #1
 800b504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f383 8810 	msr	PRIMASK, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2110      	movs	r1, #16
 800b518:	438a      	bics	r2, r1
 800b51a:	601a      	str	r2, [r3, #0]
 800b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51e:	613b      	str	r3, [r7, #16]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69db      	ldr	r3, [r3, #28]
 800b52c:	2210      	movs	r2, #16
 800b52e:	4013      	ands	r3, r2
 800b530:	2b10      	cmp	r3, #16
 800b532:	d103      	bne.n	800b53c <UART_RxISR_16BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2210      	movs	r2, #16
 800b53a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2258      	movs	r2, #88	; 0x58
 800b540:	5a9a      	ldrh	r2, [r3, r2]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	0011      	movs	r1, r2
 800b546:	0018      	movs	r0, r3
 800b548:	f7ff f9a4 	bl	800a894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b54c:	e00c      	b.n	800b568 <UART_RxISR_16BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	0018      	movs	r0, r3
 800b552:	f7f8 fecb 	bl	80042ec <HAL_UART_RxCpltCallback>
}
 800b556:	e007      	b.n	800b568 <UART_RxISR_16BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	699a      	ldr	r2, [r3, #24]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2108      	movs	r1, #8
 800b564:	430a      	orrs	r2, r1
 800b566:	619a      	str	r2, [r3, #24]
}
 800b568:	46c0      	nop			; (mov r8, r8)
 800b56a:	46bd      	mov	sp, r7
 800b56c:	b010      	add	sp, #64	; 0x40
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	fffffedf 	.word	0xfffffedf

0800b574 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b57a:	f3ef 8305 	mrs	r3, IPSR
 800b57e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b580:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b582:	2b00      	cmp	r3, #0
 800b584:	d109      	bne.n	800b59a <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b586:	f3ef 8310 	mrs	r3, PRIMASK
 800b58a:	607b      	str	r3, [r7, #4]
  return(result);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d007      	beq.n	800b5a2 <osKernelInitialize+0x2e>
 800b592:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <osKernelInitialize+0x54>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d103      	bne.n	800b5a2 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800b59a:	2306      	movs	r3, #6
 800b59c:	425b      	negs	r3, r3
 800b59e:	60fb      	str	r3, [r7, #12]
 800b5a0:	e00c      	b.n	800b5bc <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b5a2:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <osKernelInitialize+0x54>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d105      	bne.n	800b5b6 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800b5aa:	4b07      	ldr	r3, [pc, #28]	; (800b5c8 <osKernelInitialize+0x54>)
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]
 800b5b4:	e002      	b.n	800b5bc <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	425b      	negs	r3, r3
 800b5ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
}
 800b5be:	0018      	movs	r0, r3
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	b004      	add	sp, #16
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	46c0      	nop			; (mov r8, r8)
 800b5c8:	200004c0 	.word	0x200004c0

0800b5cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5d2:	f3ef 8305 	mrs	r3, IPSR
 800b5d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d109      	bne.n	800b5f2 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5de:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e2:	607b      	str	r3, [r7, #4]
  return(result);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d007      	beq.n	800b5fa <osKernelStart+0x2e>
 800b5ea:	4b0e      	ldr	r3, [pc, #56]	; (800b624 <osKernelStart+0x58>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d103      	bne.n	800b5fa <osKernelStart+0x2e>
    stat = osErrorISR;
 800b5f2:	2306      	movs	r3, #6
 800b5f4:	425b      	negs	r3, r3
 800b5f6:	60fb      	str	r3, [r7, #12]
 800b5f8:	e00e      	b.n	800b618 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b5fa:	4b0a      	ldr	r3, [pc, #40]	; (800b624 <osKernelStart+0x58>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d107      	bne.n	800b612 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800b602:	4b08      	ldr	r3, [pc, #32]	; (800b624 <osKernelStart+0x58>)
 800b604:	2202      	movs	r2, #2
 800b606:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b608:	f001 fdfa 	bl	800d200 <vTaskStartScheduler>
      stat = osOK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	e002      	b.n	800b618 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800b612:	2301      	movs	r3, #1
 800b614:	425b      	negs	r3, r3
 800b616:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b618:	68fb      	ldr	r3, [r7, #12]
}
 800b61a:	0018      	movs	r0, r3
 800b61c:	46bd      	mov	sp, r7
 800b61e:	b004      	add	sp, #16
 800b620:	bd80      	pop	{r7, pc}
 800b622:	46c0      	nop			; (mov r8, r8)
 800b624:	200004c0 	.word	0x200004c0

0800b628 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b628:	b5b0      	push	{r4, r5, r7, lr}
 800b62a:	b090      	sub	sp, #64	; 0x40
 800b62c:	af04      	add	r7, sp, #16
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b634:	2300      	movs	r3, #0
 800b636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b638:	f3ef 8305 	mrs	r3, IPSR
 800b63c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b63e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b640:	2b00      	cmp	r3, #0
 800b642:	d000      	beq.n	800b646 <osThreadNew+0x1e>
 800b644:	e090      	b.n	800b768 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b646:	f3ef 8310 	mrs	r3, PRIMASK
 800b64a:	61bb      	str	r3, [r7, #24]
  return(result);
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d004      	beq.n	800b65c <osThreadNew+0x34>
 800b652:	4b48      	ldr	r3, [pc, #288]	; (800b774 <osThreadNew+0x14c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b02      	cmp	r3, #2
 800b658:	d100      	bne.n	800b65c <osThreadNew+0x34>
 800b65a:	e085      	b.n	800b768 <osThreadNew+0x140>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d100      	bne.n	800b664 <osThreadNew+0x3c>
 800b662:	e081      	b.n	800b768 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800b664:	2380      	movs	r3, #128	; 0x80
 800b666:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b668:	2318      	movs	r3, #24
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 800b66c:	2117      	movs	r1, #23
 800b66e:	187b      	adds	r3, r7, r1
 800b670:	2200      	movs	r2, #0
 800b672:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800b674:	187b      	adds	r3, r7, r1
 800b676:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 800b678:	2301      	movs	r3, #1
 800b67a:	425b      	negs	r3, r3
 800b67c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d044      	beq.n	800b70e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <osThreadNew+0x6a>
        name = attr->name;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d002      	beq.n	800b6a0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d007      	beq.n	800b6b6 <osThreadNew+0x8e>
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	2b38      	cmp	r3, #56	; 0x38
 800b6aa:	d804      	bhi.n	800b6b6 <osThreadNew+0x8e>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	d001      	beq.n	800b6ba <osThreadNew+0x92>
        return (NULL);
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e057      	b.n	800b76a <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	695b      	ldr	r3, [r3, #20]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d003      	beq.n	800b6ca <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	089b      	lsrs	r3, r3, #2
 800b6c8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00e      	beq.n	800b6f0 <osThreadNew+0xc8>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	2bbb      	cmp	r3, #187	; 0xbb
 800b6d8:	d90a      	bls.n	800b6f0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d006      	beq.n	800b6f0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <osThreadNew+0xc8>
        mem = 1;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	623b      	str	r3, [r7, #32]
 800b6ee:	e010      	b.n	800b712 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10c      	bne.n	800b712 <osThreadNew+0xea>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d108      	bne.n	800b712 <osThreadNew+0xea>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d104      	bne.n	800b712 <osThreadNew+0xea>
          mem = 0;
 800b708:	2300      	movs	r3, #0
 800b70a:	623b      	str	r3, [r7, #32]
 800b70c:	e001      	b.n	800b712 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800b70e:	2300      	movs	r3, #0
 800b710:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d112      	bne.n	800b73e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b720:	68bd      	ldr	r5, [r7, #8]
 800b722:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800b724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	9302      	str	r3, [sp, #8]
 800b72a:	9201      	str	r2, [sp, #4]
 800b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	002b      	movs	r3, r5
 800b732:	0022      	movs	r2, r4
 800b734:	f001 facb 	bl	800ccce <xTaskCreateStatic>
 800b738:	0003      	movs	r3, r0
 800b73a:	613b      	str	r3, [r7, #16]
 800b73c:	e014      	b.n	800b768 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800b73e:	6a3b      	ldr	r3, [r7, #32]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d111      	bne.n	800b768 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b746:	b29a      	uxth	r2, r3
 800b748:	68bc      	ldr	r4, [r7, #8]
 800b74a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	2310      	movs	r3, #16
 800b750:	18fb      	adds	r3, r7, r3
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	0023      	movs	r3, r4
 800b75a:	f001 fafb 	bl	800cd54 <xTaskCreate>
 800b75e:	0003      	movs	r3, r0
 800b760:	2b01      	cmp	r3, #1
 800b762:	d001      	beq.n	800b768 <osThreadNew+0x140>
          hTask = NULL;
 800b764:	2300      	movs	r3, #0
 800b766:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b768:	693b      	ldr	r3, [r7, #16]
}
 800b76a:	0018      	movs	r0, r3
 800b76c:	46bd      	mov	sp, r7
 800b76e:	b00c      	add	sp, #48	; 0x30
 800b770:	bdb0      	pop	{r4, r5, r7, pc}
 800b772:	46c0      	nop			; (mov r8, r8)
 800b774:	200004c0 	.word	0x200004c0

0800b778 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b784:	f3ef 8305 	mrs	r3, IPSR
 800b788:	60fb      	str	r3, [r7, #12]
  return(result);
 800b78a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d109      	bne.n	800b7a4 <osThreadSuspend+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b790:	f3ef 8310 	mrs	r3, PRIMASK
 800b794:	60bb      	str	r3, [r7, #8]
  return(result);
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d007      	beq.n	800b7ac <osThreadSuspend+0x34>
 800b79c:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <osThreadSuspend+0x58>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d103      	bne.n	800b7ac <osThreadSuspend+0x34>
    stat = osErrorISR;
 800b7a4:	2306      	movs	r3, #6
 800b7a6:	425b      	negs	r3, r3
 800b7a8:	617b      	str	r3, [r7, #20]
 800b7aa:	e00c      	b.n	800b7c6 <osThreadSuspend+0x4e>
  }
  else if (hTask == NULL) {
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d103      	bne.n	800b7ba <osThreadSuspend+0x42>
    stat = osErrorParameter;
 800b7b2:	2304      	movs	r3, #4
 800b7b4:	425b      	negs	r3, r3
 800b7b6:	617b      	str	r3, [r7, #20]
 800b7b8:	e005      	b.n	800b7c6 <osThreadSuspend+0x4e>
  }
  else {
    stat = osOK;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	0018      	movs	r0, r3
 800b7c2:	f001 fc39 	bl	800d038 <vTaskSuspend>
  }

  return (stat);
 800b7c6:	697b      	ldr	r3, [r7, #20]
}
 800b7c8:	0018      	movs	r0, r3
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	b006      	add	sp, #24
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	200004c0 	.word	0x200004c0

0800b7d4 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7e0:	f3ef 8305 	mrs	r3, IPSR
 800b7e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d109      	bne.n	800b800 <osThreadResume+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7ec:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d007      	beq.n	800b808 <osThreadResume+0x34>
 800b7f8:	4b0c      	ldr	r3, [pc, #48]	; (800b82c <osThreadResume+0x58>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d103      	bne.n	800b808 <osThreadResume+0x34>
    stat = osErrorISR;
 800b800:	2306      	movs	r3, #6
 800b802:	425b      	negs	r3, r3
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	e00c      	b.n	800b822 <osThreadResume+0x4e>
  }
  else if (hTask == NULL) {
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d103      	bne.n	800b816 <osThreadResume+0x42>
    stat = osErrorParameter;
 800b80e:	2304      	movs	r3, #4
 800b810:	425b      	negs	r3, r3
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	e005      	b.n	800b822 <osThreadResume+0x4e>
  }
  else {
    stat = osOK;
 800b816:	2300      	movs	r3, #0
 800b818:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	0018      	movs	r0, r3
 800b81e:	f001 fca1 	bl	800d164 <vTaskResume>
  }

  return (stat);
 800b822:	697b      	ldr	r3, [r7, #20]
}
 800b824:	0018      	movs	r0, r3
 800b826:	46bd      	mov	sp, r7
 800b828:	b006      	add	sp, #24
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	200004c0 	.word	0x200004c0

0800b830 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b838:	f3ef 8305 	mrs	r3, IPSR
 800b83c:	613b      	str	r3, [r7, #16]
  return(result);
 800b83e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b840:	2b00      	cmp	r3, #0
 800b842:	d109      	bne.n	800b858 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b844:	f3ef 8310 	mrs	r3, PRIMASK
 800b848:	60fb      	str	r3, [r7, #12]
  return(result);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d007      	beq.n	800b860 <osDelay+0x30>
 800b850:	4b0a      	ldr	r3, [pc, #40]	; (800b87c <osDelay+0x4c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b02      	cmp	r3, #2
 800b856:	d103      	bne.n	800b860 <osDelay+0x30>
    stat = osErrorISR;
 800b858:	2306      	movs	r3, #6
 800b85a:	425b      	negs	r3, r3
 800b85c:	617b      	str	r3, [r7, #20]
 800b85e:	e008      	b.n	800b872 <osDelay+0x42>
  }
  else {
    stat = osOK;
 800b860:	2300      	movs	r3, #0
 800b862:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <osDelay+0x42>
      vTaskDelay(ticks);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	0018      	movs	r0, r3
 800b86e:	f001 fbbd 	bl	800cfec <vTaskDelay>
    }
  }

  return (stat);
 800b872:	697b      	ldr	r3, [r7, #20]
}
 800b874:	0018      	movs	r0, r3
 800b876:	46bd      	mov	sp, r7
 800b878:	b006      	add	sp, #24
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	200004c0 	.word	0x200004c0

0800b880 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b880:	b580      	push	{r7, lr}
 800b882:	b08c      	sub	sp, #48	; 0x30
 800b884:	af02      	add	r7, sp, #8
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b88c:	2300      	movs	r3, #0
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b890:	f3ef 8305 	mrs	r3, IPSR
 800b894:	61bb      	str	r3, [r7, #24]
  return(result);
 800b896:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d000      	beq.n	800b89e <osSemaphoreNew+0x1e>
 800b89c:	e08b      	b.n	800b9b6 <osSemaphoreNew+0x136>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b89e:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a2:	617b      	str	r3, [r7, #20]
  return(result);
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d004      	beq.n	800b8b4 <osSemaphoreNew+0x34>
 800b8aa:	4b45      	ldr	r3, [pc, #276]	; (800b9c0 <osSemaphoreNew+0x140>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d100      	bne.n	800b8b4 <osSemaphoreNew+0x34>
 800b8b2:	e080      	b.n	800b9b6 <osSemaphoreNew+0x136>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d100      	bne.n	800b8bc <osSemaphoreNew+0x3c>
 800b8ba:	e07c      	b.n	800b9b6 <osSemaphoreNew+0x136>
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d900      	bls.n	800b8c6 <osSemaphoreNew+0x46>
 800b8c4:	e077      	b.n	800b9b6 <osSemaphoreNew+0x136>
    mem = -1;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	425b      	negs	r3, r3
 800b8ca:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d015      	beq.n	800b8fe <osSemaphoreNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d006      	beq.n	800b8e8 <osSemaphoreNew+0x68>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	2b4f      	cmp	r3, #79	; 0x4f
 800b8e0:	d902      	bls.n	800b8e8 <osSemaphoreNew+0x68>
        mem = 1;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	623b      	str	r3, [r7, #32]
 800b8e6:	e00c      	b.n	800b902 <osSemaphoreNew+0x82>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d108      	bne.n	800b902 <osSemaphoreNew+0x82>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d104      	bne.n	800b902 <osSemaphoreNew+0x82>
          mem = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	623b      	str	r3, [r7, #32]
 800b8fc:	e001      	b.n	800b902 <osSemaphoreNew+0x82>
        }
      }
    }
    else {
      mem = 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	3301      	adds	r3, #1
 800b906:	d056      	beq.n	800b9b6 <osSemaphoreNew+0x136>
      if (max_count == 1U) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d12c      	bne.n	800b968 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d10c      	bne.n	800b92e <osSemaphoreNew+0xae>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	689a      	ldr	r2, [r3, #8]
 800b918:	2303      	movs	r3, #3
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	0013      	movs	r3, r2
 800b91e:	2200      	movs	r2, #0
 800b920:	2100      	movs	r1, #0
 800b922:	2001      	movs	r0, #1
 800b924:	f000 fb81 	bl	800c02a <xQueueGenericCreateStatic>
 800b928:	0003      	movs	r3, r0
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24
 800b92c:	e006      	b.n	800b93c <osSemaphoreNew+0xbc>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800b92e:	2203      	movs	r2, #3
 800b930:	2100      	movs	r1, #0
 800b932:	2001      	movs	r0, #1
 800b934:	f000 fbc4 	bl	800c0c0 <xQueueGenericCreate>
 800b938:	0003      	movs	r3, r0
 800b93a:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d027      	beq.n	800b992 <osSemaphoreNew+0x112>
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d024      	beq.n	800b992 <osSemaphoreNew+0x112>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b94a:	2300      	movs	r3, #0
 800b94c:	2200      	movs	r2, #0
 800b94e:	2100      	movs	r1, #0
 800b950:	f000 fc5d 	bl	800c20e <xQueueGenericSend>
 800b954:	0003      	movs	r3, r0
 800b956:	2b01      	cmp	r3, #1
 800b958:	d01b      	beq.n	800b992 <osSemaphoreNew+0x112>
            vSemaphoreDelete (hSemaphore);
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	0018      	movs	r0, r3
 800b95e:	f000 ffe2 	bl	800c926 <vQueueDelete>
            hSemaphore = NULL;
 800b962:	2300      	movs	r3, #0
 800b964:	627b      	str	r3, [r7, #36]	; 0x24
 800b966:	e014      	b.n	800b992 <osSemaphoreNew+0x112>
          }
        }
      }
      else {
        if (mem == 1) {
 800b968:	6a3b      	ldr	r3, [r7, #32]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d109      	bne.n	800b982 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	689a      	ldr	r2, [r3, #8]
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	0018      	movs	r0, r3
 800b978:	f000 fbff 	bl	800c17a <xQueueCreateCountingSemaphoreStatic>
 800b97c:	0003      	movs	r3, r0
 800b97e:	627b      	str	r3, [r7, #36]	; 0x24
 800b980:	e007      	b.n	800b992 <osSemaphoreNew+0x112>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b982:	68ba      	ldr	r2, [r7, #8]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	0011      	movs	r1, r2
 800b988:	0018      	movs	r0, r3
 800b98a:	f000 fc1d 	bl	800c1c8 <xQueueCreateCountingSemaphore>
 800b98e:	0003      	movs	r3, r0
 800b990:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00e      	beq.n	800b9b6 <osSemaphoreNew+0x136>
        if (attr != NULL) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <osSemaphoreNew+0x126>
          name = attr->name;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	61fb      	str	r3, [r7, #28]
 800b9a4:	e001      	b.n	800b9aa <osSemaphoreNew+0x12a>
        } else {
          name = NULL;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b9aa:	69fa      	ldr	r2, [r7, #28]
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	0011      	movs	r1, r2
 800b9b0:	0018      	movs	r0, r3
 800b9b2:	f001 f907 	bl	800cbc4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9b8:	0018      	movs	r0, r3
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	b00a      	add	sp, #40	; 0x28
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	200004c0 	.word	0x200004c0

0800b9c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d103      	bne.n	800b9e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b9dc:	2304      	movs	r3, #4
 800b9de:	425b      	negs	r3, r3
 800b9e0:	61fb      	str	r3, [r7, #28]
 800b9e2:	e043      	b.n	800ba6c <osSemaphoreAcquire+0xa8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9e4:	f3ef 8305 	mrs	r3, IPSR
 800b9e8:	617b      	str	r3, [r7, #20]
  return(result);
 800b9ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d109      	bne.n	800ba04 <osSemaphoreAcquire+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9f0:	f3ef 8310 	mrs	r3, PRIMASK
 800b9f4:	613b      	str	r3, [r7, #16]
  return(result);
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d022      	beq.n	800ba42 <osSemaphoreAcquire+0x7e>
 800b9fc:	4b1e      	ldr	r3, [pc, #120]	; (800ba78 <osSemaphoreAcquire+0xb4>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d11e      	bne.n	800ba42 <osSemaphoreAcquire+0x7e>
    if (timeout != 0U) {
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d003      	beq.n	800ba12 <osSemaphoreAcquire+0x4e>
      stat = osErrorParameter;
 800ba0a:	2304      	movs	r3, #4
 800ba0c:	425b      	negs	r3, r3
 800ba0e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ba10:	e02b      	b.n	800ba6a <osSemaphoreAcquire+0xa6>
    }
    else {
      yield = pdFALSE;
 800ba12:	2300      	movs	r3, #0
 800ba14:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ba16:	230c      	movs	r3, #12
 800ba18:	18fa      	adds	r2, r7, r3
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	0018      	movs	r0, r3
 800ba20:	f000 ff1e 	bl	800c860 <xQueueReceiveFromISR>
 800ba24:	0003      	movs	r3, r0
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d003      	beq.n	800ba32 <osSemaphoreAcquire+0x6e>
        stat = osErrorResource;
 800ba2a:	2303      	movs	r3, #3
 800ba2c:	425b      	negs	r3, r3
 800ba2e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ba30:	e01b      	b.n	800ba6a <osSemaphoreAcquire+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d018      	beq.n	800ba6a <osSemaphoreAcquire+0xa6>
 800ba38:	4b10      	ldr	r3, [pc, #64]	; (800ba7c <osSemaphoreAcquire+0xb8>)
 800ba3a:	2280      	movs	r2, #128	; 0x80
 800ba3c:	0552      	lsls	r2, r2, #21
 800ba3e:	601a      	str	r2, [r3, #0]
    if (timeout != 0U) {
 800ba40:	e013      	b.n	800ba6a <osSemaphoreAcquire+0xa6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	0011      	movs	r1, r2
 800ba48:	0018      	movs	r0, r3
 800ba4a:	f000 fe2f 	bl	800c6ac <xQueueSemaphoreTake>
 800ba4e:	0003      	movs	r3, r0
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d00b      	beq.n	800ba6c <osSemaphoreAcquire+0xa8>
      if (timeout != 0U) {
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <osSemaphoreAcquire+0x9e>
        stat = osErrorTimeout;
 800ba5a:	2302      	movs	r3, #2
 800ba5c:	425b      	negs	r3, r3
 800ba5e:	61fb      	str	r3, [r7, #28]
 800ba60:	e004      	b.n	800ba6c <osSemaphoreAcquire+0xa8>
      } else {
        stat = osErrorResource;
 800ba62:	2303      	movs	r3, #3
 800ba64:	425b      	negs	r3, r3
 800ba66:	61fb      	str	r3, [r7, #28]
 800ba68:	e000      	b.n	800ba6c <osSemaphoreAcquire+0xa8>
    if (timeout != 0U) {
 800ba6a:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return (stat);
 800ba6c:	69fb      	ldr	r3, [r7, #28]
}
 800ba6e:	0018      	movs	r0, r3
 800ba70:	46bd      	mov	sp, r7
 800ba72:	b008      	add	sp, #32
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	46c0      	nop			; (mov r8, r8)
 800ba78:	200004c0 	.word	0x200004c0
 800ba7c:	e000ed04 	.word	0xe000ed04

0800ba80 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b088      	sub	sp, #32
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d103      	bne.n	800ba9e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ba96:	2304      	movs	r3, #4
 800ba98:	425b      	negs	r3, r3
 800ba9a:	61fb      	str	r3, [r7, #28]
 800ba9c:	e035      	b.n	800bb0a <osSemaphoreRelease+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba9e:	f3ef 8305 	mrs	r3, IPSR
 800baa2:	617b      	str	r3, [r7, #20]
  return(result);
 800baa4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d109      	bne.n	800babe <osSemaphoreRelease+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baaa:	f3ef 8310 	mrs	r3, PRIMASK
 800baae:	613b      	str	r3, [r7, #16]
  return(result);
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d01b      	beq.n	800baee <osSemaphoreRelease+0x6e>
 800bab6:	4b17      	ldr	r3, [pc, #92]	; (800bb14 <osSemaphoreRelease+0x94>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b02      	cmp	r3, #2
 800babc:	d117      	bne.n	800baee <osSemaphoreRelease+0x6e>
    yield = pdFALSE;
 800babe:	2300      	movs	r3, #0
 800bac0:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bac2:	230c      	movs	r3, #12
 800bac4:	18fa      	adds	r2, r7, r3
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	0011      	movs	r1, r2
 800baca:	0018      	movs	r0, r3
 800bacc:	f000 fcd4 	bl	800c478 <xQueueGiveFromISR>
 800bad0:	0003      	movs	r3, r0
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d003      	beq.n	800bade <osSemaphoreRelease+0x5e>
      stat = osErrorResource;
 800bad6:	2303      	movs	r3, #3
 800bad8:	425b      	negs	r3, r3
 800bada:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800badc:	e014      	b.n	800bb08 <osSemaphoreRelease+0x88>
    } else {
      portYIELD_FROM_ISR (yield);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d011      	beq.n	800bb08 <osSemaphoreRelease+0x88>
 800bae4:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <osSemaphoreRelease+0x98>)
 800bae6:	2280      	movs	r2, #128	; 0x80
 800bae8:	0552      	lsls	r2, r2, #21
 800baea:	601a      	str	r2, [r3, #0]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800baec:	e00c      	b.n	800bb08 <osSemaphoreRelease+0x88>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800baee:	69b8      	ldr	r0, [r7, #24]
 800baf0:	2300      	movs	r3, #0
 800baf2:	2200      	movs	r2, #0
 800baf4:	2100      	movs	r1, #0
 800baf6:	f000 fb8a 	bl	800c20e <xQueueGenericSend>
 800bafa:	0003      	movs	r3, r0
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d004      	beq.n	800bb0a <osSemaphoreRelease+0x8a>
      stat = osErrorResource;
 800bb00:	2303      	movs	r3, #3
 800bb02:	425b      	negs	r3, r3
 800bb04:	61fb      	str	r3, [r7, #28]
 800bb06:	e000      	b.n	800bb0a <osSemaphoreRelease+0x8a>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bb08:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (stat);
 800bb0a:	69fb      	ldr	r3, [r7, #28]
}
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	b008      	add	sp, #32
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	200004c0 	.word	0x200004c0
 800bb18:	e000ed04 	.word	0xe000ed04

0800bb1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bb1c:	b590      	push	{r4, r7, lr}
 800bb1e:	b08d      	sub	sp, #52	; 0x34
 800bb20:	af02      	add	r7, sp, #8
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb2c:	f3ef 8305 	mrs	r3, IPSR
 800bb30:	61bb      	str	r3, [r7, #24]
  return(result);
 800bb32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d000      	beq.n	800bb3a <osMessageQueueNew+0x1e>
 800bb38:	e070      	b.n	800bc1c <osMessageQueueNew+0x100>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb3a:	f3ef 8310 	mrs	r3, PRIMASK
 800bb3e:	617b      	str	r3, [r7, #20]
  return(result);
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d004      	beq.n	800bb50 <osMessageQueueNew+0x34>
 800bb46:	4b38      	ldr	r3, [pc, #224]	; (800bc28 <osMessageQueueNew+0x10c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d100      	bne.n	800bb50 <osMessageQueueNew+0x34>
 800bb4e:	e065      	b.n	800bc1c <osMessageQueueNew+0x100>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d100      	bne.n	800bb58 <osMessageQueueNew+0x3c>
 800bb56:	e061      	b.n	800bc1c <osMessageQueueNew+0x100>
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d05e      	beq.n	800bc1c <osMessageQueueNew+0x100>
    mem = -1;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	425b      	negs	r3, r3
 800bb62:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d028      	beq.n	800bbbc <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d011      	beq.n	800bb96 <osMessageQueueNew+0x7a>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	2b4f      	cmp	r3, #79	; 0x4f
 800bb78:	d90d      	bls.n	800bb96 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d009      	beq.n	800bb96 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	695a      	ldr	r2, [r3, #20]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	68b9      	ldr	r1, [r7, #8]
 800bb8a:	434b      	muls	r3, r1
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d302      	bcc.n	800bb96 <osMessageQueueNew+0x7a>
        mem = 1;
 800bb90:	2301      	movs	r3, #1
 800bb92:	623b      	str	r3, [r7, #32]
 800bb94:	e014      	b.n	800bbc0 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d110      	bne.n	800bbc0 <osMessageQueueNew+0xa4>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10c      	bne.n	800bbc0 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d108      	bne.n	800bbc0 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d104      	bne.n	800bbc0 <osMessageQueueNew+0xa4>
          mem = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	623b      	str	r3, [r7, #32]
 800bbba:	e001      	b.n	800bbc0 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d10d      	bne.n	800bbe2 <osMessageQueueNew+0xc6>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	691a      	ldr	r2, [r3, #16]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	689c      	ldr	r4, [r3, #8]
 800bbce:	68b9      	ldr	r1, [r7, #8]
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	0023      	movs	r3, r4
 800bbd8:	f000 fa27 	bl	800c02a <xQueueGenericCreateStatic>
 800bbdc:	0003      	movs	r3, r0
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24
 800bbe0:	e00a      	b.n	800bbf8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d107      	bne.n	800bbf8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800bbe8:	68b9      	ldr	r1, [r7, #8]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	0018      	movs	r0, r3
 800bbf0:	f000 fa66 	bl	800c0c0 <xQueueGenericCreate>
 800bbf4:	0003      	movs	r3, r0
 800bbf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00e      	beq.n	800bc1c <osMessageQueueNew+0x100>
      if (attr != NULL) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d003      	beq.n	800bc0c <osMessageQueueNew+0xf0>
        name = attr->name;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	61fb      	str	r3, [r7, #28]
 800bc0a:	e001      	b.n	800bc10 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800bc10:	69fa      	ldr	r2, [r7, #28]
 800bc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc14:	0011      	movs	r1, r2
 800bc16:	0018      	movs	r0, r3
 800bc18:	f000 ffd4 	bl	800cbc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc1e:	0018      	movs	r0, r3
 800bc20:	46bd      	mov	sp, r7
 800bc22:	b00b      	add	sp, #44	; 0x2c
 800bc24:	bd90      	pop	{r4, r7, pc}
 800bc26:	46c0      	nop			; (mov r8, r8)
 800bc28:	200004c0 	.word	0x200004c0

0800bc2c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08a      	sub	sp, #40	; 0x28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	603b      	str	r3, [r7, #0]
 800bc38:	1dfb      	adds	r3, r7, #7
 800bc3a:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc44:	f3ef 8305 	mrs	r3, IPSR
 800bc48:	61fb      	str	r3, [r7, #28]
  return(result);
 800bc4a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d109      	bne.n	800bc64 <osMessageQueuePut+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc50:	f3ef 8310 	mrs	r3, PRIMASK
 800bc54:	61bb      	str	r3, [r7, #24]
  return(result);
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d028      	beq.n	800bcae <osMessageQueuePut+0x82>
 800bc5c:	4b26      	ldr	r3, [pc, #152]	; (800bcf8 <osMessageQueuePut+0xcc>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d124      	bne.n	800bcae <osMessageQueuePut+0x82>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d005      	beq.n	800bc76 <osMessageQueuePut+0x4a>
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <osMessageQueuePut+0x4a>
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d003      	beq.n	800bc7e <osMessageQueuePut+0x52>
      stat = osErrorParameter;
 800bc76:	2304      	movs	r3, #4
 800bc78:	425b      	negs	r3, r3
 800bc7a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc7c:	e035      	b.n	800bcea <osMessageQueuePut+0xbe>
    }
    else {
      yield = pdFALSE;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bc82:	2314      	movs	r3, #20
 800bc84:	18fa      	adds	r2, r7, r3
 800bc86:	68b9      	ldr	r1, [r7, #8]
 800bc88:	6a38      	ldr	r0, [r7, #32]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f000 fb83 	bl	800c396 <xQueueGenericSendFromISR>
 800bc90:	0003      	movs	r3, r0
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d003      	beq.n	800bc9e <osMessageQueuePut+0x72>
        stat = osErrorResource;
 800bc96:	2303      	movs	r3, #3
 800bc98:	425b      	negs	r3, r3
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc9c:	e025      	b.n	800bcea <osMessageQueuePut+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d022      	beq.n	800bcea <osMessageQueuePut+0xbe>
 800bca4:	4b15      	ldr	r3, [pc, #84]	; (800bcfc <osMessageQueuePut+0xd0>)
 800bca6:	2280      	movs	r2, #128	; 0x80
 800bca8:	0552      	lsls	r2, r2, #21
 800bcaa:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bcac:	e01d      	b.n	800bcea <osMessageQueuePut+0xbe>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bcae:	6a3b      	ldr	r3, [r7, #32]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d002      	beq.n	800bcba <osMessageQueuePut+0x8e>
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d103      	bne.n	800bcc2 <osMessageQueuePut+0x96>
      stat = osErrorParameter;
 800bcba:	2304      	movs	r3, #4
 800bcbc:	425b      	negs	r3, r3
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
 800bcc0:	e014      	b.n	800bcec <osMessageQueuePut+0xc0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bcc2:	683a      	ldr	r2, [r7, #0]
 800bcc4:	68b9      	ldr	r1, [r7, #8]
 800bcc6:	6a38      	ldr	r0, [r7, #32]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f000 faa0 	bl	800c20e <xQueueGenericSend>
 800bcce:	0003      	movs	r3, r0
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d00b      	beq.n	800bcec <osMessageQueuePut+0xc0>
        if (timeout != 0U) {
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <osMessageQueuePut+0xb6>
          stat = osErrorTimeout;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	425b      	negs	r3, r3
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24
 800bce0:	e004      	b.n	800bcec <osMessageQueuePut+0xc0>
        } else {
          stat = osErrorResource;
 800bce2:	2303      	movs	r3, #3
 800bce4:	425b      	negs	r3, r3
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24
 800bce8:	e000      	b.n	800bcec <osMessageQueuePut+0xc0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bcea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcee:	0018      	movs	r0, r3
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	b00a      	add	sp, #40	; 0x28
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	46c0      	nop			; (mov r8, r8)
 800bcf8:	200004c0 	.word	0x200004c0
 800bcfc:	e000ed04 	.word	0xe000ed04

0800bd00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08a      	sub	sp, #40	; 0x28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
 800bd0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd16:	f3ef 8305 	mrs	r3, IPSR
 800bd1a:	61fb      	str	r3, [r7, #28]
  return(result);
 800bd1c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d109      	bne.n	800bd36 <osMessageQueueGet+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd22:	f3ef 8310 	mrs	r3, PRIMASK
 800bd26:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d028      	beq.n	800bd80 <osMessageQueueGet+0x80>
 800bd2e:	4b26      	ldr	r3, [pc, #152]	; (800bdc8 <osMessageQueueGet+0xc8>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d124      	bne.n	800bd80 <osMessageQueueGet+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd36:	6a3b      	ldr	r3, [r7, #32]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d005      	beq.n	800bd48 <osMessageQueueGet+0x48>
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d002      	beq.n	800bd48 <osMessageQueueGet+0x48>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d003      	beq.n	800bd50 <osMessageQueueGet+0x50>
      stat = osErrorParameter;
 800bd48:	2304      	movs	r3, #4
 800bd4a:	425b      	negs	r3, r3
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd4e:	e035      	b.n	800bdbc <osMessageQueueGet+0xbc>
    }
    else {
      yield = pdFALSE;
 800bd50:	2300      	movs	r3, #0
 800bd52:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bd54:	2314      	movs	r3, #20
 800bd56:	18fa      	adds	r2, r7, r3
 800bd58:	68b9      	ldr	r1, [r7, #8]
 800bd5a:	6a3b      	ldr	r3, [r7, #32]
 800bd5c:	0018      	movs	r0, r3
 800bd5e:	f000 fd7f 	bl	800c860 <xQueueReceiveFromISR>
 800bd62:	0003      	movs	r3, r0
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d003      	beq.n	800bd70 <osMessageQueueGet+0x70>
        stat = osErrorResource;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	425b      	negs	r3, r3
 800bd6c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd6e:	e025      	b.n	800bdbc <osMessageQueueGet+0xbc>
      } else {
        portYIELD_FROM_ISR (yield);
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d022      	beq.n	800bdbc <osMessageQueueGet+0xbc>
 800bd76:	4b15      	ldr	r3, [pc, #84]	; (800bdcc <osMessageQueueGet+0xcc>)
 800bd78:	2280      	movs	r2, #128	; 0x80
 800bd7a:	0552      	lsls	r2, r2, #21
 800bd7c:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd7e:	e01d      	b.n	800bdbc <osMessageQueueGet+0xbc>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bd80:	6a3b      	ldr	r3, [r7, #32]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <osMessageQueueGet+0x8c>
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d103      	bne.n	800bd94 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
 800bd8c:	2304      	movs	r3, #4
 800bd8e:	425b      	negs	r3, r3
 800bd90:	627b      	str	r3, [r7, #36]	; 0x24
 800bd92:	e014      	b.n	800bdbe <osMessageQueueGet+0xbe>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	68b9      	ldr	r1, [r7, #8]
 800bd98:	6a3b      	ldr	r3, [r7, #32]
 800bd9a:	0018      	movs	r0, r3
 800bd9c:	f000 fbd1 	bl	800c542 <xQueueReceive>
 800bda0:	0003      	movs	r3, r0
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d00b      	beq.n	800bdbe <osMessageQueueGet+0xbe>
        if (timeout != 0U) {
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <osMessageQueueGet+0xb4>
          stat = osErrorTimeout;
 800bdac:	2302      	movs	r3, #2
 800bdae:	425b      	negs	r3, r3
 800bdb0:	627b      	str	r3, [r7, #36]	; 0x24
 800bdb2:	e004      	b.n	800bdbe <osMessageQueueGet+0xbe>
        } else {
          stat = osErrorResource;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	425b      	negs	r3, r3
 800bdb8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdba:	e000      	b.n	800bdbe <osMessageQueueGet+0xbe>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bdbc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdc0:	0018      	movs	r0, r3
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	b00a      	add	sp, #40	; 0x28
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	200004c0 	.word	0x200004c0
 800bdcc:	e000ed04 	.word	0xe000ed04

0800bdd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	4a06      	ldr	r2, [pc, #24]	; (800bdf8 <vApplicationGetIdleTaskMemory+0x28>)
 800bde0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	4a05      	ldr	r2, [pc, #20]	; (800bdfc <vApplicationGetIdleTaskMemory+0x2c>)
 800bde6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2280      	movs	r2, #128	; 0x80
 800bdec:	601a      	str	r2, [r3, #0]
}
 800bdee:	46c0      	nop			; (mov r8, r8)
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	b004      	add	sp, #16
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	46c0      	nop			; (mov r8, r8)
 800bdf8:	200004c4 	.word	0x200004c4
 800bdfc:	20000580 	.word	0x20000580

0800be00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	4a06      	ldr	r2, [pc, #24]	; (800be28 <vApplicationGetTimerTaskMemory+0x28>)
 800be10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	4a05      	ldr	r2, [pc, #20]	; (800be2c <vApplicationGetTimerTaskMemory+0x2c>)
 800be16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2280      	movs	r2, #128	; 0x80
 800be1c:	0052      	lsls	r2, r2, #1
 800be1e:	601a      	str	r2, [r3, #0]
}
 800be20:	46c0      	nop			; (mov r8, r8)
 800be22:	46bd      	mov	sp, r7
 800be24:	b004      	add	sp, #16
 800be26:	bd80      	pop	{r7, pc}
 800be28:	20000780 	.word	0x20000780
 800be2c:	2000083c 	.word	0x2000083c

0800be30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	3308      	adds	r3, #8
 800be3c:	001a      	movs	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	4252      	negs	r2, r2
 800be48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	3308      	adds	r3, #8
 800be4e:	001a      	movs	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	3308      	adds	r3, #8
 800be58:	001a      	movs	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be64:	46c0      	nop			; (mov r8, r8)
 800be66:	46bd      	mov	sp, r7
 800be68:	b002      	add	sp, #8
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be7a:	46c0      	nop			; (mov r8, r8)
 800be7c:	46bd      	mov	sp, r7
 800be7e:	b002      	add	sp, #8
 800be80:	bd80      	pop	{r7, pc}

0800be82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	689a      	ldr	r2, [r3, #8]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	1c5a      	adds	r2, r3, #1
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	601a      	str	r2, [r3, #0]
}
 800bebe:	46c0      	nop			; (mov r8, r8)
 800bec0:	46bd      	mov	sp, r7
 800bec2:	b004      	add	sp, #16
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b084      	sub	sp, #16
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	3301      	adds	r3, #1
 800beda:	d103      	bne.n	800bee4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	60fb      	str	r3, [r7, #12]
 800bee2:	e00c      	b.n	800befe <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	3308      	adds	r3, #8
 800bee8:	60fb      	str	r3, [r7, #12]
 800beea:	e002      	b.n	800bef2 <vListInsert+0x2c>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	429a      	cmp	r2, r3
 800befc:	d2f6      	bcs.n	800beec <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	685a      	ldr	r2, [r3, #4]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	1c5a      	adds	r2, r3, #1
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	601a      	str	r2, [r3, #0]
}
 800bf2a:	46c0      	nop			; (mov r8, r8)
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	b004      	add	sp, #16
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	6892      	ldr	r2, [r2, #8]
 800bf48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	6852      	ldr	r2, [r2, #4]
 800bf52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d103      	bne.n	800bf66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	689a      	ldr	r2, [r3, #8]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	1e5a      	subs	r2, r3, #1
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
}
 800bf7a:	0018      	movs	r0, r3
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	b004      	add	sp, #16
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <xQueueGenericReset+0x18>
 800bf96:	b672      	cpsid	i
 800bf98:	e7fe      	b.n	800bf98 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800bf9a:	f002 fa51 	bl	800e440 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfaa:	434b      	muls	r3, r1
 800bfac:	18d2      	adds	r2, r2, r3
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfc8:	1e59      	subs	r1, r3, #1
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfce:	434b      	muls	r3, r1
 800bfd0:	18d2      	adds	r2, r2, r3
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2244      	movs	r2, #68	; 0x44
 800bfda:	21ff      	movs	r1, #255	; 0xff
 800bfdc:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2245      	movs	r2, #69	; 0x45
 800bfe2:	21ff      	movs	r1, #255	; 0xff
 800bfe4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10d      	bne.n	800c008 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d013      	beq.n	800c01c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	3310      	adds	r3, #16
 800bff8:	0018      	movs	r0, r3
 800bffa:	f001 fb57 	bl	800d6ac <xTaskRemoveFromEventList>
 800bffe:	1e03      	subs	r3, r0, #0
 800c000:	d00c      	beq.n	800c01c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c002:	f002 fa0d 	bl	800e420 <vPortYield>
 800c006:	e009      	b.n	800c01c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3310      	adds	r3, #16
 800c00c:	0018      	movs	r0, r3
 800c00e:	f7ff ff0f 	bl	800be30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	3324      	adds	r3, #36	; 0x24
 800c016:	0018      	movs	r0, r3
 800c018:	f7ff ff0a 	bl	800be30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c01c:	f002 fa22 	bl	800e464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c020:	2301      	movs	r3, #1
}
 800c022:	0018      	movs	r0, r3
 800c024:	46bd      	mov	sp, r7
 800c026:	b004      	add	sp, #16
 800c028:	bd80      	pop	{r7, pc}

0800c02a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c02a:	b590      	push	{r4, r7, lr}
 800c02c:	b089      	sub	sp, #36	; 0x24
 800c02e:	af02      	add	r7, sp, #8
 800c030:	60f8      	str	r0, [r7, #12]
 800c032:	60b9      	str	r1, [r7, #8]
 800c034:	607a      	str	r2, [r7, #4]
 800c036:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d101      	bne.n	800c042 <xQueueGenericCreateStatic+0x18>
 800c03e:	b672      	cpsid	i
 800c040:	e7fe      	b.n	800c040 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d101      	bne.n	800c04c <xQueueGenericCreateStatic+0x22>
 800c048:	b672      	cpsid	i
 800c04a:	e7fe      	b.n	800c04a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d002      	beq.n	800c058 <xQueueGenericCreateStatic+0x2e>
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <xQueueGenericCreateStatic+0x32>
 800c058:	2301      	movs	r3, #1
 800c05a:	e000      	b.n	800c05e <xQueueGenericCreateStatic+0x34>
 800c05c:	2300      	movs	r3, #0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <xQueueGenericCreateStatic+0x3c>
 800c062:	b672      	cpsid	i
 800c064:	e7fe      	b.n	800c064 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d102      	bne.n	800c072 <xQueueGenericCreateStatic+0x48>
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <xQueueGenericCreateStatic+0x4c>
 800c072:	2301      	movs	r3, #1
 800c074:	e000      	b.n	800c078 <xQueueGenericCreateStatic+0x4e>
 800c076:	2300      	movs	r3, #0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d101      	bne.n	800c080 <xQueueGenericCreateStatic+0x56>
 800c07c:	b672      	cpsid	i
 800c07e:	e7fe      	b.n	800c07e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c080:	2350      	movs	r3, #80	; 0x50
 800c082:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	2b50      	cmp	r3, #80	; 0x50
 800c088:	d001      	beq.n	800c08e <xQueueGenericCreateStatic+0x64>
 800c08a:	b672      	cpsid	i
 800c08c:	e7fe      	b.n	800c08c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00e      	beq.n	800c0b6 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2246      	movs	r2, #70	; 0x46
 800c09c:	2101      	movs	r1, #1
 800c09e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c0a0:	2328      	movs	r3, #40	; 0x28
 800c0a2:	18fb      	adds	r3, r7, r3
 800c0a4:	781c      	ldrb	r4, [r3, #0]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	0023      	movs	r3, r4
 800c0b2:	f000 f83b 	bl	800c12c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c0b6:	697b      	ldr	r3, [r7, #20]
	}
 800c0b8:	0018      	movs	r0, r3
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	b007      	add	sp, #28
 800c0be:	bd90      	pop	{r4, r7, pc}

0800c0c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c0c0:	b590      	push	{r4, r7, lr}
 800c0c2:	b08b      	sub	sp, #44	; 0x2c
 800c0c4:	af02      	add	r7, sp, #8
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	1dfb      	adds	r3, r7, #7
 800c0cc:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <xQueueGenericCreate+0x18>
 800c0d4:	b672      	cpsid	i
 800c0d6:	e7fe      	b.n	800c0d6 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d102      	bne.n	800c0e4 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	61fb      	str	r3, [r7, #28]
 800c0e2:	e003      	b.n	800c0ec <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	4353      	muls	r3, r2
 800c0ea:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	3350      	adds	r3, #80	; 0x50
 800c0f0:	0018      	movs	r0, r3
 800c0f2:	f002 fa3d 	bl	800e570 <pvPortMalloc>
 800c0f6:	0003      	movs	r3, r0
 800c0f8:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d010      	beq.n	800c122 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	3350      	adds	r3, #80	; 0x50
 800c104:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	2246      	movs	r2, #70	; 0x46
 800c10a:	2100      	movs	r1, #0
 800c10c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c10e:	1dfb      	adds	r3, r7, #7
 800c110:	781c      	ldrb	r4, [r3, #0]
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	68b9      	ldr	r1, [r7, #8]
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	0023      	movs	r3, r4
 800c11e:	f000 f805 	bl	800c12c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c122:	69bb      	ldr	r3, [r7, #24]
	}
 800c124:	0018      	movs	r0, r3
 800c126:	46bd      	mov	sp, r7
 800c128:	b009      	add	sp, #36	; 0x24
 800c12a:	bd90      	pop	{r4, r7, pc}

0800c12c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	001a      	movs	r2, r3
 800c13a:	1cfb      	adds	r3, r7, #3
 800c13c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d103      	bne.n	800c14c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	69ba      	ldr	r2, [r7, #24]
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	e002      	b.n	800c152 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	2101      	movs	r1, #1
 800c162:	0018      	movs	r0, r3
 800c164:	f7ff ff0d 	bl	800bf82 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	1cfa      	adds	r2, r7, #3
 800c16c:	214c      	movs	r1, #76	; 0x4c
 800c16e:	7812      	ldrb	r2, [r2, #0]
 800c170:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c172:	46c0      	nop			; (mov r8, r8)
 800c174:	46bd      	mov	sp, r7
 800c176:	b004      	add	sp, #16
 800c178:	bd80      	pop	{r7, pc}

0800c17a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b088      	sub	sp, #32
 800c17e:	af02      	add	r7, sp, #8
 800c180:	60f8      	str	r0, [r7, #12]
 800c182:	60b9      	str	r1, [r7, #8]
 800c184:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <xQueueCreateCountingSemaphoreStatic+0x16>
 800c18c:	b672      	cpsid	i
 800c18e:	e7fe      	b.n	800c18e <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	429a      	cmp	r2, r3
 800c196:	d901      	bls.n	800c19c <xQueueCreateCountingSemaphoreStatic+0x22>
 800c198:	b672      	cpsid	i
 800c19a:	e7fe      	b.n	800c19a <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	0013      	movs	r3, r2
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	f7ff ff3e 	bl	800c02a <xQueueGenericCreateStatic>
 800c1ae:	0003      	movs	r3, r0
 800c1b0:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <xQueueCreateCountingSemaphoreStatic+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c1be:	697b      	ldr	r3, [r7, #20]
	}
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	b006      	add	sp, #24
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <xQueueCreateCountingSemaphore+0x14>
 800c1d8:	b672      	cpsid	i
 800c1da:	e7fe      	b.n	800c1da <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d901      	bls.n	800c1e8 <xQueueCreateCountingSemaphore+0x20>
 800c1e4:	b672      	cpsid	i
 800c1e6:	e7fe      	b.n	800c1e6 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	0018      	movs	r0, r3
 800c1f0:	f7ff ff66 	bl	800c0c0 <xQueueGenericCreate>
 800c1f4:	0003      	movs	r3, r0
 800c1f6:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d002      	beq.n	800c204 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c204:	68fb      	ldr	r3, [r7, #12]
	}
 800c206:	0018      	movs	r0, r3
 800c208:	46bd      	mov	sp, r7
 800c20a:	b004      	add	sp, #16
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b08a      	sub	sp, #40	; 0x28
 800c212:	af00      	add	r7, sp, #0
 800c214:	60f8      	str	r0, [r7, #12]
 800c216:	60b9      	str	r1, [r7, #8]
 800c218:	607a      	str	r2, [r7, #4]
 800c21a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c21c:	2300      	movs	r3, #0
 800c21e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800c224:	6a3b      	ldr	r3, [r7, #32]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d101      	bne.n	800c22e <xQueueGenericSend+0x20>
 800c22a:	b672      	cpsid	i
 800c22c:	e7fe      	b.n	800c22c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d103      	bne.n	800c23c <xQueueGenericSend+0x2e>
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d101      	bne.n	800c240 <xQueueGenericSend+0x32>
 800c23c:	2301      	movs	r3, #1
 800c23e:	e000      	b.n	800c242 <xQueueGenericSend+0x34>
 800c240:	2300      	movs	r3, #0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <xQueueGenericSend+0x3c>
 800c246:	b672      	cpsid	i
 800c248:	e7fe      	b.n	800c248 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d103      	bne.n	800c258 <xQueueGenericSend+0x4a>
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c254:	2b01      	cmp	r3, #1
 800c256:	d101      	bne.n	800c25c <xQueueGenericSend+0x4e>
 800c258:	2301      	movs	r3, #1
 800c25a:	e000      	b.n	800c25e <xQueueGenericSend+0x50>
 800c25c:	2300      	movs	r3, #0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <xQueueGenericSend+0x58>
 800c262:	b672      	cpsid	i
 800c264:	e7fe      	b.n	800c264 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c266:	f001 fbbf 	bl	800d9e8 <xTaskGetSchedulerState>
 800c26a:	1e03      	subs	r3, r0, #0
 800c26c:	d102      	bne.n	800c274 <xQueueGenericSend+0x66>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <xQueueGenericSend+0x6a>
 800c274:	2301      	movs	r3, #1
 800c276:	e000      	b.n	800c27a <xQueueGenericSend+0x6c>
 800c278:	2300      	movs	r3, #0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d101      	bne.n	800c282 <xQueueGenericSend+0x74>
 800c27e:	b672      	cpsid	i
 800c280:	e7fe      	b.n	800c280 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c282:	f002 f8dd 	bl	800e440 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c286:	6a3b      	ldr	r3, [r7, #32]
 800c288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c28a:	6a3b      	ldr	r3, [r7, #32]
 800c28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c28e:	429a      	cmp	r2, r3
 800c290:	d302      	bcc.n	800c298 <xQueueGenericSend+0x8a>
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	2b02      	cmp	r3, #2
 800c296:	d11e      	bne.n	800c2d6 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c298:	683a      	ldr	r2, [r7, #0]
 800c29a:	68b9      	ldr	r1, [r7, #8]
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	0018      	movs	r0, r3
 800c2a0:	f000 fb73 	bl	800c98a <prvCopyDataToQueue>
 800c2a4:	0003      	movs	r3, r0
 800c2a6:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2a8:	6a3b      	ldr	r3, [r7, #32]
 800c2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d009      	beq.n	800c2c4 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2b0:	6a3b      	ldr	r3, [r7, #32]
 800c2b2:	3324      	adds	r3, #36	; 0x24
 800c2b4:	0018      	movs	r0, r3
 800c2b6:	f001 f9f9 	bl	800d6ac <xTaskRemoveFromEventList>
 800c2ba:	1e03      	subs	r3, r0, #0
 800c2bc:	d007      	beq.n	800c2ce <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2be:	f002 f8af 	bl	800e420 <vPortYield>
 800c2c2:	e004      	b.n	800c2ce <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2ca:	f002 f8a9 	bl	800e420 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2ce:	f002 f8c9 	bl	800e464 <vPortExitCritical>
				return pdPASS;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e05b      	b.n	800c38e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d103      	bne.n	800c2e4 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2dc:	f002 f8c2 	bl	800e464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	e054      	b.n	800c38e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d106      	bne.n	800c2f8 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2ea:	2314      	movs	r3, #20
 800c2ec:	18fb      	adds	r3, r7, r3
 800c2ee:	0018      	movs	r0, r3
 800c2f0:	f001 fa38 	bl	800d764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2f8:	f002 f8b4 	bl	800e464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2fc:	f000 ffde 	bl	800d2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c300:	f002 f89e 	bl	800e440 <vPortEnterCritical>
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	2244      	movs	r2, #68	; 0x44
 800c308:	5c9b      	ldrb	r3, [r3, r2]
 800c30a:	b25b      	sxtb	r3, r3
 800c30c:	3301      	adds	r3, #1
 800c30e:	d103      	bne.n	800c318 <xQueueGenericSend+0x10a>
 800c310:	6a3b      	ldr	r3, [r7, #32]
 800c312:	2244      	movs	r2, #68	; 0x44
 800c314:	2100      	movs	r1, #0
 800c316:	5499      	strb	r1, [r3, r2]
 800c318:	6a3b      	ldr	r3, [r7, #32]
 800c31a:	2245      	movs	r2, #69	; 0x45
 800c31c:	5c9b      	ldrb	r3, [r3, r2]
 800c31e:	b25b      	sxtb	r3, r3
 800c320:	3301      	adds	r3, #1
 800c322:	d103      	bne.n	800c32c <xQueueGenericSend+0x11e>
 800c324:	6a3b      	ldr	r3, [r7, #32]
 800c326:	2245      	movs	r2, #69	; 0x45
 800c328:	2100      	movs	r1, #0
 800c32a:	5499      	strb	r1, [r3, r2]
 800c32c:	f002 f89a 	bl	800e464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c330:	1d3a      	adds	r2, r7, #4
 800c332:	2314      	movs	r3, #20
 800c334:	18fb      	adds	r3, r7, r3
 800c336:	0011      	movs	r1, r2
 800c338:	0018      	movs	r0, r3
 800c33a:	f001 fa27 	bl	800d78c <xTaskCheckForTimeOut>
 800c33e:	1e03      	subs	r3, r0, #0
 800c340:	d11e      	bne.n	800c380 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c342:	6a3b      	ldr	r3, [r7, #32]
 800c344:	0018      	movs	r0, r3
 800c346:	f000 fc25 	bl	800cb94 <prvIsQueueFull>
 800c34a:	1e03      	subs	r3, r0, #0
 800c34c:	d011      	beq.n	800c372 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	3310      	adds	r3, #16
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	0011      	movs	r1, r2
 800c356:	0018      	movs	r0, r3
 800c358:	f001 f964 	bl	800d624 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c35c:	6a3b      	ldr	r3, [r7, #32]
 800c35e:	0018      	movs	r0, r3
 800c360:	f000 fba4 	bl	800caac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c364:	f000 ffb6 	bl	800d2d4 <xTaskResumeAll>
 800c368:	1e03      	subs	r3, r0, #0
 800c36a:	d18a      	bne.n	800c282 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800c36c:	f002 f858 	bl	800e420 <vPortYield>
 800c370:	e787      	b.n	800c282 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	0018      	movs	r0, r3
 800c376:	f000 fb99 	bl	800caac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c37a:	f000 ffab 	bl	800d2d4 <xTaskResumeAll>
 800c37e:	e780      	b.n	800c282 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c380:	6a3b      	ldr	r3, [r7, #32]
 800c382:	0018      	movs	r0, r3
 800c384:	f000 fb92 	bl	800caac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c388:	f000 ffa4 	bl	800d2d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c38c:	2300      	movs	r3, #0
		}
	}
}
 800c38e:	0018      	movs	r0, r3
 800c390:	46bd      	mov	sp, r7
 800c392:	b00a      	add	sp, #40	; 0x28
 800c394:	bd80      	pop	{r7, pc}

0800c396 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c396:	b590      	push	{r4, r7, lr}
 800c398:	b089      	sub	sp, #36	; 0x24
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	60f8      	str	r0, [r7, #12]
 800c39e:	60b9      	str	r1, [r7, #8]
 800c3a0:	607a      	str	r2, [r7, #4]
 800c3a2:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d101      	bne.n	800c3b2 <xQueueGenericSendFromISR+0x1c>
 800c3ae:	b672      	cpsid	i
 800c3b0:	e7fe      	b.n	800c3b0 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d103      	bne.n	800c3c0 <xQueueGenericSendFromISR+0x2a>
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <xQueueGenericSendFromISR+0x2e>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e000      	b.n	800c3c6 <xQueueGenericSendFromISR+0x30>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d101      	bne.n	800c3ce <xQueueGenericSendFromISR+0x38>
 800c3ca:	b672      	cpsid	i
 800c3cc:	e7fe      	b.n	800c3cc <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d103      	bne.n	800c3dc <xQueueGenericSendFromISR+0x46>
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d101      	bne.n	800c3e0 <xQueueGenericSendFromISR+0x4a>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e000      	b.n	800c3e2 <xQueueGenericSendFromISR+0x4c>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d101      	bne.n	800c3ea <xQueueGenericSendFromISR+0x54>
 800c3e6:	b672      	cpsid	i
 800c3e8:	e7fe      	b.n	800c3e8 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3ea:	f002 f853 	bl	800e494 <ulSetInterruptMaskFromISR>
 800c3ee:	0003      	movs	r3, r0
 800c3f0:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d302      	bcc.n	800c404 <xQueueGenericSendFromISR+0x6e>
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2b02      	cmp	r3, #2
 800c402:	d12e      	bne.n	800c462 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c404:	2413      	movs	r4, #19
 800c406:	193b      	adds	r3, r7, r4
 800c408:	69ba      	ldr	r2, [r7, #24]
 800c40a:	2145      	movs	r1, #69	; 0x45
 800c40c:	5c52      	ldrb	r2, [r2, r1]
 800c40e:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	68b9      	ldr	r1, [r7, #8]
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	0018      	movs	r0, r3
 800c418:	f000 fab7 	bl	800c98a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c41c:	193b      	adds	r3, r7, r4
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	b25b      	sxtb	r3, r3
 800c422:	3301      	adds	r3, #1
 800c424:	d111      	bne.n	800c44a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d016      	beq.n	800c45c <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	3324      	adds	r3, #36	; 0x24
 800c432:	0018      	movs	r0, r3
 800c434:	f001 f93a 	bl	800d6ac <xTaskRemoveFromEventList>
 800c438:	1e03      	subs	r3, r0, #0
 800c43a:	d00f      	beq.n	800c45c <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00c      	beq.n	800c45c <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	601a      	str	r2, [r3, #0]
 800c448:	e008      	b.n	800c45c <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c44a:	2313      	movs	r3, #19
 800c44c:	18fb      	adds	r3, r7, r3
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	3301      	adds	r3, #1
 800c452:	b2db      	uxtb	r3, r3
 800c454:	b259      	sxtb	r1, r3
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	2245      	movs	r2, #69	; 0x45
 800c45a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800c45c:	2301      	movs	r3, #1
 800c45e:	61fb      	str	r3, [r7, #28]
		{
 800c460:	e001      	b.n	800c466 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c462:	2300      	movs	r3, #0
 800c464:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	0018      	movs	r0, r3
 800c46a:	f002 f819 	bl	800e4a0 <vClearInterruptMaskFromISR>

	return xReturn;
 800c46e:	69fb      	ldr	r3, [r7, #28]
}
 800c470:	0018      	movs	r0, r3
 800c472:	46bd      	mov	sp, r7
 800c474:	b009      	add	sp, #36	; 0x24
 800c476:	bd90      	pop	{r4, r7, pc}

0800c478 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b088      	sub	sp, #32
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <xQueueGiveFromISR+0x18>
 800c48c:	b672      	cpsid	i
 800c48e:	e7fe      	b.n	800c48e <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c494:	2b00      	cmp	r3, #0
 800c496:	d001      	beq.n	800c49c <xQueueGiveFromISR+0x24>
 800c498:	b672      	cpsid	i
 800c49a:	e7fe      	b.n	800c49a <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d103      	bne.n	800c4ac <xQueueGiveFromISR+0x34>
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d101      	bne.n	800c4b0 <xQueueGiveFromISR+0x38>
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e000      	b.n	800c4b2 <xQueueGiveFromISR+0x3a>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <xQueueGiveFromISR+0x42>
 800c4b6:	b672      	cpsid	i
 800c4b8:	e7fe      	b.n	800c4b8 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4ba:	f001 ffeb 	bl	800e494 <ulSetInterruptMaskFromISR>
 800c4be:	0003      	movs	r3, r0
 800c4c0:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c6:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d22c      	bcs.n	800c52c <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4d2:	200f      	movs	r0, #15
 800c4d4:	183b      	adds	r3, r7, r0
 800c4d6:	69ba      	ldr	r2, [r7, #24]
 800c4d8:	2145      	movs	r1, #69	; 0x45
 800c4da:	5c52      	ldrb	r2, [r2, r1]
 800c4dc:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	1c5a      	adds	r2, r3, #1
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4e6:	183b      	adds	r3, r7, r0
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	b25b      	sxtb	r3, r3
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	d111      	bne.n	800c514 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d016      	beq.n	800c526 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	3324      	adds	r3, #36	; 0x24
 800c4fc:	0018      	movs	r0, r3
 800c4fe:	f001 f8d5 	bl	800d6ac <xTaskRemoveFromEventList>
 800c502:	1e03      	subs	r3, r0, #0
 800c504:	d00f      	beq.n	800c526 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00c      	beq.n	800c526 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	2201      	movs	r2, #1
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	e008      	b.n	800c526 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c514:	230f      	movs	r3, #15
 800c516:	18fb      	adds	r3, r7, r3
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	3301      	adds	r3, #1
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	b259      	sxtb	r1, r3
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	2245      	movs	r2, #69	; 0x45
 800c524:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800c526:	2301      	movs	r3, #1
 800c528:	61fb      	str	r3, [r7, #28]
 800c52a:	e001      	b.n	800c530 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c52c:	2300      	movs	r3, #0
 800c52e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	0018      	movs	r0, r3
 800c534:	f001 ffb4 	bl	800e4a0 <vClearInterruptMaskFromISR>

	return xReturn;
 800c538:	69fb      	ldr	r3, [r7, #28]
}
 800c53a:	0018      	movs	r0, r3
 800c53c:	46bd      	mov	sp, r7
 800c53e:	b008      	add	sp, #32
 800c540:	bd80      	pop	{r7, pc}

0800c542 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b08a      	sub	sp, #40	; 0x28
 800c546:	af00      	add	r7, sp, #0
 800c548:	60f8      	str	r0, [r7, #12]
 800c54a:	60b9      	str	r1, [r7, #8]
 800c54c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c54e:	2300      	movs	r3, #0
 800c550:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d101      	bne.n	800c560 <xQueueReceive+0x1e>
 800c55c:	b672      	cpsid	i
 800c55e:	e7fe      	b.n	800c55e <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d103      	bne.n	800c56e <xQueueReceive+0x2c>
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d101      	bne.n	800c572 <xQueueReceive+0x30>
 800c56e:	2301      	movs	r3, #1
 800c570:	e000      	b.n	800c574 <xQueueReceive+0x32>
 800c572:	2300      	movs	r3, #0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d101      	bne.n	800c57c <xQueueReceive+0x3a>
 800c578:	b672      	cpsid	i
 800c57a:	e7fe      	b.n	800c57a <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c57c:	f001 fa34 	bl	800d9e8 <xTaskGetSchedulerState>
 800c580:	1e03      	subs	r3, r0, #0
 800c582:	d102      	bne.n	800c58a <xQueueReceive+0x48>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d101      	bne.n	800c58e <xQueueReceive+0x4c>
 800c58a:	2301      	movs	r3, #1
 800c58c:	e000      	b.n	800c590 <xQueueReceive+0x4e>
 800c58e:	2300      	movs	r3, #0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d101      	bne.n	800c598 <xQueueReceive+0x56>
 800c594:	b672      	cpsid	i
 800c596:	e7fe      	b.n	800c596 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c598:	f001 ff52 	bl	800e440 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c59c:	6a3b      	ldr	r3, [r7, #32]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d01a      	beq.n	800c5de <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	0011      	movs	r1, r2
 800c5ae:	0018      	movs	r0, r3
 800c5b0:	f000 fa56 	bl	800ca60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	1e5a      	subs	r2, r3, #1
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5bc:	6a3b      	ldr	r3, [r7, #32]
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d008      	beq.n	800c5d6 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5c4:	6a3b      	ldr	r3, [r7, #32]
 800c5c6:	3310      	adds	r3, #16
 800c5c8:	0018      	movs	r0, r3
 800c5ca:	f001 f86f 	bl	800d6ac <xTaskRemoveFromEventList>
 800c5ce:	1e03      	subs	r3, r0, #0
 800c5d0:	d001      	beq.n	800c5d6 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5d2:	f001 ff25 	bl	800e420 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5d6:	f001 ff45 	bl	800e464 <vPortExitCritical>
				return pdPASS;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e062      	b.n	800c6a4 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d103      	bne.n	800c5ec <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5e4:	f001 ff3e 	bl	800e464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e05b      	b.n	800c6a4 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d106      	bne.n	800c600 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5f2:	2314      	movs	r3, #20
 800c5f4:	18fb      	adds	r3, r7, r3
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	f001 f8b4 	bl	800d764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c600:	f001 ff30 	bl	800e464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c604:	f000 fe5a 	bl	800d2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c608:	f001 ff1a 	bl	800e440 <vPortEnterCritical>
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	2244      	movs	r2, #68	; 0x44
 800c610:	5c9b      	ldrb	r3, [r3, r2]
 800c612:	b25b      	sxtb	r3, r3
 800c614:	3301      	adds	r3, #1
 800c616:	d103      	bne.n	800c620 <xQueueReceive+0xde>
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	2244      	movs	r2, #68	; 0x44
 800c61c:	2100      	movs	r1, #0
 800c61e:	5499      	strb	r1, [r3, r2]
 800c620:	6a3b      	ldr	r3, [r7, #32]
 800c622:	2245      	movs	r2, #69	; 0x45
 800c624:	5c9b      	ldrb	r3, [r3, r2]
 800c626:	b25b      	sxtb	r3, r3
 800c628:	3301      	adds	r3, #1
 800c62a:	d103      	bne.n	800c634 <xQueueReceive+0xf2>
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	2245      	movs	r2, #69	; 0x45
 800c630:	2100      	movs	r1, #0
 800c632:	5499      	strb	r1, [r3, r2]
 800c634:	f001 ff16 	bl	800e464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c638:	1d3a      	adds	r2, r7, #4
 800c63a:	2314      	movs	r3, #20
 800c63c:	18fb      	adds	r3, r7, r3
 800c63e:	0011      	movs	r1, r2
 800c640:	0018      	movs	r0, r3
 800c642:	f001 f8a3 	bl	800d78c <xTaskCheckForTimeOut>
 800c646:	1e03      	subs	r3, r0, #0
 800c648:	d11e      	bne.n	800c688 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	0018      	movs	r0, r3
 800c64e:	f000 fa8b 	bl	800cb68 <prvIsQueueEmpty>
 800c652:	1e03      	subs	r3, r0, #0
 800c654:	d011      	beq.n	800c67a <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c656:	6a3b      	ldr	r3, [r7, #32]
 800c658:	3324      	adds	r3, #36	; 0x24
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	0011      	movs	r1, r2
 800c65e:	0018      	movs	r0, r3
 800c660:	f000 ffe0 	bl	800d624 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c664:	6a3b      	ldr	r3, [r7, #32]
 800c666:	0018      	movs	r0, r3
 800c668:	f000 fa20 	bl	800caac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c66c:	f000 fe32 	bl	800d2d4 <xTaskResumeAll>
 800c670:	1e03      	subs	r3, r0, #0
 800c672:	d191      	bne.n	800c598 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800c674:	f001 fed4 	bl	800e420 <vPortYield>
 800c678:	e78e      	b.n	800c598 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c67a:	6a3b      	ldr	r3, [r7, #32]
 800c67c:	0018      	movs	r0, r3
 800c67e:	f000 fa15 	bl	800caac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c682:	f000 fe27 	bl	800d2d4 <xTaskResumeAll>
 800c686:	e787      	b.n	800c598 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	0018      	movs	r0, r3
 800c68c:	f000 fa0e 	bl	800caac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c690:	f000 fe20 	bl	800d2d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c694:	6a3b      	ldr	r3, [r7, #32]
 800c696:	0018      	movs	r0, r3
 800c698:	f000 fa66 	bl	800cb68 <prvIsQueueEmpty>
 800c69c:	1e03      	subs	r3, r0, #0
 800c69e:	d100      	bne.n	800c6a2 <xQueueReceive+0x160>
 800c6a0:	e77a      	b.n	800c598 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c6a4:	0018      	movs	r0, r3
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	b00a      	add	sp, #40	; 0x28
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b08a      	sub	sp, #40	; 0x28
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d101      	bne.n	800c6cc <xQueueSemaphoreTake+0x20>
 800c6c8:	b672      	cpsid	i
 800c6ca:	e7fe      	b.n	800c6ca <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d001      	beq.n	800c6d8 <xQueueSemaphoreTake+0x2c>
 800c6d4:	b672      	cpsid	i
 800c6d6:	e7fe      	b.n	800c6d6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6d8:	f001 f986 	bl	800d9e8 <xTaskGetSchedulerState>
 800c6dc:	1e03      	subs	r3, r0, #0
 800c6de:	d102      	bne.n	800c6e6 <xQueueSemaphoreTake+0x3a>
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <xQueueSemaphoreTake+0x3e>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e000      	b.n	800c6ec <xQueueSemaphoreTake+0x40>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <xQueueSemaphoreTake+0x48>
 800c6f0:	b672      	cpsid	i
 800c6f2:	e7fe      	b.n	800c6f2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6f4:	f001 fea4 	bl	800e440 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fc:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d01d      	beq.n	800c740 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	1e5a      	subs	r2, r3, #1
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d104      	bne.n	800c71e <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c714:	f001 fac2 	bl	800dc9c <pvTaskIncrementMutexHeldCount>
 800c718:	0002      	movs	r2, r0
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d008      	beq.n	800c738 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	3310      	adds	r3, #16
 800c72a:	0018      	movs	r0, r3
 800c72c:	f000 ffbe 	bl	800d6ac <xTaskRemoveFromEventList>
 800c730:	1e03      	subs	r3, r0, #0
 800c732:	d001      	beq.n	800c738 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c734:	f001 fe74 	bl	800e420 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c738:	f001 fe94 	bl	800e464 <vPortExitCritical>
				return pdPASS;
 800c73c:	2301      	movs	r3, #1
 800c73e:	e08b      	b.n	800c858 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d108      	bne.n	800c758 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d001      	beq.n	800c750 <xQueueSemaphoreTake+0xa4>
 800c74c:	b672      	cpsid	i
 800c74e:	e7fe      	b.n	800c74e <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c750:	f001 fe88 	bl	800e464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c754:	2300      	movs	r3, #0
 800c756:	e07f      	b.n	800c858 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d106      	bne.n	800c76c <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c75e:	230c      	movs	r3, #12
 800c760:	18fb      	adds	r3, r7, r3
 800c762:	0018      	movs	r0, r3
 800c764:	f000 fffe 	bl	800d764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c768:	2301      	movs	r3, #1
 800c76a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c76c:	f001 fe7a 	bl	800e464 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c770:	f000 fda4 	bl	800d2bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c774:	f001 fe64 	bl	800e440 <vPortEnterCritical>
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	2244      	movs	r2, #68	; 0x44
 800c77c:	5c9b      	ldrb	r3, [r3, r2]
 800c77e:	b25b      	sxtb	r3, r3
 800c780:	3301      	adds	r3, #1
 800c782:	d103      	bne.n	800c78c <xQueueSemaphoreTake+0xe0>
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	2244      	movs	r2, #68	; 0x44
 800c788:	2100      	movs	r1, #0
 800c78a:	5499      	strb	r1, [r3, r2]
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	2245      	movs	r2, #69	; 0x45
 800c790:	5c9b      	ldrb	r3, [r3, r2]
 800c792:	b25b      	sxtb	r3, r3
 800c794:	3301      	adds	r3, #1
 800c796:	d103      	bne.n	800c7a0 <xQueueSemaphoreTake+0xf4>
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	2245      	movs	r2, #69	; 0x45
 800c79c:	2100      	movs	r1, #0
 800c79e:	5499      	strb	r1, [r3, r2]
 800c7a0:	f001 fe60 	bl	800e464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7a4:	003a      	movs	r2, r7
 800c7a6:	230c      	movs	r3, #12
 800c7a8:	18fb      	adds	r3, r7, r3
 800c7aa:	0011      	movs	r1, r2
 800c7ac:	0018      	movs	r0, r3
 800c7ae:	f000 ffed 	bl	800d78c <xTaskCheckForTimeOut>
 800c7b2:	1e03      	subs	r3, r0, #0
 800c7b4:	d12e      	bne.n	800c814 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	0018      	movs	r0, r3
 800c7ba:	f000 f9d5 	bl	800cb68 <prvIsQueueEmpty>
 800c7be:	1e03      	subs	r3, r0, #0
 800c7c0:	d021      	beq.n	800c806 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10a      	bne.n	800c7e0 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800c7ca:	f001 fe39 	bl	800e440 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	0018      	movs	r0, r3
 800c7d4:	f001 f924 	bl	800da20 <xTaskPriorityInherit>
 800c7d8:	0003      	movs	r3, r0
 800c7da:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800c7dc:	f001 fe42 	bl	800e464 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	3324      	adds	r3, #36	; 0x24
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	0011      	movs	r1, r2
 800c7e8:	0018      	movs	r0, r3
 800c7ea:	f000 ff1b 	bl	800d624 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	0018      	movs	r0, r3
 800c7f2:	f000 f95b 	bl	800caac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7f6:	f000 fd6d 	bl	800d2d4 <xTaskResumeAll>
 800c7fa:	1e03      	subs	r3, r0, #0
 800c7fc:	d000      	beq.n	800c800 <xQueueSemaphoreTake+0x154>
 800c7fe:	e779      	b.n	800c6f4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800c800:	f001 fe0e 	bl	800e420 <vPortYield>
 800c804:	e776      	b.n	800c6f4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	0018      	movs	r0, r3
 800c80a:	f000 f94f 	bl	800caac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c80e:	f000 fd61 	bl	800d2d4 <xTaskResumeAll>
 800c812:	e76f      	b.n	800c6f4 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	0018      	movs	r0, r3
 800c818:	f000 f948 	bl	800caac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c81c:	f000 fd5a 	bl	800d2d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	0018      	movs	r0, r3
 800c824:	f000 f9a0 	bl	800cb68 <prvIsQueueEmpty>
 800c828:	1e03      	subs	r3, r0, #0
 800c82a:	d100      	bne.n	800c82e <xQueueSemaphoreTake+0x182>
 800c82c:	e762      	b.n	800c6f4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d010      	beq.n	800c856 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800c834:	f001 fe04 	bl	800e440 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	0018      	movs	r0, r3
 800c83c:	f000 f88f 	bl	800c95e <prvGetDisinheritPriorityAfterTimeout>
 800c840:	0003      	movs	r3, r0
 800c842:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	0011      	movs	r1, r2
 800c84c:	0018      	movs	r0, r3
 800c84e:	f001 f9b1 	bl	800dbb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c852:	f001 fe07 	bl	800e464 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c856:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c858:	0018      	movs	r0, r3
 800c85a:	46bd      	mov	sp, r7
 800c85c:	b00a      	add	sp, #40	; 0x28
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c860:	b590      	push	{r4, r7, lr}
 800c862:	b08b      	sub	sp, #44	; 0x2c
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800c870:	6a3b      	ldr	r3, [r7, #32]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <xQueueReceiveFromISR+0x1a>
 800c876:	b672      	cpsid	i
 800c878:	e7fe      	b.n	800c878 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d103      	bne.n	800c888 <xQueueReceiveFromISR+0x28>
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c884:	2b00      	cmp	r3, #0
 800c886:	d101      	bne.n	800c88c <xQueueReceiveFromISR+0x2c>
 800c888:	2301      	movs	r3, #1
 800c88a:	e000      	b.n	800c88e <xQueueReceiveFromISR+0x2e>
 800c88c:	2300      	movs	r3, #0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d101      	bne.n	800c896 <xQueueReceiveFromISR+0x36>
 800c892:	b672      	cpsid	i
 800c894:	e7fe      	b.n	800c894 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c896:	f001 fdfd 	bl	800e494 <ulSetInterruptMaskFromISR>
 800c89a:	0003      	movs	r3, r0
 800c89c:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c89e:	6a3b      	ldr	r3, [r7, #32]
 800c8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a2:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d032      	beq.n	800c910 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c8aa:	2417      	movs	r4, #23
 800c8ac:	193b      	adds	r3, r7, r4
 800c8ae:	6a3a      	ldr	r2, [r7, #32]
 800c8b0:	2144      	movs	r1, #68	; 0x44
 800c8b2:	5c52      	ldrb	r2, [r2, r1]
 800c8b4:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	0011      	movs	r1, r2
 800c8bc:	0018      	movs	r0, r3
 800c8be:	f000 f8cf 	bl	800ca60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	1e5a      	subs	r2, r3, #1
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c8ca:	193b      	adds	r3, r7, r4
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	b25b      	sxtb	r3, r3
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	d111      	bne.n	800c8f8 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d016      	beq.n	800c90a <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8dc:	6a3b      	ldr	r3, [r7, #32]
 800c8de:	3310      	adds	r3, #16
 800c8e0:	0018      	movs	r0, r3
 800c8e2:	f000 fee3 	bl	800d6ac <xTaskRemoveFromEventList>
 800c8e6:	1e03      	subs	r3, r0, #0
 800c8e8:	d00f      	beq.n	800c90a <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d00c      	beq.n	800c90a <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	601a      	str	r2, [r3, #0]
 800c8f6:	e008      	b.n	800c90a <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c8f8:	2317      	movs	r3, #23
 800c8fa:	18fb      	adds	r3, r7, r3
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	3301      	adds	r3, #1
 800c900:	b2db      	uxtb	r3, r3
 800c902:	b259      	sxtb	r1, r3
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	2244      	movs	r2, #68	; 0x44
 800c908:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800c90a:	2301      	movs	r3, #1
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
 800c90e:	e001      	b.n	800c914 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 800c910:	2300      	movs	r3, #0
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	0018      	movs	r0, r3
 800c918:	f001 fdc2 	bl	800e4a0 <vClearInterruptMaskFromISR>

	return xReturn;
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c91e:	0018      	movs	r0, r3
 800c920:	46bd      	mov	sp, r7
 800c922:	b00b      	add	sp, #44	; 0x2c
 800c924:	bd90      	pop	{r4, r7, pc}

0800c926 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b084      	sub	sp, #16
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <vQueueDelete+0x16>
 800c938:	b672      	cpsid	i
 800c93a:	e7fe      	b.n	800c93a <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	0018      	movs	r0, r3
 800c940:	f000 f968 	bl	800cc14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2246      	movs	r2, #70	; 0x46
 800c948:	5c9b      	ldrb	r3, [r3, r2]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d103      	bne.n	800c956 <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	0018      	movs	r0, r3
 800c952:	f001 feb3 	bl	800e6bc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c956:	46c0      	nop			; (mov r8, r8)
 800c958:	46bd      	mov	sp, r7
 800c95a:	b004      	add	sp, #16
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b084      	sub	sp, #16
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d006      	beq.n	800c97c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2238      	movs	r2, #56	; 0x38
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	60fb      	str	r3, [r7, #12]
 800c97a:	e001      	b.n	800c980 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c97c:	2300      	movs	r3, #0
 800c97e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c980:	68fb      	ldr	r3, [r7, #12]
	}
 800c982:	0018      	movs	r0, r3
 800c984:	46bd      	mov	sp, r7
 800c986:	b004      	add	sp, #16
 800c988:	bd80      	pop	{r7, pc}

0800c98a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b086      	sub	sp, #24
 800c98e:	af00      	add	r7, sp, #0
 800c990:	60f8      	str	r0, [r7, #12]
 800c992:	60b9      	str	r1, [r7, #8]
 800c994:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c996:	2300      	movs	r3, #0
 800c998:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c99e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10e      	bne.n	800c9c6 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d14e      	bne.n	800ca4e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	0018      	movs	r0, r3
 800c9b6:	f001 f8a1 	bl	800dafc <xTaskPriorityDisinherit>
 800c9ba:	0003      	movs	r3, r0
 800c9bc:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	605a      	str	r2, [r3, #4]
 800c9c4:	e043      	b.n	800ca4e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d119      	bne.n	800ca00 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6898      	ldr	r0, [r3, #8]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	0019      	movs	r1, r3
 800c9d8:	f001 ff9a 	bl	800e910 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	689a      	ldr	r2, [r3, #8]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e4:	18d2      	adds	r2, r2, r3
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	689a      	ldr	r2, [r3, #8]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d32b      	bcc.n	800ca4e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	609a      	str	r2, [r3, #8]
 800c9fe:	e026      	b.n	800ca4e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	68d8      	ldr	r0, [r3, #12]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	0019      	movs	r1, r3
 800ca0c:	f001 ff80 	bl	800e910 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	68da      	ldr	r2, [r3, #12]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca18:	425b      	negs	r3, r3
 800ca1a:	18d2      	adds	r2, r2, r3
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	68da      	ldr	r2, [r3, #12]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d207      	bcs.n	800ca3c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca34:	425b      	negs	r3, r3
 800ca36:	18d2      	adds	r2, r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d105      	bne.n	800ca4e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d002      	beq.n	800ca4e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	1c5a      	adds	r2, r3, #1
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca56:	697b      	ldr	r3, [r7, #20]
}
 800ca58:	0018      	movs	r0, r3
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	b006      	add	sp, #24
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d018      	beq.n	800caa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68da      	ldr	r2, [r3, #12]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7a:	18d2      	adds	r2, r2, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68da      	ldr	r2, [r3, #12]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d303      	bcc.n	800ca94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	68d9      	ldr	r1, [r3, #12]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	0018      	movs	r0, r3
 800caa0:	f001 ff36 	bl	800e910 <memcpy>
	}
}
 800caa4:	46c0      	nop			; (mov r8, r8)
 800caa6:	46bd      	mov	sp, r7
 800caa8:	b002      	add	sp, #8
 800caaa:	bd80      	pop	{r7, pc}

0800caac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cab4:	f001 fcc4 	bl	800e440 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cab8:	230f      	movs	r3, #15
 800caba:	18fb      	adds	r3, r7, r3
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	2145      	movs	r1, #69	; 0x45
 800cac0:	5c52      	ldrb	r2, [r2, r1]
 800cac2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cac4:	e013      	b.n	800caee <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d016      	beq.n	800cafc <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	3324      	adds	r3, #36	; 0x24
 800cad2:	0018      	movs	r0, r3
 800cad4:	f000 fdea 	bl	800d6ac <xTaskRemoveFromEventList>
 800cad8:	1e03      	subs	r3, r0, #0
 800cada:	d001      	beq.n	800cae0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cadc:	f000 fea6 	bl	800d82c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cae0:	210f      	movs	r1, #15
 800cae2:	187b      	adds	r3, r7, r1
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	3b01      	subs	r3, #1
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	187b      	adds	r3, r7, r1
 800caec:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caee:	230f      	movs	r3, #15
 800caf0:	18fb      	adds	r3, r7, r3
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	b25b      	sxtb	r3, r3
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	dce5      	bgt.n	800cac6 <prvUnlockQueue+0x1a>
 800cafa:	e000      	b.n	800cafe <prvUnlockQueue+0x52>
					break;
 800cafc:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2245      	movs	r2, #69	; 0x45
 800cb02:	21ff      	movs	r1, #255	; 0xff
 800cb04:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800cb06:	f001 fcad 	bl	800e464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb0a:	f001 fc99 	bl	800e440 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb0e:	230e      	movs	r3, #14
 800cb10:	18fb      	adds	r3, r7, r3
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	2144      	movs	r1, #68	; 0x44
 800cb16:	5c52      	ldrb	r2, [r2, r1]
 800cb18:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb1a:	e013      	b.n	800cb44 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d016      	beq.n	800cb52 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	3310      	adds	r3, #16
 800cb28:	0018      	movs	r0, r3
 800cb2a:	f000 fdbf 	bl	800d6ac <xTaskRemoveFromEventList>
 800cb2e:	1e03      	subs	r3, r0, #0
 800cb30:	d001      	beq.n	800cb36 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800cb32:	f000 fe7b 	bl	800d82c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb36:	210e      	movs	r1, #14
 800cb38:	187b      	adds	r3, r7, r1
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	187b      	adds	r3, r7, r1
 800cb42:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb44:	230e      	movs	r3, #14
 800cb46:	18fb      	adds	r3, r7, r3
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	b25b      	sxtb	r3, r3
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dce5      	bgt.n	800cb1c <prvUnlockQueue+0x70>
 800cb50:	e000      	b.n	800cb54 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800cb52:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2244      	movs	r2, #68	; 0x44
 800cb58:	21ff      	movs	r1, #255	; 0xff
 800cb5a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800cb5c:	f001 fc82 	bl	800e464 <vPortExitCritical>
}
 800cb60:	46c0      	nop			; (mov r8, r8)
 800cb62:	46bd      	mov	sp, r7
 800cb64:	b004      	add	sp, #16
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb70:	f001 fc66 	bl	800e440 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d102      	bne.n	800cb82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	60fb      	str	r3, [r7, #12]
 800cb80:	e001      	b.n	800cb86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb82:	2300      	movs	r3, #0
 800cb84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb86:	f001 fc6d 	bl	800e464 <vPortExitCritical>

	return xReturn;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
}
 800cb8c:	0018      	movs	r0, r3
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	b004      	add	sp, #16
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb9c:	f001 fc50 	bl	800e440 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d102      	bne.n	800cbb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbac:	2301      	movs	r3, #1
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	e001      	b.n	800cbb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbb6:	f001 fc55 	bl	800e464 <vPortExitCritical>

	return xReturn;
 800cbba:	68fb      	ldr	r3, [r7, #12]
}
 800cbbc:	0018      	movs	r0, r3
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	b004      	add	sp, #16
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60fb      	str	r3, [r7, #12]
 800cbd2:	e015      	b.n	800cc00 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cbd4:	4b0e      	ldr	r3, [pc, #56]	; (800cc10 <vQueueAddToRegistry+0x4c>)
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	00d2      	lsls	r2, r2, #3
 800cbda:	58d3      	ldr	r3, [r2, r3]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10c      	bne.n	800cbfa <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cbe0:	4b0b      	ldr	r3, [pc, #44]	; (800cc10 <vQueueAddToRegistry+0x4c>)
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	00d2      	lsls	r2, r2, #3
 800cbe6:	6839      	ldr	r1, [r7, #0]
 800cbe8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cbea:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <vQueueAddToRegistry+0x4c>)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	18d3      	adds	r3, r2, r3
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cbf8:	e005      	b.n	800cc06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	60fb      	str	r3, [r7, #12]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b07      	cmp	r3, #7
 800cc04:	d9e6      	bls.n	800cbd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc06:	46c0      	nop			; (mov r8, r8)
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	b004      	add	sp, #16
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	46c0      	nop			; (mov r8, r8)
 800cc10:	200034cc 	.word	0x200034cc

0800cc14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	60fb      	str	r3, [r7, #12]
 800cc20:	e018      	b.n	800cc54 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cc22:	4a10      	ldr	r2, [pc, #64]	; (800cc64 <vQueueUnregisterQueue+0x50>)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	18d3      	adds	r3, r2, r3
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d10c      	bne.n	800cc4e <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cc34:	4b0b      	ldr	r3, [pc, #44]	; (800cc64 <vQueueUnregisterQueue+0x50>)
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	00d2      	lsls	r2, r2, #3
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cc3e:	4a09      	ldr	r2, [pc, #36]	; (800cc64 <vQueueUnregisterQueue+0x50>)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	18d3      	adds	r3, r2, r3
 800cc46:	3304      	adds	r3, #4
 800cc48:	2200      	movs	r2, #0
 800cc4a:	601a      	str	r2, [r3, #0]
				break;
 800cc4c:	e005      	b.n	800cc5a <vQueueUnregisterQueue+0x46>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3301      	adds	r3, #1
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2b07      	cmp	r3, #7
 800cc58:	d9e3      	bls.n	800cc22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cc5a:	46c0      	nop			; (mov r8, r8)
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	b004      	add	sp, #16
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	46c0      	nop			; (mov r8, r8)
 800cc64:	200034cc 	.word	0x200034cc

0800cc68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc78:	f001 fbe2 	bl	800e440 <vPortEnterCritical>
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	2244      	movs	r2, #68	; 0x44
 800cc80:	5c9b      	ldrb	r3, [r3, r2]
 800cc82:	b25b      	sxtb	r3, r3
 800cc84:	3301      	adds	r3, #1
 800cc86:	d103      	bne.n	800cc90 <vQueueWaitForMessageRestricted+0x28>
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	2244      	movs	r2, #68	; 0x44
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	5499      	strb	r1, [r3, r2]
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	2245      	movs	r2, #69	; 0x45
 800cc94:	5c9b      	ldrb	r3, [r3, r2]
 800cc96:	b25b      	sxtb	r3, r3
 800cc98:	3301      	adds	r3, #1
 800cc9a:	d103      	bne.n	800cca4 <vQueueWaitForMessageRestricted+0x3c>
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2245      	movs	r2, #69	; 0x45
 800cca0:	2100      	movs	r1, #0
 800cca2:	5499      	strb	r1, [r3, r2]
 800cca4:	f001 fbde 	bl	800e464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d106      	bne.n	800ccbe <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	3324      	adds	r3, #36	; 0x24
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	68b9      	ldr	r1, [r7, #8]
 800ccb8:	0018      	movs	r0, r3
 800ccba:	f000 fcd1 	bl	800d660 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	0018      	movs	r0, r3
 800ccc2:	f7ff fef3 	bl	800caac <prvUnlockQueue>
	}
 800ccc6:	46c0      	nop			; (mov r8, r8)
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	b006      	add	sp, #24
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ccce:	b590      	push	{r4, r7, lr}
 800ccd0:	b08d      	sub	sp, #52	; 0x34
 800ccd2:	af04      	add	r7, sp, #16
 800ccd4:	60f8      	str	r0, [r7, #12]
 800ccd6:	60b9      	str	r1, [r7, #8]
 800ccd8:	607a      	str	r2, [r7, #4]
 800ccda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ccdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d101      	bne.n	800cce6 <xTaskCreateStatic+0x18>
 800cce2:	b672      	cpsid	i
 800cce4:	e7fe      	b.n	800cce4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d101      	bne.n	800ccf0 <xTaskCreateStatic+0x22>
 800ccec:	b672      	cpsid	i
 800ccee:	e7fe      	b.n	800ccee <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ccf0:	23bc      	movs	r3, #188	; 0xbc
 800ccf2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2bbc      	cmp	r3, #188	; 0xbc
 800ccf8:	d001      	beq.n	800ccfe <xTaskCreateStatic+0x30>
 800ccfa:	b672      	cpsid	i
 800ccfc:	e7fe      	b.n	800ccfc <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ccfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d020      	beq.n	800cd46 <xTaskCreateStatic+0x78>
 800cd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d01d      	beq.n	800cd46 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd12:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	22b9      	movs	r2, #185	; 0xb9
 800cd18:	2102      	movs	r1, #2
 800cd1a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd1c:	683c      	ldr	r4, [r7, #0]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	68b9      	ldr	r1, [r7, #8]
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	2300      	movs	r3, #0
 800cd26:	9303      	str	r3, [sp, #12]
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	9302      	str	r3, [sp, #8]
 800cd2c:	2318      	movs	r3, #24
 800cd2e:	18fb      	adds	r3, r7, r3
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	0023      	movs	r3, r4
 800cd38:	f000 f858 	bl	800cdec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	0018      	movs	r0, r3
 800cd40:	f000 f8ec 	bl	800cf1c <prvAddNewTaskToReadyList>
 800cd44:	e001      	b.n	800cd4a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd4a:	69bb      	ldr	r3, [r7, #24]
	}
 800cd4c:	0018      	movs	r0, r3
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	b009      	add	sp, #36	; 0x24
 800cd52:	bd90      	pop	{r4, r7, pc}

0800cd54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd54:	b590      	push	{r4, r7, lr}
 800cd56:	b08d      	sub	sp, #52	; 0x34
 800cd58:	af04      	add	r7, sp, #16
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	603b      	str	r3, [r7, #0]
 800cd60:	1dbb      	adds	r3, r7, #6
 800cd62:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd64:	1dbb      	adds	r3, r7, #6
 800cd66:	881b      	ldrh	r3, [r3, #0]
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	0018      	movs	r0, r3
 800cd6c:	f001 fc00 	bl	800e570 <pvPortMalloc>
 800cd70:	0003      	movs	r3, r0
 800cd72:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d010      	beq.n	800cd9c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800cd7a:	20bc      	movs	r0, #188	; 0xbc
 800cd7c:	f001 fbf8 	bl	800e570 <pvPortMalloc>
 800cd80:	0003      	movs	r3, r0
 800cd82:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d003      	beq.n	800cd92 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	697a      	ldr	r2, [r7, #20]
 800cd8e:	631a      	str	r2, [r3, #48]	; 0x30
 800cd90:	e006      	b.n	800cda0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	0018      	movs	r0, r3
 800cd96:	f001 fc91 	bl	800e6bc <vPortFree>
 800cd9a:	e001      	b.n	800cda0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d01a      	beq.n	800cddc <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	22b9      	movs	r2, #185	; 0xb9
 800cdaa:	2100      	movs	r1, #0
 800cdac:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cdae:	1dbb      	adds	r3, r7, #6
 800cdb0:	881a      	ldrh	r2, [r3, #0]
 800cdb2:	683c      	ldr	r4, [r7, #0]
 800cdb4:	68b9      	ldr	r1, [r7, #8]
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	2300      	movs	r3, #0
 800cdba:	9303      	str	r3, [sp, #12]
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	9302      	str	r3, [sp, #8]
 800cdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc2:	9301      	str	r3, [sp, #4]
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	0023      	movs	r3, r4
 800cdca:	f000 f80f 	bl	800cdec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	0018      	movs	r0, r3
 800cdd2:	f000 f8a3 	bl	800cf1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	61bb      	str	r3, [r7, #24]
 800cdda:	e002      	b.n	800cde2 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cddc:	2301      	movs	r3, #1
 800cdde:	425b      	negs	r3, r3
 800cde0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cde2:	69bb      	ldr	r3, [r7, #24]
	}
 800cde4:	0018      	movs	r0, r3
 800cde6:	46bd      	mov	sp, r7
 800cde8:	b009      	add	sp, #36	; 0x24
 800cdea:	bd90      	pop	{r4, r7, pc}

0800cdec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	001a      	movs	r2, r3
 800ce04:	21a5      	movs	r1, #165	; 0xa5
 800ce06:	f001 fd9f 	bl	800e948 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	493e      	ldr	r1, [pc, #248]	; (800cf0c <prvInitialiseNewTask+0x120>)
 800ce12:	468c      	mov	ip, r1
 800ce14:	4463      	add	r3, ip
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	18d3      	adds	r3, r2, r3
 800ce1a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	2207      	movs	r2, #7
 800ce20:	4393      	bics	r3, r2
 800ce22:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	2207      	movs	r2, #7
 800ce28:	4013      	ands	r3, r2
 800ce2a:	d001      	beq.n	800ce30 <prvInitialiseNewTask+0x44>
 800ce2c:	b672      	cpsid	i
 800ce2e:	e7fe      	b.n	800ce2e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce30:	2300      	movs	r3, #0
 800ce32:	617b      	str	r3, [r7, #20]
 800ce34:	e013      	b.n	800ce5e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	18d3      	adds	r3, r2, r3
 800ce3c:	7818      	ldrb	r0, [r3, #0]
 800ce3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce40:	2134      	movs	r1, #52	; 0x34
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	18d3      	adds	r3, r2, r3
 800ce46:	185b      	adds	r3, r3, r1
 800ce48:	1c02      	adds	r2, r0, #0
 800ce4a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	18d3      	adds	r3, r2, r3
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d006      	beq.n	800ce66 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	617b      	str	r3, [r7, #20]
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	2b0f      	cmp	r3, #15
 800ce62:	d9e8      	bls.n	800ce36 <prvInitialiseNewTask+0x4a>
 800ce64:	e000      	b.n	800ce68 <prvInitialiseNewTask+0x7c>
		{
			break;
 800ce66:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	2243      	movs	r2, #67	; 0x43
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce70:	6a3b      	ldr	r3, [r7, #32]
 800ce72:	2b37      	cmp	r3, #55	; 0x37
 800ce74:	d901      	bls.n	800ce7a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce76:	2337      	movs	r3, #55	; 0x37
 800ce78:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7c:	6a3a      	ldr	r2, [r7, #32]
 800ce7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce82:	6a3a      	ldr	r2, [r7, #32]
 800ce84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ce86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce88:	2200      	movs	r2, #0
 800ce8a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	3304      	adds	r3, #4
 800ce90:	0018      	movs	r0, r3
 800ce92:	f7fe ffeb 	bl	800be6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	3318      	adds	r3, #24
 800ce9a:	0018      	movs	r0, r3
 800ce9c:	f7fe ffe6 	bl	800be6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cea4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	2238      	movs	r2, #56	; 0x38
 800ceaa:	1ad2      	subs	r2, r2, r3
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceb4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb8:	22b4      	movs	r2, #180	; 0xb4
 800ceba:	2100      	movs	r1, #0
 800cebc:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	22b8      	movs	r2, #184	; 0xb8
 800cec2:	2100      	movs	r1, #0
 800cec4:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec8:	3354      	adds	r3, #84	; 0x54
 800ceca:	2260      	movs	r2, #96	; 0x60
 800cecc:	2100      	movs	r1, #0
 800cece:	0018      	movs	r0, r3
 800ced0:	f001 fd3a 	bl	800e948 <memset>
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	4a0e      	ldr	r2, [pc, #56]	; (800cf10 <prvInitialiseNewTask+0x124>)
 800ced8:	659a      	str	r2, [r3, #88]	; 0x58
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	4a0d      	ldr	r2, [pc, #52]	; (800cf14 <prvInitialiseNewTask+0x128>)
 800cede:	65da      	str	r2, [r3, #92]	; 0x5c
 800cee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee2:	4a0d      	ldr	r2, [pc, #52]	; (800cf18 <prvInitialiseNewTask+0x12c>)
 800cee4:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cee6:	683a      	ldr	r2, [r7, #0]
 800cee8:	68f9      	ldr	r1, [r7, #12]
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	0018      	movs	r0, r3
 800ceee:	f001 fa11 	bl	800e314 <pxPortInitialiseStack>
 800cef2:	0002      	movs	r2, r0
 800cef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d002      	beq.n	800cf04 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf04:	46c0      	nop			; (mov r8, r8)
 800cf06:	46bd      	mov	sp, r7
 800cf08:	b006      	add	sp, #24
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	3fffffff 	.word	0x3fffffff
 800cf10:	0800fec0 	.word	0x0800fec0
 800cf14:	0800fee0 	.word	0x0800fee0
 800cf18:	0800fea0 	.word	0x0800fea0

0800cf1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf24:	f001 fa8c 	bl	800e440 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf28:	4b2a      	ldr	r3, [pc, #168]	; (800cfd4 <prvAddNewTaskToReadyList+0xb8>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	1c5a      	adds	r2, r3, #1
 800cf2e:	4b29      	ldr	r3, [pc, #164]	; (800cfd4 <prvAddNewTaskToReadyList+0xb8>)
 800cf30:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800cf32:	4b29      	ldr	r3, [pc, #164]	; (800cfd8 <prvAddNewTaskToReadyList+0xbc>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d109      	bne.n	800cf4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf3a:	4b27      	ldr	r3, [pc, #156]	; (800cfd8 <prvAddNewTaskToReadyList+0xbc>)
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf40:	4b24      	ldr	r3, [pc, #144]	; (800cfd4 <prvAddNewTaskToReadyList+0xb8>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d110      	bne.n	800cf6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf48:	f000 fc8a 	bl	800d860 <prvInitialiseTaskLists>
 800cf4c:	e00d      	b.n	800cf6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cf4e:	4b23      	ldr	r3, [pc, #140]	; (800cfdc <prvAddNewTaskToReadyList+0xc0>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d109      	bne.n	800cf6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf56:	4b20      	ldr	r3, [pc, #128]	; (800cfd8 <prvAddNewTaskToReadyList+0xbc>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d802      	bhi.n	800cf6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf64:	4b1c      	ldr	r3, [pc, #112]	; (800cfd8 <prvAddNewTaskToReadyList+0xbc>)
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf6a:	4b1d      	ldr	r3, [pc, #116]	; (800cfe0 <prvAddNewTaskToReadyList+0xc4>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	1c5a      	adds	r2, r3, #1
 800cf70:	4b1b      	ldr	r3, [pc, #108]	; (800cfe0 <prvAddNewTaskToReadyList+0xc4>)
 800cf72:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cf74:	4b1a      	ldr	r3, [pc, #104]	; (800cfe0 <prvAddNewTaskToReadyList+0xc4>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf80:	4b18      	ldr	r3, [pc, #96]	; (800cfe4 <prvAddNewTaskToReadyList+0xc8>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d903      	bls.n	800cf90 <prvAddNewTaskToReadyList+0x74>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf8c:	4b15      	ldr	r3, [pc, #84]	; (800cfe4 <prvAddNewTaskToReadyList+0xc8>)
 800cf8e:	601a      	str	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf94:	0013      	movs	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	189b      	adds	r3, r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	4a12      	ldr	r2, [pc, #72]	; (800cfe8 <prvAddNewTaskToReadyList+0xcc>)
 800cf9e:	189a      	adds	r2, r3, r2
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	0019      	movs	r1, r3
 800cfa6:	0010      	movs	r0, r2
 800cfa8:	f7fe ff6b 	bl	800be82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cfac:	f001 fa5a 	bl	800e464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cfb0:	4b0a      	ldr	r3, [pc, #40]	; (800cfdc <prvAddNewTaskToReadyList+0xc0>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d008      	beq.n	800cfca <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cfb8:	4b07      	ldr	r3, [pc, #28]	; (800cfd8 <prvAddNewTaskToReadyList+0xbc>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d201      	bcs.n	800cfca <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cfc6:	f001 fa2b 	bl	800e420 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfca:	46c0      	nop			; (mov r8, r8)
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	b002      	add	sp, #8
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	46c0      	nop			; (mov r8, r8)
 800cfd4:	20001110 	.word	0x20001110
 800cfd8:	20000c3c 	.word	0x20000c3c
 800cfdc:	2000111c 	.word	0x2000111c
 800cfe0:	2000112c 	.word	0x2000112c
 800cfe4:	20001118 	.word	0x20001118
 800cfe8:	20000c40 	.word	0x20000c40

0800cfec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cff4:	2300      	movs	r3, #0
 800cff6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d010      	beq.n	800d020 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cffe:	4b0d      	ldr	r3, [pc, #52]	; (800d034 <vTaskDelay+0x48>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <vTaskDelay+0x1e>
 800d006:	b672      	cpsid	i
 800d008:	e7fe      	b.n	800d008 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800d00a:	f000 f957 	bl	800d2bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2100      	movs	r1, #0
 800d012:	0018      	movs	r0, r3
 800d014:	f000 fe54 	bl	800dcc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d018:	f000 f95c 	bl	800d2d4 <xTaskResumeAll>
 800d01c:	0003      	movs	r3, r0
 800d01e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d101      	bne.n	800d02a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800d026:	f001 f9fb 	bl	800e420 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d02a:	46c0      	nop			; (mov r8, r8)
 800d02c:	46bd      	mov	sp, r7
 800d02e:	b004      	add	sp, #16
 800d030:	bd80      	pop	{r7, pc}
 800d032:	46c0      	nop			; (mov r8, r8)
 800d034:	20001138 	.word	0x20001138

0800d038 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d040:	f001 f9fe 	bl	800e440 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d102      	bne.n	800d050 <vTaskSuspend+0x18>
 800d04a:	4b29      	ldr	r3, [pc, #164]	; (800d0f0 <vTaskSuspend+0xb8>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	e000      	b.n	800d052 <vTaskSuspend+0x1a>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3304      	adds	r3, #4
 800d058:	0018      	movs	r0, r3
 800d05a:	f7fe ff6a 	bl	800bf32 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d062:	2b00      	cmp	r3, #0
 800d064:	d004      	beq.n	800d070 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3318      	adds	r3, #24
 800d06a:	0018      	movs	r0, r3
 800d06c:	f7fe ff61 	bl	800bf32 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	1d1a      	adds	r2, r3, #4
 800d074:	4b1f      	ldr	r3, [pc, #124]	; (800d0f4 <vTaskSuspend+0xbc>)
 800d076:	0011      	movs	r1, r2
 800d078:	0018      	movs	r0, r3
 800d07a:	f7fe ff02 	bl	800be82 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	22b8      	movs	r2, #184	; 0xb8
 800d082:	5c9b      	ldrb	r3, [r3, r2]
 800d084:	b2db      	uxtb	r3, r3
 800d086:	2b01      	cmp	r3, #1
 800d088:	d103      	bne.n	800d092 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	22b8      	movs	r2, #184	; 0xb8
 800d08e:	2100      	movs	r1, #0
 800d090:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d092:	f001 f9e7 	bl	800e464 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d096:	4b18      	ldr	r3, [pc, #96]	; (800d0f8 <vTaskSuspend+0xc0>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d005      	beq.n	800d0aa <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d09e:	f001 f9cf 	bl	800e440 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d0a2:	f000 fc7d 	bl	800d9a0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d0a6:	f001 f9dd 	bl	800e464 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d0aa:	4b11      	ldr	r3, [pc, #68]	; (800d0f0 <vTaskSuspend+0xb8>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d118      	bne.n	800d0e6 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 800d0b4:	4b10      	ldr	r3, [pc, #64]	; (800d0f8 <vTaskSuspend+0xc0>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d008      	beq.n	800d0ce <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d0bc:	4b0f      	ldr	r3, [pc, #60]	; (800d0fc <vTaskSuspend+0xc4>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d001      	beq.n	800d0c8 <vTaskSuspend+0x90>
 800d0c4:	b672      	cpsid	i
 800d0c6:	e7fe      	b.n	800d0c6 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 800d0c8:	f001 f9aa 	bl	800e420 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0cc:	e00b      	b.n	800d0e6 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800d0ce:	4b09      	ldr	r3, [pc, #36]	; (800d0f4 <vTaskSuspend+0xbc>)
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	4b0b      	ldr	r3, [pc, #44]	; (800d100 <vTaskSuspend+0xc8>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d103      	bne.n	800d0e2 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 800d0da:	4b05      	ldr	r3, [pc, #20]	; (800d0f0 <vTaskSuspend+0xb8>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	601a      	str	r2, [r3, #0]
	}
 800d0e0:	e001      	b.n	800d0e6 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 800d0e2:	f000 fa45 	bl	800d570 <vTaskSwitchContext>
	}
 800d0e6:	46c0      	nop			; (mov r8, r8)
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	b004      	add	sp, #16
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	46c0      	nop			; (mov r8, r8)
 800d0f0:	20000c3c 	.word	0x20000c3c
 800d0f4:	200010fc 	.word	0x200010fc
 800d0f8:	2000111c 	.word	0x2000111c
 800d0fc:	20001138 	.word	0x20001138
 800d100:	20001110 	.word	0x20001110

0800d104 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d10c:	2300      	movs	r3, #0
 800d10e:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <prvTaskIsTaskSuspended+0x1a>
 800d11a:	b672      	cpsid	i
 800d11c:	e7fe      	b.n	800d11c <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	695a      	ldr	r2, [r3, #20]
 800d122:	4b0e      	ldr	r3, [pc, #56]	; (800d15c <prvTaskIsTaskSuspended+0x58>)
 800d124:	429a      	cmp	r2, r3
 800d126:	d101      	bne.n	800d12c <prvTaskIsTaskSuspended+0x28>
 800d128:	2301      	movs	r3, #1
 800d12a:	e000      	b.n	800d12e <prvTaskIsTaskSuspended+0x2a>
 800d12c:	2300      	movs	r3, #0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00f      	beq.n	800d152 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d136:	4b0a      	ldr	r3, [pc, #40]	; (800d160 <prvTaskIsTaskSuspended+0x5c>)
 800d138:	429a      	cmp	r2, r3
 800d13a:	d00a      	beq.n	800d152 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d140:	2b00      	cmp	r3, #0
 800d142:	d101      	bne.n	800d148 <prvTaskIsTaskSuspended+0x44>
 800d144:	2301      	movs	r3, #1
 800d146:	e000      	b.n	800d14a <prvTaskIsTaskSuspended+0x46>
 800d148:	2300      	movs	r3, #0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d001      	beq.n	800d152 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800d14e:	2301      	movs	r3, #1
 800d150:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d152:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d154:	0018      	movs	r0, r3
 800d156:	46bd      	mov	sp, r7
 800d158:	b004      	add	sp, #16
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	200010fc 	.word	0x200010fc
 800d160:	200010d0 	.word	0x200010d0

0800d164 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <vTaskResume+0x16>
 800d176:	b672      	cpsid	i
 800d178:	e7fe      	b.n	800d178 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d034      	beq.n	800d1ea <vTaskResume+0x86>
 800d180:	4b1c      	ldr	r3, [pc, #112]	; (800d1f4 <vTaskResume+0x90>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	429a      	cmp	r2, r3
 800d188:	d02f      	beq.n	800d1ea <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 800d18a:	f001 f959 	bl	800e440 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	0018      	movs	r0, r3
 800d192:	f7ff ffb7 	bl	800d104 <prvTaskIsTaskSuspended>
 800d196:	1e03      	subs	r3, r0, #0
 800d198:	d025      	beq.n	800d1e6 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	3304      	adds	r3, #4
 800d19e:	0018      	movs	r0, r3
 800d1a0:	f7fe fec7 	bl	800bf32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a8:	4b13      	ldr	r3, [pc, #76]	; (800d1f8 <vTaskResume+0x94>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d903      	bls.n	800d1b8 <vTaskResume+0x54>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b4:	4b10      	ldr	r3, [pc, #64]	; (800d1f8 <vTaskResume+0x94>)
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1bc:	0013      	movs	r3, r2
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	189b      	adds	r3, r3, r2
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	4a0d      	ldr	r2, [pc, #52]	; (800d1fc <vTaskResume+0x98>)
 800d1c6:	189a      	adds	r2, r3, r2
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	0019      	movs	r1, r3
 800d1ce:	0010      	movs	r0, r2
 800d1d0:	f7fe fe57 	bl	800be82 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d8:	4b06      	ldr	r3, [pc, #24]	; (800d1f4 <vTaskResume+0x90>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d301      	bcc.n	800d1e6 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d1e2:	f001 f91d 	bl	800e420 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d1e6:	f001 f93d 	bl	800e464 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1ea:	46c0      	nop			; (mov r8, r8)
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	b004      	add	sp, #16
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	46c0      	nop			; (mov r8, r8)
 800d1f4:	20000c3c 	.word	0x20000c3c
 800d1f8:	20001118 	.word	0x20001118
 800d1fc:	20000c40 	.word	0x20000c40

0800d200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d200:	b590      	push	{r4, r7, lr}
 800d202:	b089      	sub	sp, #36	; 0x24
 800d204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d206:	2300      	movs	r3, #0
 800d208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d20e:	003a      	movs	r2, r7
 800d210:	1d39      	adds	r1, r7, #4
 800d212:	2308      	movs	r3, #8
 800d214:	18fb      	adds	r3, r7, r3
 800d216:	0018      	movs	r0, r3
 800d218:	f7fe fdda 	bl	800bdd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d21c:	683c      	ldr	r4, [r7, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68ba      	ldr	r2, [r7, #8]
 800d222:	491e      	ldr	r1, [pc, #120]	; (800d29c <vTaskStartScheduler+0x9c>)
 800d224:	481e      	ldr	r0, [pc, #120]	; (800d2a0 <vTaskStartScheduler+0xa0>)
 800d226:	9202      	str	r2, [sp, #8]
 800d228:	9301      	str	r3, [sp, #4]
 800d22a:	2300      	movs	r3, #0
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	2300      	movs	r3, #0
 800d230:	0022      	movs	r2, r4
 800d232:	f7ff fd4c 	bl	800ccce <xTaskCreateStatic>
 800d236:	0002      	movs	r2, r0
 800d238:	4b1a      	ldr	r3, [pc, #104]	; (800d2a4 <vTaskStartScheduler+0xa4>)
 800d23a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d23c:	4b19      	ldr	r3, [pc, #100]	; (800d2a4 <vTaskStartScheduler+0xa4>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d002      	beq.n	800d24a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d244:	2301      	movs	r3, #1
 800d246:	60fb      	str	r3, [r7, #12]
 800d248:	e001      	b.n	800d24e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2b01      	cmp	r3, #1
 800d252:	d103      	bne.n	800d25c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800d254:	f000 fd88 	bl	800dd68 <xTimerCreateTimerTask>
 800d258:	0003      	movs	r3, r0
 800d25a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d113      	bne.n	800d28a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800d262:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d264:	4b10      	ldr	r3, [pc, #64]	; (800d2a8 <vTaskStartScheduler+0xa8>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3354      	adds	r3, #84	; 0x54
 800d26a:	001a      	movs	r2, r3
 800d26c:	4b0f      	ldr	r3, [pc, #60]	; (800d2ac <vTaskStartScheduler+0xac>)
 800d26e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d270:	4b0f      	ldr	r3, [pc, #60]	; (800d2b0 <vTaskStartScheduler+0xb0>)
 800d272:	2201      	movs	r2, #1
 800d274:	4252      	negs	r2, r2
 800d276:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d278:	4b0e      	ldr	r3, [pc, #56]	; (800d2b4 <vTaskStartScheduler+0xb4>)
 800d27a:	2201      	movs	r2, #1
 800d27c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d27e:	4b0e      	ldr	r3, [pc, #56]	; (800d2b8 <vTaskStartScheduler+0xb8>)
 800d280:	2200      	movs	r2, #0
 800d282:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d284:	f001 f8a8 	bl	800e3d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d288:	e004      	b.n	800d294 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	3301      	adds	r3, #1
 800d28e:	d101      	bne.n	800d294 <vTaskStartScheduler+0x94>
 800d290:	b672      	cpsid	i
 800d292:	e7fe      	b.n	800d292 <vTaskStartScheduler+0x92>
}
 800d294:	46c0      	nop			; (mov r8, r8)
 800d296:	46bd      	mov	sp, r7
 800d298:	b005      	add	sp, #20
 800d29a:	bd90      	pop	{r4, r7, pc}
 800d29c:	0800f338 	.word	0x0800f338
 800d2a0:	0800d841 	.word	0x0800d841
 800d2a4:	20001134 	.word	0x20001134
 800d2a8:	20000c3c 	.word	0x20000c3c
 800d2ac:	20000030 	.word	0x20000030
 800d2b0:	20001130 	.word	0x20001130
 800d2b4:	2000111c 	.word	0x2000111c
 800d2b8:	20001114 	.word	0x20001114

0800d2bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d2c0:	4b03      	ldr	r3, [pc, #12]	; (800d2d0 <vTaskSuspendAll+0x14>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	4b02      	ldr	r3, [pc, #8]	; (800d2d0 <vTaskSuspendAll+0x14>)
 800d2c8:	601a      	str	r2, [r3, #0]
}
 800d2ca:	46c0      	nop			; (mov r8, r8)
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	20001138 	.word	0x20001138

0800d2d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d2e2:	4b3a      	ldr	r3, [pc, #232]	; (800d3cc <xTaskResumeAll+0xf8>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d101      	bne.n	800d2ee <xTaskResumeAll+0x1a>
 800d2ea:	b672      	cpsid	i
 800d2ec:	e7fe      	b.n	800d2ec <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d2ee:	f001 f8a7 	bl	800e440 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d2f2:	4b36      	ldr	r3, [pc, #216]	; (800d3cc <xTaskResumeAll+0xf8>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	1e5a      	subs	r2, r3, #1
 800d2f8:	4b34      	ldr	r3, [pc, #208]	; (800d3cc <xTaskResumeAll+0xf8>)
 800d2fa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2fc:	4b33      	ldr	r3, [pc, #204]	; (800d3cc <xTaskResumeAll+0xf8>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d15b      	bne.n	800d3bc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d304:	4b32      	ldr	r3, [pc, #200]	; (800d3d0 <xTaskResumeAll+0xfc>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d057      	beq.n	800d3bc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d30c:	e02f      	b.n	800d36e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d30e:	4b31      	ldr	r3, [pc, #196]	; (800d3d4 <xTaskResumeAll+0x100>)
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	3318      	adds	r3, #24
 800d31a:	0018      	movs	r0, r3
 800d31c:	f7fe fe09 	bl	800bf32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	3304      	adds	r3, #4
 800d324:	0018      	movs	r0, r3
 800d326:	f7fe fe04 	bl	800bf32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32e:	4b2a      	ldr	r3, [pc, #168]	; (800d3d8 <xTaskResumeAll+0x104>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	429a      	cmp	r2, r3
 800d334:	d903      	bls.n	800d33e <xTaskResumeAll+0x6a>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d33a:	4b27      	ldr	r3, [pc, #156]	; (800d3d8 <xTaskResumeAll+0x104>)
 800d33c:	601a      	str	r2, [r3, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d342:	0013      	movs	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	189b      	adds	r3, r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4a24      	ldr	r2, [pc, #144]	; (800d3dc <xTaskResumeAll+0x108>)
 800d34c:	189a      	adds	r2, r3, r2
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3304      	adds	r3, #4
 800d352:	0019      	movs	r1, r3
 800d354:	0010      	movs	r0, r2
 800d356:	f7fe fd94 	bl	800be82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35e:	4b20      	ldr	r3, [pc, #128]	; (800d3e0 <xTaskResumeAll+0x10c>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d364:	429a      	cmp	r2, r3
 800d366:	d302      	bcc.n	800d36e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800d368:	4b1e      	ldr	r3, [pc, #120]	; (800d3e4 <xTaskResumeAll+0x110>)
 800d36a:	2201      	movs	r2, #1
 800d36c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d36e:	4b19      	ldr	r3, [pc, #100]	; (800d3d4 <xTaskResumeAll+0x100>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1cb      	bne.n	800d30e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d001      	beq.n	800d380 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d37c:	f000 fb10 	bl	800d9a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d380:	4b19      	ldr	r3, [pc, #100]	; (800d3e8 <xTaskResumeAll+0x114>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00f      	beq.n	800d3ac <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d38c:	f000 f83c 	bl	800d408 <xTaskIncrementTick>
 800d390:	1e03      	subs	r3, r0, #0
 800d392:	d002      	beq.n	800d39a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800d394:	4b13      	ldr	r3, [pc, #76]	; (800d3e4 <xTaskResumeAll+0x110>)
 800d396:	2201      	movs	r2, #1
 800d398:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1f2      	bne.n	800d38c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800d3a6:	4b10      	ldr	r3, [pc, #64]	; (800d3e8 <xTaskResumeAll+0x114>)
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d3ac:	4b0d      	ldr	r3, [pc, #52]	; (800d3e4 <xTaskResumeAll+0x110>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d003      	beq.n	800d3bc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d3b8:	f001 f832 	bl	800e420 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3bc:	f001 f852 	bl	800e464 <vPortExitCritical>

	return xAlreadyYielded;
 800d3c0:	68bb      	ldr	r3, [r7, #8]
}
 800d3c2:	0018      	movs	r0, r3
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	b004      	add	sp, #16
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	46c0      	nop			; (mov r8, r8)
 800d3cc:	20001138 	.word	0x20001138
 800d3d0:	20001110 	.word	0x20001110
 800d3d4:	200010d0 	.word	0x200010d0
 800d3d8:	20001118 	.word	0x20001118
 800d3dc:	20000c40 	.word	0x20000c40
 800d3e0:	20000c3c 	.word	0x20000c3c
 800d3e4:	20001124 	.word	0x20001124
 800d3e8:	20001120 	.word	0x20001120

0800d3ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d3f2:	4b04      	ldr	r3, [pc, #16]	; (800d404 <xTaskGetTickCount+0x18>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d3f8:	687b      	ldr	r3, [r7, #4]
}
 800d3fa:	0018      	movs	r0, r3
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	b002      	add	sp, #8
 800d400:	bd80      	pop	{r7, pc}
 800d402:	46c0      	nop			; (mov r8, r8)
 800d404:	20001114 	.word	0x20001114

0800d408 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d40e:	2300      	movs	r3, #0
 800d410:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d412:	4b4c      	ldr	r3, [pc, #304]	; (800d544 <xTaskIncrementTick+0x13c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d000      	beq.n	800d41c <xTaskIncrementTick+0x14>
 800d41a:	e083      	b.n	800d524 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d41c:	4b4a      	ldr	r3, [pc, #296]	; (800d548 <xTaskIncrementTick+0x140>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3301      	adds	r3, #1
 800d422:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d424:	4b48      	ldr	r3, [pc, #288]	; (800d548 <xTaskIncrementTick+0x140>)
 800d426:	693a      	ldr	r2, [r7, #16]
 800d428:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d117      	bne.n	800d460 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800d430:	4b46      	ldr	r3, [pc, #280]	; (800d54c <xTaskIncrementTick+0x144>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <xTaskIncrementTick+0x36>
 800d43a:	b672      	cpsid	i
 800d43c:	e7fe      	b.n	800d43c <xTaskIncrementTick+0x34>
 800d43e:	4b43      	ldr	r3, [pc, #268]	; (800d54c <xTaskIncrementTick+0x144>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	60fb      	str	r3, [r7, #12]
 800d444:	4b42      	ldr	r3, [pc, #264]	; (800d550 <xTaskIncrementTick+0x148>)
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	4b40      	ldr	r3, [pc, #256]	; (800d54c <xTaskIncrementTick+0x144>)
 800d44a:	601a      	str	r2, [r3, #0]
 800d44c:	4b40      	ldr	r3, [pc, #256]	; (800d550 <xTaskIncrementTick+0x148>)
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	601a      	str	r2, [r3, #0]
 800d452:	4b40      	ldr	r3, [pc, #256]	; (800d554 <xTaskIncrementTick+0x14c>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	1c5a      	adds	r2, r3, #1
 800d458:	4b3e      	ldr	r3, [pc, #248]	; (800d554 <xTaskIncrementTick+0x14c>)
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	f000 faa0 	bl	800d9a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d460:	4b3d      	ldr	r3, [pc, #244]	; (800d558 <xTaskIncrementTick+0x150>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	693a      	ldr	r2, [r7, #16]
 800d466:	429a      	cmp	r2, r3
 800d468:	d34e      	bcc.n	800d508 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d46a:	4b38      	ldr	r3, [pc, #224]	; (800d54c <xTaskIncrementTick+0x144>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d101      	bne.n	800d478 <xTaskIncrementTick+0x70>
 800d474:	2301      	movs	r3, #1
 800d476:	e000      	b.n	800d47a <xTaskIncrementTick+0x72>
 800d478:	2300      	movs	r3, #0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d004      	beq.n	800d488 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d47e:	4b36      	ldr	r3, [pc, #216]	; (800d558 <xTaskIncrementTick+0x150>)
 800d480:	2201      	movs	r2, #1
 800d482:	4252      	negs	r2, r2
 800d484:	601a      	str	r2, [r3, #0]
					break;
 800d486:	e03f      	b.n	800d508 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d488:	4b30      	ldr	r3, [pc, #192]	; (800d54c <xTaskIncrementTick+0x144>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	68db      	ldr	r3, [r3, #12]
 800d490:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d203      	bcs.n	800d4a8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d4a0:	4b2d      	ldr	r3, [pc, #180]	; (800d558 <xTaskIncrementTick+0x150>)
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	601a      	str	r2, [r3, #0]
						break;
 800d4a6:	e02f      	b.n	800d508 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	0018      	movs	r0, r3
 800d4ae:	f7fe fd40 	bl	800bf32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d004      	beq.n	800d4c4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	3318      	adds	r3, #24
 800d4be:	0018      	movs	r0, r3
 800d4c0:	f7fe fd37 	bl	800bf32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c8:	4b24      	ldr	r3, [pc, #144]	; (800d55c <xTaskIncrementTick+0x154>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d903      	bls.n	800d4d8 <xTaskIncrementTick+0xd0>
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d4:	4b21      	ldr	r3, [pc, #132]	; (800d55c <xTaskIncrementTick+0x154>)
 800d4d6:	601a      	str	r2, [r3, #0]
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4dc:	0013      	movs	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	189b      	adds	r3, r3, r2
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	4a1e      	ldr	r2, [pc, #120]	; (800d560 <xTaskIncrementTick+0x158>)
 800d4e6:	189a      	adds	r2, r3, r2
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	0019      	movs	r1, r3
 800d4ee:	0010      	movs	r0, r2
 800d4f0:	f7fe fcc7 	bl	800be82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f8:	4b1a      	ldr	r3, [pc, #104]	; (800d564 <xTaskIncrementTick+0x15c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d3b3      	bcc.n	800d46a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800d502:	2301      	movs	r3, #1
 800d504:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d506:	e7b0      	b.n	800d46a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d508:	4b16      	ldr	r3, [pc, #88]	; (800d564 <xTaskIncrementTick+0x15c>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d50e:	4914      	ldr	r1, [pc, #80]	; (800d560 <xTaskIncrementTick+0x158>)
 800d510:	0013      	movs	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	189b      	adds	r3, r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	585b      	ldr	r3, [r3, r1]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d907      	bls.n	800d52e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d51e:	2301      	movs	r3, #1
 800d520:	617b      	str	r3, [r7, #20]
 800d522:	e004      	b.n	800d52e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d524:	4b10      	ldr	r3, [pc, #64]	; (800d568 <xTaskIncrementTick+0x160>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	1c5a      	adds	r2, r3, #1
 800d52a:	4b0f      	ldr	r3, [pc, #60]	; (800d568 <xTaskIncrementTick+0x160>)
 800d52c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d52e:	4b0f      	ldr	r3, [pc, #60]	; (800d56c <xTaskIncrementTick+0x164>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800d536:	2301      	movs	r3, #1
 800d538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d53a:	697b      	ldr	r3, [r7, #20]
}
 800d53c:	0018      	movs	r0, r3
 800d53e:	46bd      	mov	sp, r7
 800d540:	b006      	add	sp, #24
 800d542:	bd80      	pop	{r7, pc}
 800d544:	20001138 	.word	0x20001138
 800d548:	20001114 	.word	0x20001114
 800d54c:	200010c8 	.word	0x200010c8
 800d550:	200010cc 	.word	0x200010cc
 800d554:	20001128 	.word	0x20001128
 800d558:	20001130 	.word	0x20001130
 800d55c:	20001118 	.word	0x20001118
 800d560:	20000c40 	.word	0x20000c40
 800d564:	20000c3c 	.word	0x20000c3c
 800d568:	20001120 	.word	0x20001120
 800d56c:	20001124 	.word	0x20001124

0800d570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d576:	4b25      	ldr	r3, [pc, #148]	; (800d60c <vTaskSwitchContext+0x9c>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d003      	beq.n	800d586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d57e:	4b24      	ldr	r3, [pc, #144]	; (800d610 <vTaskSwitchContext+0xa0>)
 800d580:	2201      	movs	r2, #1
 800d582:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d584:	e03d      	b.n	800d602 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800d586:	4b22      	ldr	r3, [pc, #136]	; (800d610 <vTaskSwitchContext+0xa0>)
 800d588:	2200      	movs	r2, #0
 800d58a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d58c:	4b21      	ldr	r3, [pc, #132]	; (800d614 <vTaskSwitchContext+0xa4>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	607b      	str	r3, [r7, #4]
 800d592:	e007      	b.n	800d5a4 <vTaskSwitchContext+0x34>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d101      	bne.n	800d59e <vTaskSwitchContext+0x2e>
 800d59a:	b672      	cpsid	i
 800d59c:	e7fe      	b.n	800d59c <vTaskSwitchContext+0x2c>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	607b      	str	r3, [r7, #4]
 800d5a4:	491c      	ldr	r1, [pc, #112]	; (800d618 <vTaskSwitchContext+0xa8>)
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	0013      	movs	r3, r2
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	189b      	adds	r3, r3, r2
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	585b      	ldr	r3, [r3, r1]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d0ee      	beq.n	800d594 <vTaskSwitchContext+0x24>
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	0013      	movs	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	189b      	adds	r3, r3, r2
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	4a15      	ldr	r2, [pc, #84]	; (800d618 <vTaskSwitchContext+0xa8>)
 800d5c2:	189b      	adds	r3, r3, r2
 800d5c4:	603b      	str	r3, [r7, #0]
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	605a      	str	r2, [r3, #4]
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	685a      	ldr	r2, [r3, #4]
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	3308      	adds	r3, #8
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d104      	bne.n	800d5e6 <vTaskSwitchContext+0x76>
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	685a      	ldr	r2, [r3, #4]
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	605a      	str	r2, [r3, #4]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	68da      	ldr	r2, [r3, #12]
 800d5ec:	4b0b      	ldr	r3, [pc, #44]	; (800d61c <vTaskSwitchContext+0xac>)
 800d5ee:	601a      	str	r2, [r3, #0]
 800d5f0:	4b08      	ldr	r3, [pc, #32]	; (800d614 <vTaskSwitchContext+0xa4>)
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d5f6:	4b09      	ldr	r3, [pc, #36]	; (800d61c <vTaskSwitchContext+0xac>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3354      	adds	r3, #84	; 0x54
 800d5fc:	001a      	movs	r2, r3
 800d5fe:	4b08      	ldr	r3, [pc, #32]	; (800d620 <vTaskSwitchContext+0xb0>)
 800d600:	601a      	str	r2, [r3, #0]
}
 800d602:	46c0      	nop			; (mov r8, r8)
 800d604:	46bd      	mov	sp, r7
 800d606:	b002      	add	sp, #8
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	46c0      	nop			; (mov r8, r8)
 800d60c:	20001138 	.word	0x20001138
 800d610:	20001124 	.word	0x20001124
 800d614:	20001118 	.word	0x20001118
 800d618:	20000c40 	.word	0x20000c40
 800d61c:	20000c3c 	.word	0x20000c3c
 800d620:	20000030 	.word	0x20000030

0800d624 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d101      	bne.n	800d638 <vTaskPlaceOnEventList+0x14>
 800d634:	b672      	cpsid	i
 800d636:	e7fe      	b.n	800d636 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d638:	4b08      	ldr	r3, [pc, #32]	; (800d65c <vTaskPlaceOnEventList+0x38>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3318      	adds	r3, #24
 800d63e:	001a      	movs	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	0011      	movs	r1, r2
 800d644:	0018      	movs	r0, r3
 800d646:	f7fe fc3e 	bl	800bec6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	2101      	movs	r1, #1
 800d64e:	0018      	movs	r0, r3
 800d650:	f000 fb36 	bl	800dcc0 <prvAddCurrentTaskToDelayedList>
}
 800d654:	46c0      	nop			; (mov r8, r8)
 800d656:	46bd      	mov	sp, r7
 800d658:	b002      	add	sp, #8
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	20000c3c 	.word	0x20000c3c

0800d660 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <vTaskPlaceOnEventListRestricted+0x16>
 800d672:	b672      	cpsid	i
 800d674:	e7fe      	b.n	800d674 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d676:	4b0c      	ldr	r3, [pc, #48]	; (800d6a8 <vTaskPlaceOnEventListRestricted+0x48>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	3318      	adds	r3, #24
 800d67c:	001a      	movs	r2, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	0011      	movs	r1, r2
 800d682:	0018      	movs	r0, r3
 800d684:	f7fe fbfd 	bl	800be82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d002      	beq.n	800d694 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800d68e:	2301      	movs	r3, #1
 800d690:	425b      	negs	r3, r3
 800d692:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	0011      	movs	r1, r2
 800d69a:	0018      	movs	r0, r3
 800d69c:	f000 fb10 	bl	800dcc0 <prvAddCurrentTaskToDelayedList>
	}
 800d6a0:	46c0      	nop			; (mov r8, r8)
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	b004      	add	sp, #16
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	20000c3c 	.word	0x20000c3c

0800d6ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <xTaskRemoveFromEventList+0x1a>
 800d6c2:	b672      	cpsid	i
 800d6c4:	e7fe      	b.n	800d6c4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	3318      	adds	r3, #24
 800d6ca:	0018      	movs	r0, r3
 800d6cc:	f7fe fc31 	bl	800bf32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6d0:	4b1e      	ldr	r3, [pc, #120]	; (800d74c <xTaskRemoveFromEventList+0xa0>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d11d      	bne.n	800d714 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	3304      	adds	r3, #4
 800d6dc:	0018      	movs	r0, r3
 800d6de:	f7fe fc28 	bl	800bf32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e6:	4b1a      	ldr	r3, [pc, #104]	; (800d750 <xTaskRemoveFromEventList+0xa4>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d903      	bls.n	800d6f6 <xTaskRemoveFromEventList+0x4a>
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f2:	4b17      	ldr	r3, [pc, #92]	; (800d750 <xTaskRemoveFromEventList+0xa4>)
 800d6f4:	601a      	str	r2, [r3, #0]
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fa:	0013      	movs	r3, r2
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	189b      	adds	r3, r3, r2
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	4a14      	ldr	r2, [pc, #80]	; (800d754 <xTaskRemoveFromEventList+0xa8>)
 800d704:	189a      	adds	r2, r3, r2
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	3304      	adds	r3, #4
 800d70a:	0019      	movs	r1, r3
 800d70c:	0010      	movs	r0, r2
 800d70e:	f7fe fbb8 	bl	800be82 <vListInsertEnd>
 800d712:	e007      	b.n	800d724 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	3318      	adds	r3, #24
 800d718:	001a      	movs	r2, r3
 800d71a:	4b0f      	ldr	r3, [pc, #60]	; (800d758 <xTaskRemoveFromEventList+0xac>)
 800d71c:	0011      	movs	r1, r2
 800d71e:	0018      	movs	r0, r3
 800d720:	f7fe fbaf 	bl	800be82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d728:	4b0c      	ldr	r3, [pc, #48]	; (800d75c <xTaskRemoveFromEventList+0xb0>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d72e:	429a      	cmp	r2, r3
 800d730:	d905      	bls.n	800d73e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d732:	2301      	movs	r3, #1
 800d734:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d736:	4b0a      	ldr	r3, [pc, #40]	; (800d760 <xTaskRemoveFromEventList+0xb4>)
 800d738:	2201      	movs	r2, #1
 800d73a:	601a      	str	r2, [r3, #0]
 800d73c:	e001      	b.n	800d742 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800d73e:	2300      	movs	r3, #0
 800d740:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d742:	68fb      	ldr	r3, [r7, #12]
}
 800d744:	0018      	movs	r0, r3
 800d746:	46bd      	mov	sp, r7
 800d748:	b004      	add	sp, #16
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20001138 	.word	0x20001138
 800d750:	20001118 	.word	0x20001118
 800d754:	20000c40 	.word	0x20000c40
 800d758:	200010d0 	.word	0x200010d0
 800d75c:	20000c3c 	.word	0x20000c3c
 800d760:	20001124 	.word	0x20001124

0800d764 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d76c:	4b05      	ldr	r3, [pc, #20]	; (800d784 <vTaskInternalSetTimeOutState+0x20>)
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d774:	4b04      	ldr	r3, [pc, #16]	; (800d788 <vTaskInternalSetTimeOutState+0x24>)
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	605a      	str	r2, [r3, #4]
}
 800d77c:	46c0      	nop			; (mov r8, r8)
 800d77e:	46bd      	mov	sp, r7
 800d780:	b002      	add	sp, #8
 800d782:	bd80      	pop	{r7, pc}
 800d784:	20001128 	.word	0x20001128
 800d788:	20001114 	.word	0x20001114

0800d78c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b086      	sub	sp, #24
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d101      	bne.n	800d7a0 <xTaskCheckForTimeOut+0x14>
 800d79c:	b672      	cpsid	i
 800d79e:	e7fe      	b.n	800d79e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d101      	bne.n	800d7aa <xTaskCheckForTimeOut+0x1e>
 800d7a6:	b672      	cpsid	i
 800d7a8:	e7fe      	b.n	800d7a8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800d7aa:	f000 fe49 	bl	800e440 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d7ae:	4b1d      	ldr	r3, [pc, #116]	; (800d824 <xTaskCheckForTimeOut+0x98>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	693a      	ldr	r2, [r7, #16]
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	d102      	bne.n	800d7cc <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	617b      	str	r3, [r7, #20]
 800d7ca:	e024      	b.n	800d816 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	4b15      	ldr	r3, [pc, #84]	; (800d828 <xTaskCheckForTimeOut+0x9c>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d007      	beq.n	800d7e8 <xTaskCheckForTimeOut+0x5c>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d302      	bcc.n	800d7e8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	617b      	str	r3, [r7, #20]
 800d7e6:	e016      	b.n	800d816 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d20c      	bcs.n	800d80c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	1ad2      	subs	r2, r2, r3
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	0018      	movs	r0, r3
 800d802:	f7ff ffaf 	bl	800d764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d806:	2300      	movs	r3, #0
 800d808:	617b      	str	r3, [r7, #20]
 800d80a:	e004      	b.n	800d816 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	2200      	movs	r2, #0
 800d810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d812:	2301      	movs	r3, #1
 800d814:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800d816:	f000 fe25 	bl	800e464 <vPortExitCritical>

	return xReturn;
 800d81a:	697b      	ldr	r3, [r7, #20]
}
 800d81c:	0018      	movs	r0, r3
 800d81e:	46bd      	mov	sp, r7
 800d820:	b006      	add	sp, #24
 800d822:	bd80      	pop	{r7, pc}
 800d824:	20001114 	.word	0x20001114
 800d828:	20001128 	.word	0x20001128

0800d82c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d830:	4b02      	ldr	r3, [pc, #8]	; (800d83c <vTaskMissedYield+0x10>)
 800d832:	2201      	movs	r2, #1
 800d834:	601a      	str	r2, [r3, #0]
}
 800d836:	46c0      	nop			; (mov r8, r8)
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	20001124 	.word	0x20001124

0800d840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d848:	f000 f84e 	bl	800d8e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d84c:	4b03      	ldr	r3, [pc, #12]	; (800d85c <prvIdleTask+0x1c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d9f9      	bls.n	800d848 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d854:	f000 fde4 	bl	800e420 <vPortYield>
		prvCheckTasksWaitingTermination();
 800d858:	e7f6      	b.n	800d848 <prvIdleTask+0x8>
 800d85a:	46c0      	nop			; (mov r8, r8)
 800d85c:	20000c40 	.word	0x20000c40

0800d860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d866:	2300      	movs	r3, #0
 800d868:	607b      	str	r3, [r7, #4]
 800d86a:	e00c      	b.n	800d886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	0013      	movs	r3, r2
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	189b      	adds	r3, r3, r2
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	4a14      	ldr	r2, [pc, #80]	; (800d8c8 <prvInitialiseTaskLists+0x68>)
 800d878:	189b      	adds	r3, r3, r2
 800d87a:	0018      	movs	r0, r3
 800d87c:	f7fe fad8 	bl	800be30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3301      	adds	r3, #1
 800d884:	607b      	str	r3, [r7, #4]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b37      	cmp	r3, #55	; 0x37
 800d88a:	d9ef      	bls.n	800d86c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d88c:	4b0f      	ldr	r3, [pc, #60]	; (800d8cc <prvInitialiseTaskLists+0x6c>)
 800d88e:	0018      	movs	r0, r3
 800d890:	f7fe face 	bl	800be30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d894:	4b0e      	ldr	r3, [pc, #56]	; (800d8d0 <prvInitialiseTaskLists+0x70>)
 800d896:	0018      	movs	r0, r3
 800d898:	f7fe faca 	bl	800be30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d89c:	4b0d      	ldr	r3, [pc, #52]	; (800d8d4 <prvInitialiseTaskLists+0x74>)
 800d89e:	0018      	movs	r0, r3
 800d8a0:	f7fe fac6 	bl	800be30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d8a4:	4b0c      	ldr	r3, [pc, #48]	; (800d8d8 <prvInitialiseTaskLists+0x78>)
 800d8a6:	0018      	movs	r0, r3
 800d8a8:	f7fe fac2 	bl	800be30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d8ac:	4b0b      	ldr	r3, [pc, #44]	; (800d8dc <prvInitialiseTaskLists+0x7c>)
 800d8ae:	0018      	movs	r0, r3
 800d8b0:	f7fe fabe 	bl	800be30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d8b4:	4b0a      	ldr	r3, [pc, #40]	; (800d8e0 <prvInitialiseTaskLists+0x80>)
 800d8b6:	4a05      	ldr	r2, [pc, #20]	; (800d8cc <prvInitialiseTaskLists+0x6c>)
 800d8b8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d8ba:	4b0a      	ldr	r3, [pc, #40]	; (800d8e4 <prvInitialiseTaskLists+0x84>)
 800d8bc:	4a04      	ldr	r2, [pc, #16]	; (800d8d0 <prvInitialiseTaskLists+0x70>)
 800d8be:	601a      	str	r2, [r3, #0]
}
 800d8c0:	46c0      	nop			; (mov r8, r8)
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	b002      	add	sp, #8
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	20000c40 	.word	0x20000c40
 800d8cc:	200010a0 	.word	0x200010a0
 800d8d0:	200010b4 	.word	0x200010b4
 800d8d4:	200010d0 	.word	0x200010d0
 800d8d8:	200010e4 	.word	0x200010e4
 800d8dc:	200010fc 	.word	0x200010fc
 800d8e0:	200010c8 	.word	0x200010c8
 800d8e4:	200010cc 	.word	0x200010cc

0800d8e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8ee:	e01a      	b.n	800d926 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800d8f0:	f000 fda6 	bl	800e440 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d8f4:	4b10      	ldr	r3, [pc, #64]	; (800d938 <prvCheckTasksWaitingTermination+0x50>)
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	3304      	adds	r3, #4
 800d900:	0018      	movs	r0, r3
 800d902:	f7fe fb16 	bl	800bf32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d906:	4b0d      	ldr	r3, [pc, #52]	; (800d93c <prvCheckTasksWaitingTermination+0x54>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	1e5a      	subs	r2, r3, #1
 800d90c:	4b0b      	ldr	r3, [pc, #44]	; (800d93c <prvCheckTasksWaitingTermination+0x54>)
 800d90e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d910:	4b0b      	ldr	r3, [pc, #44]	; (800d940 <prvCheckTasksWaitingTermination+0x58>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	1e5a      	subs	r2, r3, #1
 800d916:	4b0a      	ldr	r3, [pc, #40]	; (800d940 <prvCheckTasksWaitingTermination+0x58>)
 800d918:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800d91a:	f000 fda3 	bl	800e464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	0018      	movs	r0, r3
 800d922:	f000 f80f 	bl	800d944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d926:	4b06      	ldr	r3, [pc, #24]	; (800d940 <prvCheckTasksWaitingTermination+0x58>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e0      	bne.n	800d8f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d92e:	46c0      	nop			; (mov r8, r8)
 800d930:	46bd      	mov	sp, r7
 800d932:	b002      	add	sp, #8
 800d934:	bd80      	pop	{r7, pc}
 800d936:	46c0      	nop			; (mov r8, r8)
 800d938:	200010e4 	.word	0x200010e4
 800d93c:	20001110 	.word	0x20001110
 800d940:	200010f8 	.word	0x200010f8

0800d944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	3354      	adds	r3, #84	; 0x54
 800d950:	0018      	movs	r0, r3
 800d952:	f001 f86d 	bl	800ea30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	22b9      	movs	r2, #185	; 0xb9
 800d95a:	5c9b      	ldrb	r3, [r3, r2]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d109      	bne.n	800d974 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d964:	0018      	movs	r0, r3
 800d966:	f000 fea9 	bl	800e6bc <vPortFree>
				vPortFree( pxTCB );
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	0018      	movs	r0, r3
 800d96e:	f000 fea5 	bl	800e6bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d972:	e010      	b.n	800d996 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	22b9      	movs	r2, #185	; 0xb9
 800d978:	5c9b      	ldrb	r3, [r3, r2]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d104      	bne.n	800d988 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	0018      	movs	r0, r3
 800d982:	f000 fe9b 	bl	800e6bc <vPortFree>
	}
 800d986:	e006      	b.n	800d996 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	22b9      	movs	r2, #185	; 0xb9
 800d98c:	5c9b      	ldrb	r3, [r3, r2]
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d001      	beq.n	800d996 <prvDeleteTCB+0x52>
 800d992:	b672      	cpsid	i
 800d994:	e7fe      	b.n	800d994 <prvDeleteTCB+0x50>
	}
 800d996:	46c0      	nop			; (mov r8, r8)
 800d998:	46bd      	mov	sp, r7
 800d99a:	b002      	add	sp, #8
 800d99c:	bd80      	pop	{r7, pc}
	...

0800d9a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9a6:	4b0e      	ldr	r3, [pc, #56]	; (800d9e0 <prvResetNextTaskUnblockTime+0x40>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <prvResetNextTaskUnblockTime+0x14>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e000      	b.n	800d9b6 <prvResetNextTaskUnblockTime+0x16>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d004      	beq.n	800d9c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d9ba:	4b0a      	ldr	r3, [pc, #40]	; (800d9e4 <prvResetNextTaskUnblockTime+0x44>)
 800d9bc:	2201      	movs	r2, #1
 800d9be:	4252      	negs	r2, r2
 800d9c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d9c2:	e008      	b.n	800d9d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d9c4:	4b06      	ldr	r3, [pc, #24]	; (800d9e0 <prvResetNextTaskUnblockTime+0x40>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685a      	ldr	r2, [r3, #4]
 800d9d2:	4b04      	ldr	r3, [pc, #16]	; (800d9e4 <prvResetNextTaskUnblockTime+0x44>)
 800d9d4:	601a      	str	r2, [r3, #0]
}
 800d9d6:	46c0      	nop			; (mov r8, r8)
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	b002      	add	sp, #8
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	46c0      	nop			; (mov r8, r8)
 800d9e0:	200010c8 	.word	0x200010c8
 800d9e4:	20001130 	.word	0x20001130

0800d9e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d9ee:	4b0a      	ldr	r3, [pc, #40]	; (800da18 <xTaskGetSchedulerState+0x30>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d102      	bne.n	800d9fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	607b      	str	r3, [r7, #4]
 800d9fa:	e008      	b.n	800da0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9fc:	4b07      	ldr	r3, [pc, #28]	; (800da1c <xTaskGetSchedulerState+0x34>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d102      	bne.n	800da0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800da04:	2302      	movs	r3, #2
 800da06:	607b      	str	r3, [r7, #4]
 800da08:	e001      	b.n	800da0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800da0a:	2300      	movs	r3, #0
 800da0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800da0e:	687b      	ldr	r3, [r7, #4]
	}
 800da10:	0018      	movs	r0, r3
 800da12:	46bd      	mov	sp, r7
 800da14:	b002      	add	sp, #8
 800da16:	bd80      	pop	{r7, pc}
 800da18:	2000111c 	.word	0x2000111c
 800da1c:	20001138 	.word	0x20001138

0800da20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800da2c:	2300      	movs	r3, #0
 800da2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d056      	beq.n	800dae4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da3a:	4b2d      	ldr	r3, [pc, #180]	; (800daf0 <xTaskPriorityInherit+0xd0>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da40:	429a      	cmp	r2, r3
 800da42:	d246      	bcs.n	800dad2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	699b      	ldr	r3, [r3, #24]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	db06      	blt.n	800da5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da4c:	4b28      	ldr	r3, [pc, #160]	; (800daf0 <xTaskPriorityInherit+0xd0>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da52:	2238      	movs	r2, #56	; 0x38
 800da54:	1ad2      	subs	r2, r2, r3
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	6959      	ldr	r1, [r3, #20]
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da62:	0013      	movs	r3, r2
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	189b      	adds	r3, r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4a22      	ldr	r2, [pc, #136]	; (800daf4 <xTaskPriorityInherit+0xd4>)
 800da6c:	189b      	adds	r3, r3, r2
 800da6e:	4299      	cmp	r1, r3
 800da70:	d101      	bne.n	800da76 <xTaskPriorityInherit+0x56>
 800da72:	2301      	movs	r3, #1
 800da74:	e000      	b.n	800da78 <xTaskPriorityInherit+0x58>
 800da76:	2300      	movs	r3, #0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d022      	beq.n	800dac2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	3304      	adds	r3, #4
 800da80:	0018      	movs	r0, r3
 800da82:	f7fe fa56 	bl	800bf32 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800da86:	4b1a      	ldr	r3, [pc, #104]	; (800daf0 <xTaskPriorityInherit+0xd0>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da94:	4b18      	ldr	r3, [pc, #96]	; (800daf8 <xTaskPriorityInherit+0xd8>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d903      	bls.n	800daa4 <xTaskPriorityInherit+0x84>
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa0:	4b15      	ldr	r3, [pc, #84]	; (800daf8 <xTaskPriorityInherit+0xd8>)
 800daa2:	601a      	str	r2, [r3, #0]
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa8:	0013      	movs	r3, r2
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	189b      	adds	r3, r3, r2
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	4a10      	ldr	r2, [pc, #64]	; (800daf4 <xTaskPriorityInherit+0xd4>)
 800dab2:	189a      	adds	r2, r3, r2
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	3304      	adds	r3, #4
 800dab8:	0019      	movs	r1, r3
 800daba:	0010      	movs	r0, r2
 800dabc:	f7fe f9e1 	bl	800be82 <vListInsertEnd>
 800dac0:	e004      	b.n	800dacc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dac2:	4b0b      	ldr	r3, [pc, #44]	; (800daf0 <xTaskPriorityInherit+0xd0>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dacc:	2301      	movs	r3, #1
 800dace:	60fb      	str	r3, [r7, #12]
 800dad0:	e008      	b.n	800dae4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dad6:	4b06      	ldr	r3, [pc, #24]	; (800daf0 <xTaskPriorityInherit+0xd0>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dadc:	429a      	cmp	r2, r3
 800dade:	d201      	bcs.n	800dae4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dae0:	2301      	movs	r3, #1
 800dae2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dae4:	68fb      	ldr	r3, [r7, #12]
	}
 800dae6:	0018      	movs	r0, r3
 800dae8:	46bd      	mov	sp, r7
 800daea:	b004      	add	sp, #16
 800daec:	bd80      	pop	{r7, pc}
 800daee:	46c0      	nop			; (mov r8, r8)
 800daf0:	20000c3c 	.word	0x20000c3c
 800daf4:	20000c40 	.word	0x20000c40
 800daf8:	20001118 	.word	0x20001118

0800dafc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800db08:	2300      	movs	r3, #0
 800db0a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d044      	beq.n	800db9c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db12:	4b25      	ldr	r3, [pc, #148]	; (800dba8 <xTaskPriorityDisinherit+0xac>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d001      	beq.n	800db20 <xTaskPriorityDisinherit+0x24>
 800db1c:	b672      	cpsid	i
 800db1e:	e7fe      	b.n	800db1e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <xTaskPriorityDisinherit+0x30>
 800db28:	b672      	cpsid	i
 800db2a:	e7fe      	b.n	800db2a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db30:	1e5a      	subs	r2, r3, #1
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db3e:	429a      	cmp	r2, r3
 800db40:	d02c      	beq.n	800db9c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db46:	2b00      	cmp	r3, #0
 800db48:	d128      	bne.n	800db9c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	3304      	adds	r3, #4
 800db4e:	0018      	movs	r0, r3
 800db50:	f7fe f9ef 	bl	800bf32 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db60:	2238      	movs	r2, #56	; 0x38
 800db62:	1ad2      	subs	r2, r2, r3
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db6c:	4b0f      	ldr	r3, [pc, #60]	; (800dbac <xTaskPriorityDisinherit+0xb0>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	429a      	cmp	r2, r3
 800db72:	d903      	bls.n	800db7c <xTaskPriorityDisinherit+0x80>
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db78:	4b0c      	ldr	r3, [pc, #48]	; (800dbac <xTaskPriorityDisinherit+0xb0>)
 800db7a:	601a      	str	r2, [r3, #0]
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db80:	0013      	movs	r3, r2
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	189b      	adds	r3, r3, r2
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	4a09      	ldr	r2, [pc, #36]	; (800dbb0 <xTaskPriorityDisinherit+0xb4>)
 800db8a:	189a      	adds	r2, r3, r2
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	3304      	adds	r3, #4
 800db90:	0019      	movs	r1, r3
 800db92:	0010      	movs	r0, r2
 800db94:	f7fe f975 	bl	800be82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800db98:	2301      	movs	r3, #1
 800db9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db9c:	68fb      	ldr	r3, [r7, #12]
	}
 800db9e:	0018      	movs	r0, r3
 800dba0:	46bd      	mov	sp, r7
 800dba2:	b004      	add	sp, #16
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	46c0      	nop			; (mov r8, r8)
 800dba8:	20000c3c 	.word	0x20000c3c
 800dbac:	20001118 	.word	0x20001118
 800dbb0:	20000c40 	.word	0x20000c40

0800dbb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d05d      	beq.n	800dc88 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d101      	bne.n	800dbd8 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800dbd4:	b672      	cpsid	i
 800dbd6:	e7fe      	b.n	800dbd6 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d902      	bls.n	800dbe8 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	617b      	str	r3, [r7, #20]
 800dbe6:	e002      	b.n	800dbee <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbec:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf2:	697a      	ldr	r2, [r7, #20]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d047      	beq.n	800dc88 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d142      	bne.n	800dc88 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dc02:	4b23      	ldr	r3, [pc, #140]	; (800dc90 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	693a      	ldr	r2, [r7, #16]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d101      	bne.n	800dc10 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800dc0c:	b672      	cpsid	i
 800dc0e:	e7fe      	b.n	800dc0e <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc14:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	697a      	ldr	r2, [r7, #20]
 800dc1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	db04      	blt.n	800dc2e <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	2238      	movs	r2, #56	; 0x38
 800dc28:	1ad2      	subs	r2, r2, r3
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	6959      	ldr	r1, [r3, #20]
 800dc32:	68ba      	ldr	r2, [r7, #8]
 800dc34:	0013      	movs	r3, r2
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	189b      	adds	r3, r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4a15      	ldr	r2, [pc, #84]	; (800dc94 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800dc3e:	189b      	adds	r3, r3, r2
 800dc40:	4299      	cmp	r1, r3
 800dc42:	d101      	bne.n	800dc48 <vTaskPriorityDisinheritAfterTimeout+0x94>
 800dc44:	2301      	movs	r3, #1
 800dc46:	e000      	b.n	800dc4a <vTaskPriorityDisinheritAfterTimeout+0x96>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d01c      	beq.n	800dc88 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	3304      	adds	r3, #4
 800dc52:	0018      	movs	r0, r3
 800dc54:	f7fe f96d 	bl	800bf32 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc5c:	4b0e      	ldr	r3, [pc, #56]	; (800dc98 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d903      	bls.n	800dc6c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc68:	4b0b      	ldr	r3, [pc, #44]	; (800dc98 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800dc6a:	601a      	str	r2, [r3, #0]
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc70:	0013      	movs	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	189b      	adds	r3, r3, r2
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	4a06      	ldr	r2, [pc, #24]	; (800dc94 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800dc7a:	189a      	adds	r2, r3, r2
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	3304      	adds	r3, #4
 800dc80:	0019      	movs	r1, r3
 800dc82:	0010      	movs	r0, r2
 800dc84:	f7fe f8fd 	bl	800be82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc88:	46c0      	nop			; (mov r8, r8)
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	b006      	add	sp, #24
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	20000c3c 	.word	0x20000c3c
 800dc94:	20000c40 	.word	0x20000c40
 800dc98:	20001118 	.word	0x20001118

0800dc9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dca0:	4b06      	ldr	r3, [pc, #24]	; (800dcbc <pvTaskIncrementMutexHeldCount+0x20>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d004      	beq.n	800dcb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dca8:	4b04      	ldr	r3, [pc, #16]	; (800dcbc <pvTaskIncrementMutexHeldCount+0x20>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dcae:	3201      	adds	r2, #1
 800dcb0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dcb2:	4b02      	ldr	r3, [pc, #8]	; (800dcbc <pvTaskIncrementMutexHeldCount+0x20>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
	}
 800dcb6:	0018      	movs	r0, r3
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	20000c3c 	.word	0x20000c3c

0800dcc0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dcca:	4b21      	ldr	r3, [pc, #132]	; (800dd50 <prvAddCurrentTaskToDelayedList+0x90>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcd0:	4b20      	ldr	r3, [pc, #128]	; (800dd54 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	0018      	movs	r0, r3
 800dcd8:	f7fe f92b 	bl	800bf32 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	3301      	adds	r3, #1
 800dce0:	d10b      	bne.n	800dcfa <prvAddCurrentTaskToDelayedList+0x3a>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d008      	beq.n	800dcfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dce8:	4b1a      	ldr	r3, [pc, #104]	; (800dd54 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	1d1a      	adds	r2, r3, #4
 800dcee:	4b1a      	ldr	r3, [pc, #104]	; (800dd58 <prvAddCurrentTaskToDelayedList+0x98>)
 800dcf0:	0011      	movs	r1, r2
 800dcf2:	0018      	movs	r0, r3
 800dcf4:	f7fe f8c5 	bl	800be82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dcf8:	e026      	b.n	800dd48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	18d3      	adds	r3, r2, r3
 800dd00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd02:	4b14      	ldr	r3, [pc, #80]	; (800dd54 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d209      	bcs.n	800dd26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd12:	4b12      	ldr	r3, [pc, #72]	; (800dd5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	4b0f      	ldr	r3, [pc, #60]	; (800dd54 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	0019      	movs	r1, r3
 800dd1e:	0010      	movs	r0, r2
 800dd20:	f7fe f8d1 	bl	800bec6 <vListInsert>
}
 800dd24:	e010      	b.n	800dd48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd26:	4b0e      	ldr	r3, [pc, #56]	; (800dd60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	4b0a      	ldr	r3, [pc, #40]	; (800dd54 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	0019      	movs	r1, r3
 800dd32:	0010      	movs	r0, r2
 800dd34:	f7fe f8c7 	bl	800bec6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dd38:	4b0a      	ldr	r3, [pc, #40]	; (800dd64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d202      	bcs.n	800dd48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dd42:	4b08      	ldr	r3, [pc, #32]	; (800dd64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	601a      	str	r2, [r3, #0]
}
 800dd48:	46c0      	nop			; (mov r8, r8)
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	b004      	add	sp, #16
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	20001114 	.word	0x20001114
 800dd54:	20000c3c 	.word	0x20000c3c
 800dd58:	200010fc 	.word	0x200010fc
 800dd5c:	200010cc 	.word	0x200010cc
 800dd60:	200010c8 	.word	0x200010c8
 800dd64:	20001130 	.word	0x20001130

0800dd68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dd68:	b590      	push	{r4, r7, lr}
 800dd6a:	b089      	sub	sp, #36	; 0x24
 800dd6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dd72:	f000 fa8b 	bl	800e28c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dd76:	4b17      	ldr	r3, [pc, #92]	; (800ddd4 <xTimerCreateTimerTask+0x6c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d020      	beq.n	800ddc0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dd82:	2300      	movs	r3, #0
 800dd84:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dd86:	003a      	movs	r2, r7
 800dd88:	1d39      	adds	r1, r7, #4
 800dd8a:	2308      	movs	r3, #8
 800dd8c:	18fb      	adds	r3, r7, r3
 800dd8e:	0018      	movs	r0, r3
 800dd90:	f7fe f836 	bl	800be00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dd94:	683c      	ldr	r4, [r7, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	490f      	ldr	r1, [pc, #60]	; (800ddd8 <xTimerCreateTimerTask+0x70>)
 800dd9c:	480f      	ldr	r0, [pc, #60]	; (800dddc <xTimerCreateTimerTask+0x74>)
 800dd9e:	9202      	str	r2, [sp, #8]
 800dda0:	9301      	str	r3, [sp, #4]
 800dda2:	2302      	movs	r3, #2
 800dda4:	9300      	str	r3, [sp, #0]
 800dda6:	2300      	movs	r3, #0
 800dda8:	0022      	movs	r2, r4
 800ddaa:	f7fe ff90 	bl	800ccce <xTaskCreateStatic>
 800ddae:	0002      	movs	r2, r0
 800ddb0:	4b0b      	ldr	r3, [pc, #44]	; (800dde0 <xTimerCreateTimerTask+0x78>)
 800ddb2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ddb4:	4b0a      	ldr	r3, [pc, #40]	; (800dde0 <xTimerCreateTimerTask+0x78>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d001      	beq.n	800ddc0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d101      	bne.n	800ddca <xTimerCreateTimerTask+0x62>
 800ddc6:	b672      	cpsid	i
 800ddc8:	e7fe      	b.n	800ddc8 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800ddca:	68fb      	ldr	r3, [r7, #12]
}
 800ddcc:	0018      	movs	r0, r3
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	b005      	add	sp, #20
 800ddd2:	bd90      	pop	{r4, r7, pc}
 800ddd4:	2000116c 	.word	0x2000116c
 800ddd8:	0800f340 	.word	0x0800f340
 800dddc:	0800deed 	.word	0x0800deed
 800dde0:	20001170 	.word	0x20001170

0800dde4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08a      	sub	sp, #40	; 0x28
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]
 800ddf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <xTimerGenericCommand+0x1c>
 800ddfc:	b672      	cpsid	i
 800ddfe:	e7fe      	b.n	800ddfe <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800de00:	4b1d      	ldr	r3, [pc, #116]	; (800de78 <xTimerGenericCommand+0x94>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d031      	beq.n	800de6c <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800de08:	2114      	movs	r1, #20
 800de0a:	187b      	adds	r3, r7, r1
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de10:	187b      	adds	r3, r7, r1
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800de16:	187b      	adds	r3, r7, r1
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	2b05      	cmp	r3, #5
 800de20:	dc1a      	bgt.n	800de58 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de22:	f7ff fde1 	bl	800d9e8 <xTaskGetSchedulerState>
 800de26:	0003      	movs	r3, r0
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d10a      	bne.n	800de42 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800de2c:	4b12      	ldr	r3, [pc, #72]	; (800de78 <xTimerGenericCommand+0x94>)
 800de2e:	6818      	ldr	r0, [r3, #0]
 800de30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de32:	2314      	movs	r3, #20
 800de34:	18f9      	adds	r1, r7, r3
 800de36:	2300      	movs	r3, #0
 800de38:	f7fe f9e9 	bl	800c20e <xQueueGenericSend>
 800de3c:	0003      	movs	r3, r0
 800de3e:	627b      	str	r3, [r7, #36]	; 0x24
 800de40:	e014      	b.n	800de6c <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de42:	4b0d      	ldr	r3, [pc, #52]	; (800de78 <xTimerGenericCommand+0x94>)
 800de44:	6818      	ldr	r0, [r3, #0]
 800de46:	2314      	movs	r3, #20
 800de48:	18f9      	adds	r1, r7, r3
 800de4a:	2300      	movs	r3, #0
 800de4c:	2200      	movs	r2, #0
 800de4e:	f7fe f9de 	bl	800c20e <xQueueGenericSend>
 800de52:	0003      	movs	r3, r0
 800de54:	627b      	str	r3, [r7, #36]	; 0x24
 800de56:	e009      	b.n	800de6c <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800de58:	4b07      	ldr	r3, [pc, #28]	; (800de78 <xTimerGenericCommand+0x94>)
 800de5a:	6818      	ldr	r0, [r3, #0]
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	2314      	movs	r3, #20
 800de60:	18f9      	adds	r1, r7, r3
 800de62:	2300      	movs	r3, #0
 800de64:	f7fe fa97 	bl	800c396 <xQueueGenericSendFromISR>
 800de68:	0003      	movs	r3, r0
 800de6a:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800de6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de6e:	0018      	movs	r0, r3
 800de70:	46bd      	mov	sp, r7
 800de72:	b00a      	add	sp, #40	; 0x28
 800de74:	bd80      	pop	{r7, pc}
 800de76:	46c0      	nop			; (mov r8, r8)
 800de78:	2000116c 	.word	0x2000116c

0800de7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b086      	sub	sp, #24
 800de80:	af02      	add	r7, sp, #8
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de86:	4b18      	ldr	r3, [pc, #96]	; (800dee8 <prvProcessExpiredTimer+0x6c>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3304      	adds	r3, #4
 800de94:	0018      	movs	r0, r3
 800de96:	f7fe f84c 	bl	800bf32 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	69db      	ldr	r3, [r3, #28]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d119      	bne.n	800ded6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	699a      	ldr	r2, [r3, #24]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	18d1      	adds	r1, r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	683a      	ldr	r2, [r7, #0]
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f000 f8b6 	bl	800e020 <prvInsertTimerInActiveList>
 800deb4:	1e03      	subs	r3, r0, #0
 800deb6:	d00e      	beq.n	800ded6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	2300      	movs	r3, #0
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	2300      	movs	r3, #0
 800dec2:	2100      	movs	r1, #0
 800dec4:	f7ff ff8e 	bl	800dde4 <xTimerGenericCommand>
 800dec8:	0003      	movs	r3, r0
 800deca:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d101      	bne.n	800ded6 <prvProcessExpiredTimer+0x5a>
 800ded2:	b672      	cpsid	i
 800ded4:	e7fe      	b.n	800ded4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	0010      	movs	r0, r2
 800dede:	4798      	blx	r3
}
 800dee0:	46c0      	nop			; (mov r8, r8)
 800dee2:	46bd      	mov	sp, r7
 800dee4:	b004      	add	sp, #16
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	20001164 	.word	0x20001164

0800deec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800def4:	2308      	movs	r3, #8
 800def6:	18fb      	adds	r3, r7, r3
 800def8:	0018      	movs	r0, r3
 800defa:	f000 f851 	bl	800dfa0 <prvGetNextExpireTime>
 800defe:	0003      	movs	r3, r0
 800df00:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	0011      	movs	r1, r2
 800df08:	0018      	movs	r0, r3
 800df0a:	f000 f803 	bl	800df14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800df0e:	f000 f8c9 	bl	800e0a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df12:	e7ef      	b.n	800def4 <prvTimerTask+0x8>

0800df14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800df1e:	f7ff f9cd 	bl	800d2bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df22:	2308      	movs	r3, #8
 800df24:	18fb      	adds	r3, r7, r3
 800df26:	0018      	movs	r0, r3
 800df28:	f000 f85a 	bl	800dfe0 <prvSampleTimeNow>
 800df2c:	0003      	movs	r3, r0
 800df2e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d129      	bne.n	800df8a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10c      	bne.n	800df56 <prvProcessTimerOrBlockTask+0x42>
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	429a      	cmp	r2, r3
 800df42:	d808      	bhi.n	800df56 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800df44:	f7ff f9c6 	bl	800d2d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	0011      	movs	r1, r2
 800df4e:	0018      	movs	r0, r3
 800df50:	f7ff ff94 	bl	800de7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800df54:	e01b      	b.n	800df8e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d006      	beq.n	800df6a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df5c:	4b0e      	ldr	r3, [pc, #56]	; (800df98 <prvProcessTimerOrBlockTask+0x84>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	425a      	negs	r2, r3
 800df64:	4153      	adcs	r3, r2
 800df66:	b2db      	uxtb	r3, r3
 800df68:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df6a:	4b0c      	ldr	r3, [pc, #48]	; (800df9c <prvProcessTimerOrBlockTask+0x88>)
 800df6c:	6818      	ldr	r0, [r3, #0]
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	1ad3      	subs	r3, r2, r3
 800df74:	683a      	ldr	r2, [r7, #0]
 800df76:	0019      	movs	r1, r3
 800df78:	f7fe fe76 	bl	800cc68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df7c:	f7ff f9aa 	bl	800d2d4 <xTaskResumeAll>
 800df80:	1e03      	subs	r3, r0, #0
 800df82:	d104      	bne.n	800df8e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800df84:	f000 fa4c 	bl	800e420 <vPortYield>
}
 800df88:	e001      	b.n	800df8e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800df8a:	f7ff f9a3 	bl	800d2d4 <xTaskResumeAll>
}
 800df8e:	46c0      	nop			; (mov r8, r8)
 800df90:	46bd      	mov	sp, r7
 800df92:	b004      	add	sp, #16
 800df94:	bd80      	pop	{r7, pc}
 800df96:	46c0      	nop			; (mov r8, r8)
 800df98:	20001168 	.word	0x20001168
 800df9c:	2000116c 	.word	0x2000116c

0800dfa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dfa8:	4b0c      	ldr	r3, [pc, #48]	; (800dfdc <prvGetNextExpireTime+0x3c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	425a      	negs	r2, r3
 800dfb0:	4153      	adcs	r3, r2
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	001a      	movs	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d105      	bne.n	800dfce <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfc2:	4b06      	ldr	r3, [pc, #24]	; (800dfdc <prvGetNextExpireTime+0x3c>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	60fb      	str	r3, [r7, #12]
 800dfcc:	e001      	b.n	800dfd2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
}
 800dfd4:	0018      	movs	r0, r3
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	b004      	add	sp, #16
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20001164 	.word	0x20001164

0800dfe0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfe8:	f7ff fa00 	bl	800d3ec <xTaskGetTickCount>
 800dfec:	0003      	movs	r3, r0
 800dfee:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800dff0:	4b0a      	ldr	r3, [pc, #40]	; (800e01c <prvSampleTimeNow+0x3c>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d205      	bcs.n	800e006 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800dffa:	f000 f8ed 	bl	800e1d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2201      	movs	r2, #1
 800e002:	601a      	str	r2, [r3, #0]
 800e004:	e002      	b.n	800e00c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e00c:	4b03      	ldr	r3, [pc, #12]	; (800e01c <prvSampleTimeNow+0x3c>)
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800e012:	68fb      	ldr	r3, [r7, #12]
}
 800e014:	0018      	movs	r0, r3
 800e016:	46bd      	mov	sp, r7
 800e018:	b004      	add	sp, #16
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	20001174 	.word	0x20001174

0800e020 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e02e:	2300      	movs	r3, #0
 800e030:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	68ba      	ldr	r2, [r7, #8]
 800e036:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	68fa      	ldr	r2, [r7, #12]
 800e03c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e03e:	68ba      	ldr	r2, [r7, #8]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	429a      	cmp	r2, r3
 800e044:	d812      	bhi.n	800e06c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	1ad2      	subs	r2, r2, r3
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	699b      	ldr	r3, [r3, #24]
 800e050:	429a      	cmp	r2, r3
 800e052:	d302      	bcc.n	800e05a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e054:	2301      	movs	r3, #1
 800e056:	617b      	str	r3, [r7, #20]
 800e058:	e01b      	b.n	800e092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e05a:	4b10      	ldr	r3, [pc, #64]	; (800e09c <prvInsertTimerInActiveList+0x7c>)
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	3304      	adds	r3, #4
 800e062:	0019      	movs	r1, r3
 800e064:	0010      	movs	r0, r2
 800e066:	f7fd ff2e 	bl	800bec6 <vListInsert>
 800e06a:	e012      	b.n	800e092 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	429a      	cmp	r2, r3
 800e072:	d206      	bcs.n	800e082 <prvInsertTimerInActiveList+0x62>
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d302      	bcc.n	800e082 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e07c:	2301      	movs	r3, #1
 800e07e:	617b      	str	r3, [r7, #20]
 800e080:	e007      	b.n	800e092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e082:	4b07      	ldr	r3, [pc, #28]	; (800e0a0 <prvInsertTimerInActiveList+0x80>)
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	3304      	adds	r3, #4
 800e08a:	0019      	movs	r1, r3
 800e08c:	0010      	movs	r0, r2
 800e08e:	f7fd ff1a 	bl	800bec6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e092:	697b      	ldr	r3, [r7, #20]
}
 800e094:	0018      	movs	r0, r3
 800e096:	46bd      	mov	sp, r7
 800e098:	b006      	add	sp, #24
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	20001168 	.word	0x20001168
 800e0a0:	20001164 	.word	0x20001164

0800e0a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b08c      	sub	sp, #48	; 0x30
 800e0a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0aa:	e082      	b.n	800e1b2 <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e0ac:	2308      	movs	r3, #8
 800e0ae:	18fb      	adds	r3, r7, r3
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	da10      	bge.n	800e0d8 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e0b6:	2308      	movs	r3, #8
 800e0b8:	18fb      	adds	r3, r7, r3
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <prvProcessReceivedCommands+0x24>
 800e0c4:	b672      	cpsid	i
 800e0c6:	e7fe      	b.n	800e0c6 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ce:	6858      	ldr	r0, [r3, #4]
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	689b      	ldr	r3, [r3, #8]
 800e0d4:	0019      	movs	r1, r3
 800e0d6:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0d8:	2308      	movs	r3, #8
 800e0da:	18fb      	adds	r3, r7, r3
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	db66      	blt.n	800e1b0 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0e2:	2308      	movs	r3, #8
 800e0e4:	18fb      	adds	r3, r7, r3
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	695b      	ldr	r3, [r3, #20]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d004      	beq.n	800e0fc <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0f2:	6a3b      	ldr	r3, [r7, #32]
 800e0f4:	3304      	adds	r3, #4
 800e0f6:	0018      	movs	r0, r3
 800e0f8:	f7fd ff1b 	bl	800bf32 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0fc:	1d3b      	adds	r3, r7, #4
 800e0fe:	0018      	movs	r0, r3
 800e100:	f7ff ff6e 	bl	800dfe0 <prvSampleTimeNow>
 800e104:	0003      	movs	r3, r0
 800e106:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800e108:	2308      	movs	r3, #8
 800e10a:	18fb      	adds	r3, r7, r3
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b09      	cmp	r3, #9
 800e110:	d84f      	bhi.n	800e1b2 <prvProcessReceivedCommands+0x10e>
 800e112:	009a      	lsls	r2, r3, #2
 800e114:	4b2e      	ldr	r3, [pc, #184]	; (800e1d0 <prvProcessReceivedCommands+0x12c>)
 800e116:	18d3      	adds	r3, r2, r3
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e11c:	2008      	movs	r0, #8
 800e11e:	183b      	adds	r3, r7, r0
 800e120:	685a      	ldr	r2, [r3, #4]
 800e122:	6a3b      	ldr	r3, [r7, #32]
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	18d1      	adds	r1, r2, r3
 800e128:	183b      	adds	r3, r7, r0
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	69fa      	ldr	r2, [r7, #28]
 800e12e:	6a38      	ldr	r0, [r7, #32]
 800e130:	f7ff ff76 	bl	800e020 <prvInsertTimerInActiveList>
 800e134:	1e03      	subs	r3, r0, #0
 800e136:	d03c      	beq.n	800e1b2 <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e138:	6a3b      	ldr	r3, [r7, #32]
 800e13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13c:	6a3a      	ldr	r2, [r7, #32]
 800e13e:	0010      	movs	r0, r2
 800e140:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	69db      	ldr	r3, [r3, #28]
 800e146:	2b01      	cmp	r3, #1
 800e148:	d133      	bne.n	800e1b2 <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e14a:	2308      	movs	r3, #8
 800e14c:	18fb      	adds	r3, r7, r3
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	6a3b      	ldr	r3, [r7, #32]
 800e152:	699b      	ldr	r3, [r3, #24]
 800e154:	18d2      	adds	r2, r2, r3
 800e156:	6a38      	ldr	r0, [r7, #32]
 800e158:	2300      	movs	r3, #0
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	2300      	movs	r3, #0
 800e15e:	2100      	movs	r1, #0
 800e160:	f7ff fe40 	bl	800dde4 <xTimerGenericCommand>
 800e164:	0003      	movs	r3, r0
 800e166:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d121      	bne.n	800e1b2 <prvProcessReceivedCommands+0x10e>
 800e16e:	b672      	cpsid	i
 800e170:	e7fe      	b.n	800e170 <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e172:	2308      	movs	r3, #8
 800e174:	18fb      	adds	r3, r7, r3
 800e176:	685a      	ldr	r2, [r3, #4]
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d101      	bne.n	800e188 <prvProcessReceivedCommands+0xe4>
 800e184:	b672      	cpsid	i
 800e186:	e7fe      	b.n	800e186 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e188:	6a3b      	ldr	r3, [r7, #32]
 800e18a:	699a      	ldr	r2, [r3, #24]
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	18d1      	adds	r1, r2, r3
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	69fa      	ldr	r2, [r7, #28]
 800e194:	6a38      	ldr	r0, [r7, #32]
 800e196:	f7ff ff43 	bl	800e020 <prvInsertTimerInActiveList>
					break;
 800e19a:	e00a      	b.n	800e1b2 <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e19c:	6a3b      	ldr	r3, [r7, #32]
 800e19e:	222c      	movs	r2, #44	; 0x2c
 800e1a0:	5c9b      	ldrb	r3, [r3, r2]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d105      	bne.n	800e1b2 <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	0018      	movs	r0, r3
 800e1aa:	f000 fa87 	bl	800e6bc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e1ae:	e000      	b.n	800e1b2 <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e1b0:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1b2:	4b08      	ldr	r3, [pc, #32]	; (800e1d4 <prvProcessReceivedCommands+0x130>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2208      	movs	r2, #8
 800e1b8:	18b9      	adds	r1, r7, r2
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	0018      	movs	r0, r3
 800e1be:	f7fe f9c0 	bl	800c542 <xQueueReceive>
 800e1c2:	1e03      	subs	r3, r0, #0
 800e1c4:	d000      	beq.n	800e1c8 <prvProcessReceivedCommands+0x124>
 800e1c6:	e771      	b.n	800e0ac <prvProcessReceivedCommands+0x8>
	}
}
 800e1c8:	46c0      	nop			; (mov r8, r8)
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	b00a      	add	sp, #40	; 0x28
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	0800fe78 	.word	0x0800fe78
 800e1d4:	2000116c 	.word	0x2000116c

0800e1d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1de:	e03e      	b.n	800e25e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1e0:	4b28      	ldr	r3, [pc, #160]	; (800e284 <prvSwitchTimerLists+0xac>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1ea:	4b26      	ldr	r3, [pc, #152]	; (800e284 <prvSwitchTimerLists+0xac>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	0018      	movs	r0, r3
 800e1fa:	f7fd fe9a 	bl	800bf32 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	0010      	movs	r0, r2
 800e206:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	69db      	ldr	r3, [r3, #28]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d126      	bne.n	800e25e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	699b      	ldr	r3, [r3, #24]
 800e214:	693a      	ldr	r2, [r7, #16]
 800e216:	18d3      	adds	r3, r2, r3
 800e218:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e21a:	68ba      	ldr	r2, [r7, #8]
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d90e      	bls.n	800e240 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	68ba      	ldr	r2, [r7, #8]
 800e226:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	68fa      	ldr	r2, [r7, #12]
 800e22c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e22e:	4b15      	ldr	r3, [pc, #84]	; (800e284 <prvSwitchTimerLists+0xac>)
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	3304      	adds	r3, #4
 800e236:	0019      	movs	r1, r3
 800e238:	0010      	movs	r0, r2
 800e23a:	f7fd fe44 	bl	800bec6 <vListInsert>
 800e23e:	e00e      	b.n	800e25e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e240:	693a      	ldr	r2, [r7, #16]
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	2300      	movs	r3, #0
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	2300      	movs	r3, #0
 800e24a:	2100      	movs	r1, #0
 800e24c:	f7ff fdca 	bl	800dde4 <xTimerGenericCommand>
 800e250:	0003      	movs	r3, r0
 800e252:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d101      	bne.n	800e25e <prvSwitchTimerLists+0x86>
 800e25a:	b672      	cpsid	i
 800e25c:	e7fe      	b.n	800e25c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e25e:	4b09      	ldr	r3, [pc, #36]	; (800e284 <prvSwitchTimerLists+0xac>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d1bb      	bne.n	800e1e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e268:	4b06      	ldr	r3, [pc, #24]	; (800e284 <prvSwitchTimerLists+0xac>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e26e:	4b06      	ldr	r3, [pc, #24]	; (800e288 <prvSwitchTimerLists+0xb0>)
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	4b04      	ldr	r3, [pc, #16]	; (800e284 <prvSwitchTimerLists+0xac>)
 800e274:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800e276:	4b04      	ldr	r3, [pc, #16]	; (800e288 <prvSwitchTimerLists+0xb0>)
 800e278:	697a      	ldr	r2, [r7, #20]
 800e27a:	601a      	str	r2, [r3, #0]
}
 800e27c:	46c0      	nop			; (mov r8, r8)
 800e27e:	46bd      	mov	sp, r7
 800e280:	b006      	add	sp, #24
 800e282:	bd80      	pop	{r7, pc}
 800e284:	20001164 	.word	0x20001164
 800e288:	20001168 	.word	0x20001168

0800e28c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e292:	f000 f8d5 	bl	800e440 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e296:	4b17      	ldr	r3, [pc, #92]	; (800e2f4 <prvCheckForValidListAndQueue+0x68>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d124      	bne.n	800e2e8 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 800e29e:	4b16      	ldr	r3, [pc, #88]	; (800e2f8 <prvCheckForValidListAndQueue+0x6c>)
 800e2a0:	0018      	movs	r0, r3
 800e2a2:	f7fd fdc5 	bl	800be30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e2a6:	4b15      	ldr	r3, [pc, #84]	; (800e2fc <prvCheckForValidListAndQueue+0x70>)
 800e2a8:	0018      	movs	r0, r3
 800e2aa:	f7fd fdc1 	bl	800be30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e2ae:	4b14      	ldr	r3, [pc, #80]	; (800e300 <prvCheckForValidListAndQueue+0x74>)
 800e2b0:	4a11      	ldr	r2, [pc, #68]	; (800e2f8 <prvCheckForValidListAndQueue+0x6c>)
 800e2b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e2b4:	4b13      	ldr	r3, [pc, #76]	; (800e304 <prvCheckForValidListAndQueue+0x78>)
 800e2b6:	4a11      	ldr	r2, [pc, #68]	; (800e2fc <prvCheckForValidListAndQueue+0x70>)
 800e2b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e2ba:	4913      	ldr	r1, [pc, #76]	; (800e308 <prvCheckForValidListAndQueue+0x7c>)
 800e2bc:	4a13      	ldr	r2, [pc, #76]	; (800e30c <prvCheckForValidListAndQueue+0x80>)
 800e2be:	2300      	movs	r3, #0
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	000b      	movs	r3, r1
 800e2c4:	2110      	movs	r1, #16
 800e2c6:	200a      	movs	r0, #10
 800e2c8:	f7fd feaf 	bl	800c02a <xQueueGenericCreateStatic>
 800e2cc:	0002      	movs	r2, r0
 800e2ce:	4b09      	ldr	r3, [pc, #36]	; (800e2f4 <prvCheckForValidListAndQueue+0x68>)
 800e2d0:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e2d2:	4b08      	ldr	r3, [pc, #32]	; (800e2f4 <prvCheckForValidListAndQueue+0x68>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d006      	beq.n	800e2e8 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e2da:	4b06      	ldr	r3, [pc, #24]	; (800e2f4 <prvCheckForValidListAndQueue+0x68>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a0c      	ldr	r2, [pc, #48]	; (800e310 <prvCheckForValidListAndQueue+0x84>)
 800e2e0:	0011      	movs	r1, r2
 800e2e2:	0018      	movs	r0, r3
 800e2e4:	f7fe fc6e 	bl	800cbc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2e8:	f000 f8bc 	bl	800e464 <vPortExitCritical>
}
 800e2ec:	46c0      	nop			; (mov r8, r8)
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	46c0      	nop			; (mov r8, r8)
 800e2f4:	2000116c 	.word	0x2000116c
 800e2f8:	2000113c 	.word	0x2000113c
 800e2fc:	20001150 	.word	0x20001150
 800e300:	20001164 	.word	0x20001164
 800e304:	20001168 	.word	0x20001168
 800e308:	20001218 	.word	0x20001218
 800e30c:	20001178 	.word	0x20001178
 800e310:	0800f348 	.word	0x0800f348

0800e314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	3b04      	subs	r3, #4
 800e324:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2280      	movs	r2, #128	; 0x80
 800e32a:	0452      	lsls	r2, r2, #17
 800e32c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	3b04      	subs	r3, #4
 800e332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800e334:	68ba      	ldr	r2, [r7, #8]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	3b04      	subs	r3, #4
 800e33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e340:	4a08      	ldr	r2, [pc, #32]	; (800e364 <pxPortInitialiseStack+0x50>)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	3b14      	subs	r3, #20
 800e34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	3b20      	subs	r3, #32
 800e356:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e358:	68fb      	ldr	r3, [r7, #12]
}
 800e35a:	0018      	movs	r0, r3
 800e35c:	46bd      	mov	sp, r7
 800e35e:	b004      	add	sp, #16
 800e360:	bd80      	pop	{r7, pc}
 800e362:	46c0      	nop			; (mov r8, r8)
 800e364:	0800e369 	.word	0x0800e369

0800e368 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e36e:	2300      	movs	r3, #0
 800e370:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e372:	4b07      	ldr	r3, [pc, #28]	; (800e390 <prvTaskExitError+0x28>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3301      	adds	r3, #1
 800e378:	d001      	beq.n	800e37e <prvTaskExitError+0x16>
 800e37a:	b672      	cpsid	i
 800e37c:	e7fe      	b.n	800e37c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800e37e:	b672      	cpsid	i
	while( ulDummy == 0 )
 800e380:	46c0      	nop			; (mov r8, r8)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d0fc      	beq.n	800e382 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e388:	46c0      	nop			; (mov r8, r8)
 800e38a:	46bd      	mov	sp, r7
 800e38c:	b002      	add	sp, #8
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	2000002c 	.word	0x2000002c

0800e394 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800e398:	46c0      	nop			; (mov r8, r8)
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
	...

0800e3a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e3a0:	4a0b      	ldr	r2, [pc, #44]	; (800e3d0 <pxCurrentTCBConst2>)
 800e3a2:	6813      	ldr	r3, [r2, #0]
 800e3a4:	6818      	ldr	r0, [r3, #0]
 800e3a6:	3020      	adds	r0, #32
 800e3a8:	f380 8809 	msr	PSP, r0
 800e3ac:	2002      	movs	r0, #2
 800e3ae:	f380 8814 	msr	CONTROL, r0
 800e3b2:	f3bf 8f6f 	isb	sy
 800e3b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800e3b8:	46ae      	mov	lr, r5
 800e3ba:	bc08      	pop	{r3}
 800e3bc:	bc04      	pop	{r2}
 800e3be:	b662      	cpsie	i
 800e3c0:	4718      	bx	r3
 800e3c2:	46c0      	nop			; (mov r8, r8)
 800e3c4:	46c0      	nop			; (mov r8, r8)
 800e3c6:	46c0      	nop			; (mov r8, r8)
 800e3c8:	46c0      	nop			; (mov r8, r8)
 800e3ca:	46c0      	nop			; (mov r8, r8)
 800e3cc:	46c0      	nop			; (mov r8, r8)
 800e3ce:	46c0      	nop			; (mov r8, r8)

0800e3d0 <pxCurrentTCBConst2>:
 800e3d0:	20000c3c 	.word	0x20000c3c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800e3d4:	46c0      	nop			; (mov r8, r8)
 800e3d6:	46c0      	nop			; (mov r8, r8)

0800e3d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e3dc:	4b0e      	ldr	r3, [pc, #56]	; (800e418 <xPortStartScheduler+0x40>)
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	4b0d      	ldr	r3, [pc, #52]	; (800e418 <xPortStartScheduler+0x40>)
 800e3e2:	21ff      	movs	r1, #255	; 0xff
 800e3e4:	0409      	lsls	r1, r1, #16
 800e3e6:	430a      	orrs	r2, r1
 800e3e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e3ea:	4b0b      	ldr	r3, [pc, #44]	; (800e418 <xPortStartScheduler+0x40>)
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	4b0a      	ldr	r3, [pc, #40]	; (800e418 <xPortStartScheduler+0x40>)
 800e3f0:	21ff      	movs	r1, #255	; 0xff
 800e3f2:	0609      	lsls	r1, r1, #24
 800e3f4:	430a      	orrs	r2, r1
 800e3f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800e3f8:	f000 f898 	bl	800e52c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e3fc:	4b07      	ldr	r3, [pc, #28]	; (800e41c <xPortStartScheduler+0x44>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800e402:	f7ff ffcd 	bl	800e3a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e406:	f7ff f8b3 	bl	800d570 <vTaskSwitchContext>
	prvTaskExitError();
 800e40a:	f7ff ffad 	bl	800e368 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e40e:	2300      	movs	r3, #0
}
 800e410:	0018      	movs	r0, r3
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	46c0      	nop			; (mov r8, r8)
 800e418:	e000ed20 	.word	0xe000ed20
 800e41c:	2000002c 	.word	0x2000002c

0800e420 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800e424:	4b05      	ldr	r3, [pc, #20]	; (800e43c <vPortYield+0x1c>)
 800e426:	2280      	movs	r2, #128	; 0x80
 800e428:	0552      	lsls	r2, r2, #21
 800e42a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800e42c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e430:	f3bf 8f6f 	isb	sy
}
 800e434:	46c0      	nop			; (mov r8, r8)
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	46c0      	nop			; (mov r8, r8)
 800e43c:	e000ed04 	.word	0xe000ed04

0800e440 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e444:	b672      	cpsid	i
    uxCriticalNesting++;
 800e446:	4b06      	ldr	r3, [pc, #24]	; (800e460 <vPortEnterCritical+0x20>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	1c5a      	adds	r2, r3, #1
 800e44c:	4b04      	ldr	r3, [pc, #16]	; (800e460 <vPortEnterCritical+0x20>)
 800e44e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800e450:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e454:	f3bf 8f6f 	isb	sy
}
 800e458:	46c0      	nop			; (mov r8, r8)
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	46c0      	nop			; (mov r8, r8)
 800e460:	2000002c 	.word	0x2000002c

0800e464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e468:	4b09      	ldr	r3, [pc, #36]	; (800e490 <vPortExitCritical+0x2c>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d101      	bne.n	800e474 <vPortExitCritical+0x10>
 800e470:	b672      	cpsid	i
 800e472:	e7fe      	b.n	800e472 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800e474:	4b06      	ldr	r3, [pc, #24]	; (800e490 <vPortExitCritical+0x2c>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	1e5a      	subs	r2, r3, #1
 800e47a:	4b05      	ldr	r3, [pc, #20]	; (800e490 <vPortExitCritical+0x2c>)
 800e47c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800e47e:	4b04      	ldr	r3, [pc, #16]	; (800e490 <vPortExitCritical+0x2c>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d100      	bne.n	800e488 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800e486:	b662      	cpsie	i
    }
}
 800e488:	46c0      	nop			; (mov r8, r8)
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	46c0      	nop			; (mov r8, r8)
 800e490:	2000002c 	.word	0x2000002c

0800e494 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800e494:	f3ef 8010 	mrs	r0, PRIMASK
 800e498:	b672      	cpsid	i
 800e49a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800e49c:	46c0      	nop			; (mov r8, r8)
 800e49e:	0018      	movs	r0, r3

0800e4a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800e4a0:	f380 8810 	msr	PRIMASK, r0
 800e4a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800e4a6:	46c0      	nop			; (mov r8, r8)
	...

0800e4b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e4b0:	f3ef 8009 	mrs	r0, PSP
 800e4b4:	4b0e      	ldr	r3, [pc, #56]	; (800e4f0 <pxCurrentTCBConst>)
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	3820      	subs	r0, #32
 800e4ba:	6010      	str	r0, [r2, #0]
 800e4bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e4be:	4644      	mov	r4, r8
 800e4c0:	464d      	mov	r5, r9
 800e4c2:	4656      	mov	r6, sl
 800e4c4:	465f      	mov	r7, fp
 800e4c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e4c8:	b508      	push	{r3, lr}
 800e4ca:	b672      	cpsid	i
 800e4cc:	f7ff f850 	bl	800d570 <vTaskSwitchContext>
 800e4d0:	b662      	cpsie	i
 800e4d2:	bc0c      	pop	{r2, r3}
 800e4d4:	6811      	ldr	r1, [r2, #0]
 800e4d6:	6808      	ldr	r0, [r1, #0]
 800e4d8:	3010      	adds	r0, #16
 800e4da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e4dc:	46a0      	mov	r8, r4
 800e4de:	46a9      	mov	r9, r5
 800e4e0:	46b2      	mov	sl, r6
 800e4e2:	46bb      	mov	fp, r7
 800e4e4:	f380 8809 	msr	PSP, r0
 800e4e8:	3820      	subs	r0, #32
 800e4ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e4ec:	4718      	bx	r3
 800e4ee:	46c0      	nop			; (mov r8, r8)

0800e4f0 <pxCurrentTCBConst>:
 800e4f0:	20000c3c 	.word	0x20000c3c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800e4f4:	46c0      	nop			; (mov r8, r8)
 800e4f6:	46c0      	nop			; (mov r8, r8)

0800e4f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4fe:	f7ff ffc9 	bl	800e494 <ulSetInterruptMaskFromISR>
 800e502:	0003      	movs	r3, r0
 800e504:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e506:	f7fe ff7f 	bl	800d408 <xTaskIncrementTick>
 800e50a:	1e03      	subs	r3, r0, #0
 800e50c:	d003      	beq.n	800e516 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800e50e:	4b06      	ldr	r3, [pc, #24]	; (800e528 <SysTick_Handler+0x30>)
 800e510:	2280      	movs	r2, #128	; 0x80
 800e512:	0552      	lsls	r2, r2, #21
 800e514:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	0018      	movs	r0, r3
 800e51a:	f7ff ffc1 	bl	800e4a0 <vClearInterruptMaskFromISR>
}
 800e51e:	46c0      	nop			; (mov r8, r8)
 800e520:	46bd      	mov	sp, r7
 800e522:	b002      	add	sp, #8
 800e524:	bd80      	pop	{r7, pc}
 800e526:	46c0      	nop			; (mov r8, r8)
 800e528:	e000ed04 	.word	0xe000ed04

0800e52c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800e530:	4b0b      	ldr	r3, [pc, #44]	; (800e560 <prvSetupTimerInterrupt+0x34>)
 800e532:	2200      	movs	r2, #0
 800e534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800e536:	4b0b      	ldr	r3, [pc, #44]	; (800e564 <prvSetupTimerInterrupt+0x38>)
 800e538:	2200      	movs	r2, #0
 800e53a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e53c:	4b0a      	ldr	r3, [pc, #40]	; (800e568 <prvSetupTimerInterrupt+0x3c>)
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	23fa      	movs	r3, #250	; 0xfa
 800e542:	0099      	lsls	r1, r3, #2
 800e544:	0010      	movs	r0, r2
 800e546:	f7f1 fddf 	bl	8000108 <__udivsi3>
 800e54a:	0003      	movs	r3, r0
 800e54c:	001a      	movs	r2, r3
 800e54e:	4b07      	ldr	r3, [pc, #28]	; (800e56c <prvSetupTimerInterrupt+0x40>)
 800e550:	3a01      	subs	r2, #1
 800e552:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e554:	4b02      	ldr	r3, [pc, #8]	; (800e560 <prvSetupTimerInterrupt+0x34>)
 800e556:	2207      	movs	r2, #7
 800e558:	601a      	str	r2, [r3, #0]
}
 800e55a:	46c0      	nop			; (mov r8, r8)
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	e000e010 	.word	0xe000e010
 800e564:	e000e018 	.word	0xe000e018
 800e568:	20000024 	.word	0x20000024
 800e56c:	e000e014 	.word	0xe000e014

0800e570 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e578:	2300      	movs	r3, #0
 800e57a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800e57c:	f7fe fe9e 	bl	800d2bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e580:	4b49      	ldr	r3, [pc, #292]	; (800e6a8 <pvPortMalloc+0x138>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e588:	f000 f8e0 	bl	800e74c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e58c:	4b47      	ldr	r3, [pc, #284]	; (800e6ac <pvPortMalloc+0x13c>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	4013      	ands	r3, r2
 800e594:	d000      	beq.n	800e598 <pvPortMalloc+0x28>
 800e596:	e079      	b.n	800e68c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d012      	beq.n	800e5c4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800e59e:	2208      	movs	r2, #8
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	189b      	adds	r3, r3, r2
 800e5a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2207      	movs	r2, #7
 800e5aa:	4013      	ands	r3, r2
 800e5ac:	d00a      	beq.n	800e5c4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2207      	movs	r2, #7
 800e5b2:	4393      	bics	r3, r2
 800e5b4:	3308      	adds	r3, #8
 800e5b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2207      	movs	r2, #7
 800e5bc:	4013      	ands	r3, r2
 800e5be:	d001      	beq.n	800e5c4 <pvPortMalloc+0x54>
 800e5c0:	b672      	cpsid	i
 800e5c2:	e7fe      	b.n	800e5c2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d060      	beq.n	800e68c <pvPortMalloc+0x11c>
 800e5ca:	4b39      	ldr	r3, [pc, #228]	; (800e6b0 <pvPortMalloc+0x140>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d85b      	bhi.n	800e68c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e5d4:	4b37      	ldr	r3, [pc, #220]	; (800e6b4 <pvPortMalloc+0x144>)
 800e5d6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800e5d8:	4b36      	ldr	r3, [pc, #216]	; (800e6b4 <pvPortMalloc+0x144>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5de:	e004      	b.n	800e5ea <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d903      	bls.n	800e5fc <pvPortMalloc+0x8c>
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d1f1      	bne.n	800e5e0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e5fc:	4b2a      	ldr	r3, [pc, #168]	; (800e6a8 <pvPortMalloc+0x138>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	697a      	ldr	r2, [r7, #20]
 800e602:	429a      	cmp	r2, r3
 800e604:	d042      	beq.n	800e68c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2208      	movs	r2, #8
 800e60c:	189b      	adds	r3, r3, r2
 800e60e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	685a      	ldr	r2, [r3, #4]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	1ad2      	subs	r2, r2, r3
 800e620:	2308      	movs	r3, #8
 800e622:	005b      	lsls	r3, r3, #1
 800e624:	429a      	cmp	r2, r3
 800e626:	d916      	bls.n	800e656 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e628:	697a      	ldr	r2, [r7, #20]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	18d3      	adds	r3, r2, r3
 800e62e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	2207      	movs	r2, #7
 800e634:	4013      	ands	r3, r2
 800e636:	d001      	beq.n	800e63c <pvPortMalloc+0xcc>
 800e638:	b672      	cpsid	i
 800e63a:	e7fe      	b.n	800e63a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	685a      	ldr	r2, [r3, #4]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	1ad2      	subs	r2, r2, r3
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	0018      	movs	r0, r3
 800e652:	f000 f8db 	bl	800e80c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e656:	4b16      	ldr	r3, [pc, #88]	; (800e6b0 <pvPortMalloc+0x140>)
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	1ad2      	subs	r2, r2, r3
 800e660:	4b13      	ldr	r3, [pc, #76]	; (800e6b0 <pvPortMalloc+0x140>)
 800e662:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e664:	4b12      	ldr	r3, [pc, #72]	; (800e6b0 <pvPortMalloc+0x140>)
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	4b13      	ldr	r3, [pc, #76]	; (800e6b8 <pvPortMalloc+0x148>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d203      	bcs.n	800e678 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e670:	4b0f      	ldr	r3, [pc, #60]	; (800e6b0 <pvPortMalloc+0x140>)
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	4b10      	ldr	r3, [pc, #64]	; (800e6b8 <pvPortMalloc+0x148>)
 800e676:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	685a      	ldr	r2, [r3, #4]
 800e67c:	4b0b      	ldr	r3, [pc, #44]	; (800e6ac <pvPortMalloc+0x13c>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	431a      	orrs	r2, r3
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	2200      	movs	r2, #0
 800e68a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e68c:	f7fe fe22 	bl	800d2d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2207      	movs	r2, #7
 800e694:	4013      	ands	r3, r2
 800e696:	d001      	beq.n	800e69c <pvPortMalloc+0x12c>
 800e698:	b672      	cpsid	i
 800e69a:	e7fe      	b.n	800e69a <pvPortMalloc+0x12a>
	return pvReturn;
 800e69c:	68fb      	ldr	r3, [r7, #12]
}
 800e69e:	0018      	movs	r0, r3
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	b006      	add	sp, #24
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	46c0      	nop			; (mov r8, r8)
 800e6a8:	200031b0 	.word	0x200031b0
 800e6ac:	200031bc 	.word	0x200031bc
 800e6b0:	200031b4 	.word	0x200031b4
 800e6b4:	200031a8 	.word	0x200031a8
 800e6b8:	200031b8 	.word	0x200031b8

0800e6bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d035      	beq.n	800e73a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e6ce:	2308      	movs	r3, #8
 800e6d0:	425b      	negs	r3, r3
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	18d3      	adds	r3, r2, r3
 800e6d6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	685a      	ldr	r2, [r3, #4]
 800e6e0:	4b18      	ldr	r3, [pc, #96]	; (800e744 <vPortFree+0x88>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	d101      	bne.n	800e6ec <vPortFree+0x30>
 800e6e8:	b672      	cpsid	i
 800e6ea:	e7fe      	b.n	800e6ea <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d001      	beq.n	800e6f8 <vPortFree+0x3c>
 800e6f4:	b672      	cpsid	i
 800e6f6:	e7fe      	b.n	800e6f6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	685a      	ldr	r2, [r3, #4]
 800e6fc:	4b11      	ldr	r3, [pc, #68]	; (800e744 <vPortFree+0x88>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4013      	ands	r3, r2
 800e702:	d01a      	beq.n	800e73a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d116      	bne.n	800e73a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	685a      	ldr	r2, [r3, #4]
 800e710:	4b0c      	ldr	r3, [pc, #48]	; (800e744 <vPortFree+0x88>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	43db      	mvns	r3, r3
 800e716:	401a      	ands	r2, r3
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e71c:	f7fe fdce 	bl	800d2bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	685a      	ldr	r2, [r3, #4]
 800e724:	4b08      	ldr	r3, [pc, #32]	; (800e748 <vPortFree+0x8c>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	18d2      	adds	r2, r2, r3
 800e72a:	4b07      	ldr	r3, [pc, #28]	; (800e748 <vPortFree+0x8c>)
 800e72c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	0018      	movs	r0, r3
 800e732:	f000 f86b 	bl	800e80c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e736:	f7fe fdcd 	bl	800d2d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e73a:	46c0      	nop			; (mov r8, r8)
 800e73c:	46bd      	mov	sp, r7
 800e73e:	b004      	add	sp, #16
 800e740:	bd80      	pop	{r7, pc}
 800e742:	46c0      	nop			; (mov r8, r8)
 800e744:	200031bc 	.word	0x200031bc
 800e748:	200031b4 	.word	0x200031b4

0800e74c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e752:	23fa      	movs	r3, #250	; 0xfa
 800e754:	015b      	lsls	r3, r3, #5
 800e756:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e758:	4b26      	ldr	r3, [pc, #152]	; (800e7f4 <prvHeapInit+0xa8>)
 800e75a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2207      	movs	r2, #7
 800e760:	4013      	ands	r3, r2
 800e762:	d00c      	beq.n	800e77e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	3307      	adds	r3, #7
 800e768:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2207      	movs	r2, #7
 800e76e:	4393      	bics	r3, r2
 800e770:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e772:	68ba      	ldr	r2, [r7, #8]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	1ad2      	subs	r2, r2, r3
 800e778:	4b1e      	ldr	r3, [pc, #120]	; (800e7f4 <prvHeapInit+0xa8>)
 800e77a:	18d3      	adds	r3, r2, r3
 800e77c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e782:	4b1d      	ldr	r3, [pc, #116]	; (800e7f8 <prvHeapInit+0xac>)
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e788:	4b1b      	ldr	r3, [pc, #108]	; (800e7f8 <prvHeapInit+0xac>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	18d3      	adds	r3, r2, r3
 800e794:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e796:	2208      	movs	r2, #8
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	1a9b      	subs	r3, r3, r2
 800e79c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2207      	movs	r2, #7
 800e7a2:	4393      	bics	r3, r2
 800e7a4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	4b14      	ldr	r3, [pc, #80]	; (800e7fc <prvHeapInit+0xb0>)
 800e7aa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800e7ac:	4b13      	ldr	r3, [pc, #76]	; (800e7fc <prvHeapInit+0xb0>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e7b4:	4b11      	ldr	r3, [pc, #68]	; (800e7fc <prvHeapInit+0xb0>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	68fa      	ldr	r2, [r7, #12]
 800e7c4:	1ad2      	subs	r2, r2, r3
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e7ca:	4b0c      	ldr	r3, [pc, #48]	; (800e7fc <prvHeapInit+0xb0>)
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	685a      	ldr	r2, [r3, #4]
 800e7d6:	4b0a      	ldr	r3, [pc, #40]	; (800e800 <prvHeapInit+0xb4>)
 800e7d8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	4b09      	ldr	r3, [pc, #36]	; (800e804 <prvHeapInit+0xb8>)
 800e7e0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7e2:	4b09      	ldr	r3, [pc, #36]	; (800e808 <prvHeapInit+0xbc>)
 800e7e4:	2280      	movs	r2, #128	; 0x80
 800e7e6:	0612      	lsls	r2, r2, #24
 800e7e8:	601a      	str	r2, [r3, #0]
}
 800e7ea:	46c0      	nop			; (mov r8, r8)
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	b004      	add	sp, #16
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	46c0      	nop			; (mov r8, r8)
 800e7f4:	20001268 	.word	0x20001268
 800e7f8:	200031a8 	.word	0x200031a8
 800e7fc:	200031b0 	.word	0x200031b0
 800e800:	200031b8 	.word	0x200031b8
 800e804:	200031b4 	.word	0x200031b4
 800e808:	200031bc 	.word	0x200031bc

0800e80c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e814:	4b27      	ldr	r3, [pc, #156]	; (800e8b4 <prvInsertBlockIntoFreeList+0xa8>)
 800e816:	60fb      	str	r3, [r7, #12]
 800e818:	e002      	b.n	800e820 <prvInsertBlockIntoFreeList+0x14>
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	429a      	cmp	r2, r3
 800e828:	d8f7      	bhi.n	800e81a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	68ba      	ldr	r2, [r7, #8]
 800e834:	18d3      	adds	r3, r2, r3
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d108      	bne.n	800e84e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	685a      	ldr	r2, [r3, #4]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	18d2      	adds	r2, r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	18d2      	adds	r2, r2, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d118      	bne.n	800e894 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	4b14      	ldr	r3, [pc, #80]	; (800e8b8 <prvInsertBlockIntoFreeList+0xac>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d00d      	beq.n	800e88a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	18d2      	adds	r2, r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	e008      	b.n	800e89c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e88a:	4b0b      	ldr	r3, [pc, #44]	; (800e8b8 <prvInsertBlockIntoFreeList+0xac>)
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	601a      	str	r2, [r3, #0]
 800e892:	e003      	b.n	800e89c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d002      	beq.n	800e8aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8aa:	46c0      	nop			; (mov r8, r8)
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	b004      	add	sp, #16
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	46c0      	nop			; (mov r8, r8)
 800e8b4:	200031a8 	.word	0x200031a8
 800e8b8:	200031b0 	.word	0x200031b0

0800e8bc <__errno>:
 800e8bc:	4b01      	ldr	r3, [pc, #4]	; (800e8c4 <__errno+0x8>)
 800e8be:	6818      	ldr	r0, [r3, #0]
 800e8c0:	4770      	bx	lr
 800e8c2:	46c0      	nop			; (mov r8, r8)
 800e8c4:	20000030 	.word	0x20000030

0800e8c8 <__libc_init_array>:
 800e8c8:	b570      	push	{r4, r5, r6, lr}
 800e8ca:	2600      	movs	r6, #0
 800e8cc:	4d0c      	ldr	r5, [pc, #48]	; (800e900 <__libc_init_array+0x38>)
 800e8ce:	4c0d      	ldr	r4, [pc, #52]	; (800e904 <__libc_init_array+0x3c>)
 800e8d0:	1b64      	subs	r4, r4, r5
 800e8d2:	10a4      	asrs	r4, r4, #2
 800e8d4:	42a6      	cmp	r6, r4
 800e8d6:	d109      	bne.n	800e8ec <__libc_init_array+0x24>
 800e8d8:	2600      	movs	r6, #0
 800e8da:	f000 fc9d 	bl	800f218 <_init>
 800e8de:	4d0a      	ldr	r5, [pc, #40]	; (800e908 <__libc_init_array+0x40>)
 800e8e0:	4c0a      	ldr	r4, [pc, #40]	; (800e90c <__libc_init_array+0x44>)
 800e8e2:	1b64      	subs	r4, r4, r5
 800e8e4:	10a4      	asrs	r4, r4, #2
 800e8e6:	42a6      	cmp	r6, r4
 800e8e8:	d105      	bne.n	800e8f6 <__libc_init_array+0x2e>
 800e8ea:	bd70      	pop	{r4, r5, r6, pc}
 800e8ec:	00b3      	lsls	r3, r6, #2
 800e8ee:	58eb      	ldr	r3, [r5, r3]
 800e8f0:	4798      	blx	r3
 800e8f2:	3601      	adds	r6, #1
 800e8f4:	e7ee      	b.n	800e8d4 <__libc_init_array+0xc>
 800e8f6:	00b3      	lsls	r3, r6, #2
 800e8f8:	58eb      	ldr	r3, [r5, r3]
 800e8fa:	4798      	blx	r3
 800e8fc:	3601      	adds	r6, #1
 800e8fe:	e7f2      	b.n	800e8e6 <__libc_init_array+0x1e>
 800e900:	0800ff34 	.word	0x0800ff34
 800e904:	0800ff34 	.word	0x0800ff34
 800e908:	0800ff34 	.word	0x0800ff34
 800e90c:	0800ff38 	.word	0x0800ff38

0800e910 <memcpy>:
 800e910:	2300      	movs	r3, #0
 800e912:	b510      	push	{r4, lr}
 800e914:	429a      	cmp	r2, r3
 800e916:	d100      	bne.n	800e91a <memcpy+0xa>
 800e918:	bd10      	pop	{r4, pc}
 800e91a:	5ccc      	ldrb	r4, [r1, r3]
 800e91c:	54c4      	strb	r4, [r0, r3]
 800e91e:	3301      	adds	r3, #1
 800e920:	e7f8      	b.n	800e914 <memcpy+0x4>

0800e922 <memmove>:
 800e922:	b510      	push	{r4, lr}
 800e924:	4288      	cmp	r0, r1
 800e926:	d902      	bls.n	800e92e <memmove+0xc>
 800e928:	188b      	adds	r3, r1, r2
 800e92a:	4298      	cmp	r0, r3
 800e92c:	d303      	bcc.n	800e936 <memmove+0x14>
 800e92e:	2300      	movs	r3, #0
 800e930:	e007      	b.n	800e942 <memmove+0x20>
 800e932:	5c8b      	ldrb	r3, [r1, r2]
 800e934:	5483      	strb	r3, [r0, r2]
 800e936:	3a01      	subs	r2, #1
 800e938:	d2fb      	bcs.n	800e932 <memmove+0x10>
 800e93a:	bd10      	pop	{r4, pc}
 800e93c:	5ccc      	ldrb	r4, [r1, r3]
 800e93e:	54c4      	strb	r4, [r0, r3]
 800e940:	3301      	adds	r3, #1
 800e942:	429a      	cmp	r2, r3
 800e944:	d1fa      	bne.n	800e93c <memmove+0x1a>
 800e946:	e7f8      	b.n	800e93a <memmove+0x18>

0800e948 <memset>:
 800e948:	0003      	movs	r3, r0
 800e94a:	1812      	adds	r2, r2, r0
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d100      	bne.n	800e952 <memset+0xa>
 800e950:	4770      	bx	lr
 800e952:	7019      	strb	r1, [r3, #0]
 800e954:	3301      	adds	r3, #1
 800e956:	e7f9      	b.n	800e94c <memset+0x4>

0800e958 <_malloc_r>:
 800e958:	2303      	movs	r3, #3
 800e95a:	b570      	push	{r4, r5, r6, lr}
 800e95c:	1ccd      	adds	r5, r1, #3
 800e95e:	439d      	bics	r5, r3
 800e960:	3508      	adds	r5, #8
 800e962:	0006      	movs	r6, r0
 800e964:	2d0c      	cmp	r5, #12
 800e966:	d21e      	bcs.n	800e9a6 <_malloc_r+0x4e>
 800e968:	250c      	movs	r5, #12
 800e96a:	42a9      	cmp	r1, r5
 800e96c:	d81d      	bhi.n	800e9aa <_malloc_r+0x52>
 800e96e:	0030      	movs	r0, r6
 800e970:	f000 f8f6 	bl	800eb60 <__malloc_lock>
 800e974:	4a25      	ldr	r2, [pc, #148]	; (800ea0c <_malloc_r+0xb4>)
 800e976:	6814      	ldr	r4, [r2, #0]
 800e978:	0021      	movs	r1, r4
 800e97a:	2900      	cmp	r1, #0
 800e97c:	d119      	bne.n	800e9b2 <_malloc_r+0x5a>
 800e97e:	4c24      	ldr	r4, [pc, #144]	; (800ea10 <_malloc_r+0xb8>)
 800e980:	6823      	ldr	r3, [r4, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d103      	bne.n	800e98e <_malloc_r+0x36>
 800e986:	0030      	movs	r0, r6
 800e988:	f000 f8b8 	bl	800eafc <_sbrk_r>
 800e98c:	6020      	str	r0, [r4, #0]
 800e98e:	0029      	movs	r1, r5
 800e990:	0030      	movs	r0, r6
 800e992:	f000 f8b3 	bl	800eafc <_sbrk_r>
 800e996:	1c43      	adds	r3, r0, #1
 800e998:	d12b      	bne.n	800e9f2 <_malloc_r+0x9a>
 800e99a:	230c      	movs	r3, #12
 800e99c:	0030      	movs	r0, r6
 800e99e:	6033      	str	r3, [r6, #0]
 800e9a0:	f000 f8df 	bl	800eb62 <__malloc_unlock>
 800e9a4:	e003      	b.n	800e9ae <_malloc_r+0x56>
 800e9a6:	2d00      	cmp	r5, #0
 800e9a8:	dadf      	bge.n	800e96a <_malloc_r+0x12>
 800e9aa:	230c      	movs	r3, #12
 800e9ac:	6033      	str	r3, [r6, #0]
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	bd70      	pop	{r4, r5, r6, pc}
 800e9b2:	680b      	ldr	r3, [r1, #0]
 800e9b4:	1b5b      	subs	r3, r3, r5
 800e9b6:	d419      	bmi.n	800e9ec <_malloc_r+0x94>
 800e9b8:	2b0b      	cmp	r3, #11
 800e9ba:	d903      	bls.n	800e9c4 <_malloc_r+0x6c>
 800e9bc:	600b      	str	r3, [r1, #0]
 800e9be:	18cc      	adds	r4, r1, r3
 800e9c0:	6025      	str	r5, [r4, #0]
 800e9c2:	e003      	b.n	800e9cc <_malloc_r+0x74>
 800e9c4:	684b      	ldr	r3, [r1, #4]
 800e9c6:	428c      	cmp	r4, r1
 800e9c8:	d10d      	bne.n	800e9e6 <_malloc_r+0x8e>
 800e9ca:	6013      	str	r3, [r2, #0]
 800e9cc:	0030      	movs	r0, r6
 800e9ce:	f000 f8c8 	bl	800eb62 <__malloc_unlock>
 800e9d2:	0020      	movs	r0, r4
 800e9d4:	2207      	movs	r2, #7
 800e9d6:	300b      	adds	r0, #11
 800e9d8:	1d23      	adds	r3, r4, #4
 800e9da:	4390      	bics	r0, r2
 800e9dc:	1ac3      	subs	r3, r0, r3
 800e9de:	d0e7      	beq.n	800e9b0 <_malloc_r+0x58>
 800e9e0:	425a      	negs	r2, r3
 800e9e2:	50e2      	str	r2, [r4, r3]
 800e9e4:	e7e4      	b.n	800e9b0 <_malloc_r+0x58>
 800e9e6:	6063      	str	r3, [r4, #4]
 800e9e8:	000c      	movs	r4, r1
 800e9ea:	e7ef      	b.n	800e9cc <_malloc_r+0x74>
 800e9ec:	000c      	movs	r4, r1
 800e9ee:	6849      	ldr	r1, [r1, #4]
 800e9f0:	e7c3      	b.n	800e97a <_malloc_r+0x22>
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	1cc4      	adds	r4, r0, #3
 800e9f6:	439c      	bics	r4, r3
 800e9f8:	42a0      	cmp	r0, r4
 800e9fa:	d0e1      	beq.n	800e9c0 <_malloc_r+0x68>
 800e9fc:	1a21      	subs	r1, r4, r0
 800e9fe:	0030      	movs	r0, r6
 800ea00:	f000 f87c 	bl	800eafc <_sbrk_r>
 800ea04:	1c43      	adds	r3, r0, #1
 800ea06:	d1db      	bne.n	800e9c0 <_malloc_r+0x68>
 800ea08:	e7c7      	b.n	800e99a <_malloc_r+0x42>
 800ea0a:	46c0      	nop			; (mov r8, r8)
 800ea0c:	200031c0 	.word	0x200031c0
 800ea10:	200031c4 	.word	0x200031c4

0800ea14 <cleanup_glue>:
 800ea14:	b570      	push	{r4, r5, r6, lr}
 800ea16:	000d      	movs	r5, r1
 800ea18:	6809      	ldr	r1, [r1, #0]
 800ea1a:	0004      	movs	r4, r0
 800ea1c:	2900      	cmp	r1, #0
 800ea1e:	d001      	beq.n	800ea24 <cleanup_glue+0x10>
 800ea20:	f7ff fff8 	bl	800ea14 <cleanup_glue>
 800ea24:	0029      	movs	r1, r5
 800ea26:	0020      	movs	r0, r4
 800ea28:	f000 f89c 	bl	800eb64 <_free_r>
 800ea2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea30 <_reclaim_reent>:
 800ea30:	4b31      	ldr	r3, [pc, #196]	; (800eaf8 <_reclaim_reent+0xc8>)
 800ea32:	b570      	push	{r4, r5, r6, lr}
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	0004      	movs	r4, r0
 800ea38:	4283      	cmp	r3, r0
 800ea3a:	d049      	beq.n	800ead0 <_reclaim_reent+0xa0>
 800ea3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00a      	beq.n	800ea58 <_reclaim_reent+0x28>
 800ea42:	2500      	movs	r5, #0
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	42ab      	cmp	r3, r5
 800ea48:	d147      	bne.n	800eada <_reclaim_reent+0xaa>
 800ea4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea4c:	6819      	ldr	r1, [r3, #0]
 800ea4e:	2900      	cmp	r1, #0
 800ea50:	d002      	beq.n	800ea58 <_reclaim_reent+0x28>
 800ea52:	0020      	movs	r0, r4
 800ea54:	f000 f886 	bl	800eb64 <_free_r>
 800ea58:	6961      	ldr	r1, [r4, #20]
 800ea5a:	2900      	cmp	r1, #0
 800ea5c:	d002      	beq.n	800ea64 <_reclaim_reent+0x34>
 800ea5e:	0020      	movs	r0, r4
 800ea60:	f000 f880 	bl	800eb64 <_free_r>
 800ea64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ea66:	2900      	cmp	r1, #0
 800ea68:	d002      	beq.n	800ea70 <_reclaim_reent+0x40>
 800ea6a:	0020      	movs	r0, r4
 800ea6c:	f000 f87a 	bl	800eb64 <_free_r>
 800ea70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea72:	2900      	cmp	r1, #0
 800ea74:	d002      	beq.n	800ea7c <_reclaim_reent+0x4c>
 800ea76:	0020      	movs	r0, r4
 800ea78:	f000 f874 	bl	800eb64 <_free_r>
 800ea7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ea7e:	2900      	cmp	r1, #0
 800ea80:	d002      	beq.n	800ea88 <_reclaim_reent+0x58>
 800ea82:	0020      	movs	r0, r4
 800ea84:	f000 f86e 	bl	800eb64 <_free_r>
 800ea88:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ea8a:	2900      	cmp	r1, #0
 800ea8c:	d002      	beq.n	800ea94 <_reclaim_reent+0x64>
 800ea8e:	0020      	movs	r0, r4
 800ea90:	f000 f868 	bl	800eb64 <_free_r>
 800ea94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ea96:	2900      	cmp	r1, #0
 800ea98:	d002      	beq.n	800eaa0 <_reclaim_reent+0x70>
 800ea9a:	0020      	movs	r0, r4
 800ea9c:	f000 f862 	bl	800eb64 <_free_r>
 800eaa0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eaa2:	2900      	cmp	r1, #0
 800eaa4:	d002      	beq.n	800eaac <_reclaim_reent+0x7c>
 800eaa6:	0020      	movs	r0, r4
 800eaa8:	f000 f85c 	bl	800eb64 <_free_r>
 800eaac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eaae:	2900      	cmp	r1, #0
 800eab0:	d002      	beq.n	800eab8 <_reclaim_reent+0x88>
 800eab2:	0020      	movs	r0, r4
 800eab4:	f000 f856 	bl	800eb64 <_free_r>
 800eab8:	69a3      	ldr	r3, [r4, #24]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d008      	beq.n	800ead0 <_reclaim_reent+0xa0>
 800eabe:	0020      	movs	r0, r4
 800eac0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eac2:	4798      	blx	r3
 800eac4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eac6:	2900      	cmp	r1, #0
 800eac8:	d002      	beq.n	800ead0 <_reclaim_reent+0xa0>
 800eaca:	0020      	movs	r0, r4
 800eacc:	f7ff ffa2 	bl	800ea14 <cleanup_glue>
 800ead0:	bd70      	pop	{r4, r5, r6, pc}
 800ead2:	5949      	ldr	r1, [r1, r5]
 800ead4:	2900      	cmp	r1, #0
 800ead6:	d108      	bne.n	800eaea <_reclaim_reent+0xba>
 800ead8:	3504      	adds	r5, #4
 800eada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eadc:	68d9      	ldr	r1, [r3, #12]
 800eade:	2d80      	cmp	r5, #128	; 0x80
 800eae0:	d1f7      	bne.n	800ead2 <_reclaim_reent+0xa2>
 800eae2:	0020      	movs	r0, r4
 800eae4:	f000 f83e 	bl	800eb64 <_free_r>
 800eae8:	e7af      	b.n	800ea4a <_reclaim_reent+0x1a>
 800eaea:	680e      	ldr	r6, [r1, #0]
 800eaec:	0020      	movs	r0, r4
 800eaee:	f000 f839 	bl	800eb64 <_free_r>
 800eaf2:	0031      	movs	r1, r6
 800eaf4:	e7ee      	b.n	800ead4 <_reclaim_reent+0xa4>
 800eaf6:	46c0      	nop			; (mov r8, r8)
 800eaf8:	20000030 	.word	0x20000030

0800eafc <_sbrk_r>:
 800eafc:	2300      	movs	r3, #0
 800eafe:	b570      	push	{r4, r5, r6, lr}
 800eb00:	4c06      	ldr	r4, [pc, #24]	; (800eb1c <_sbrk_r+0x20>)
 800eb02:	0005      	movs	r5, r0
 800eb04:	0008      	movs	r0, r1
 800eb06:	6023      	str	r3, [r4, #0]
 800eb08:	f7f7 f91c 	bl	8005d44 <_sbrk>
 800eb0c:	1c43      	adds	r3, r0, #1
 800eb0e:	d103      	bne.n	800eb18 <_sbrk_r+0x1c>
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d000      	beq.n	800eb18 <_sbrk_r+0x1c>
 800eb16:	602b      	str	r3, [r5, #0]
 800eb18:	bd70      	pop	{r4, r5, r6, pc}
 800eb1a:	46c0      	nop			; (mov r8, r8)
 800eb1c:	2000350c 	.word	0x2000350c

0800eb20 <siprintf>:
 800eb20:	b40e      	push	{r1, r2, r3}
 800eb22:	b500      	push	{lr}
 800eb24:	490b      	ldr	r1, [pc, #44]	; (800eb54 <siprintf+0x34>)
 800eb26:	b09c      	sub	sp, #112	; 0x70
 800eb28:	ab1d      	add	r3, sp, #116	; 0x74
 800eb2a:	9002      	str	r0, [sp, #8]
 800eb2c:	9006      	str	r0, [sp, #24]
 800eb2e:	9107      	str	r1, [sp, #28]
 800eb30:	9104      	str	r1, [sp, #16]
 800eb32:	4809      	ldr	r0, [pc, #36]	; (800eb58 <siprintf+0x38>)
 800eb34:	4909      	ldr	r1, [pc, #36]	; (800eb5c <siprintf+0x3c>)
 800eb36:	cb04      	ldmia	r3!, {r2}
 800eb38:	9105      	str	r1, [sp, #20]
 800eb3a:	6800      	ldr	r0, [r0, #0]
 800eb3c:	a902      	add	r1, sp, #8
 800eb3e:	9301      	str	r3, [sp, #4]
 800eb40:	f000 f8bc 	bl	800ecbc <_svfiprintf_r>
 800eb44:	2300      	movs	r3, #0
 800eb46:	9a02      	ldr	r2, [sp, #8]
 800eb48:	7013      	strb	r3, [r2, #0]
 800eb4a:	b01c      	add	sp, #112	; 0x70
 800eb4c:	bc08      	pop	{r3}
 800eb4e:	b003      	add	sp, #12
 800eb50:	4718      	bx	r3
 800eb52:	46c0      	nop			; (mov r8, r8)
 800eb54:	7fffffff 	.word	0x7fffffff
 800eb58:	20000030 	.word	0x20000030
 800eb5c:	ffff0208 	.word	0xffff0208

0800eb60 <__malloc_lock>:
 800eb60:	4770      	bx	lr

0800eb62 <__malloc_unlock>:
 800eb62:	4770      	bx	lr

0800eb64 <_free_r>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	0005      	movs	r5, r0
 800eb68:	2900      	cmp	r1, #0
 800eb6a:	d010      	beq.n	800eb8e <_free_r+0x2a>
 800eb6c:	1f0c      	subs	r4, r1, #4
 800eb6e:	6823      	ldr	r3, [r4, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	da00      	bge.n	800eb76 <_free_r+0x12>
 800eb74:	18e4      	adds	r4, r4, r3
 800eb76:	0028      	movs	r0, r5
 800eb78:	f7ff fff2 	bl	800eb60 <__malloc_lock>
 800eb7c:	4a1d      	ldr	r2, [pc, #116]	; (800ebf4 <_free_r+0x90>)
 800eb7e:	6813      	ldr	r3, [r2, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d105      	bne.n	800eb90 <_free_r+0x2c>
 800eb84:	6063      	str	r3, [r4, #4]
 800eb86:	6014      	str	r4, [r2, #0]
 800eb88:	0028      	movs	r0, r5
 800eb8a:	f7ff ffea 	bl	800eb62 <__malloc_unlock>
 800eb8e:	bd70      	pop	{r4, r5, r6, pc}
 800eb90:	42a3      	cmp	r3, r4
 800eb92:	d909      	bls.n	800eba8 <_free_r+0x44>
 800eb94:	6821      	ldr	r1, [r4, #0]
 800eb96:	1860      	adds	r0, r4, r1
 800eb98:	4283      	cmp	r3, r0
 800eb9a:	d1f3      	bne.n	800eb84 <_free_r+0x20>
 800eb9c:	6818      	ldr	r0, [r3, #0]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	1841      	adds	r1, r0, r1
 800eba2:	6021      	str	r1, [r4, #0]
 800eba4:	e7ee      	b.n	800eb84 <_free_r+0x20>
 800eba6:	0013      	movs	r3, r2
 800eba8:	685a      	ldr	r2, [r3, #4]
 800ebaa:	2a00      	cmp	r2, #0
 800ebac:	d001      	beq.n	800ebb2 <_free_r+0x4e>
 800ebae:	42a2      	cmp	r2, r4
 800ebb0:	d9f9      	bls.n	800eba6 <_free_r+0x42>
 800ebb2:	6819      	ldr	r1, [r3, #0]
 800ebb4:	1858      	adds	r0, r3, r1
 800ebb6:	42a0      	cmp	r0, r4
 800ebb8:	d10b      	bne.n	800ebd2 <_free_r+0x6e>
 800ebba:	6820      	ldr	r0, [r4, #0]
 800ebbc:	1809      	adds	r1, r1, r0
 800ebbe:	1858      	adds	r0, r3, r1
 800ebc0:	6019      	str	r1, [r3, #0]
 800ebc2:	4282      	cmp	r2, r0
 800ebc4:	d1e0      	bne.n	800eb88 <_free_r+0x24>
 800ebc6:	6810      	ldr	r0, [r2, #0]
 800ebc8:	6852      	ldr	r2, [r2, #4]
 800ebca:	1841      	adds	r1, r0, r1
 800ebcc:	6019      	str	r1, [r3, #0]
 800ebce:	605a      	str	r2, [r3, #4]
 800ebd0:	e7da      	b.n	800eb88 <_free_r+0x24>
 800ebd2:	42a0      	cmp	r0, r4
 800ebd4:	d902      	bls.n	800ebdc <_free_r+0x78>
 800ebd6:	230c      	movs	r3, #12
 800ebd8:	602b      	str	r3, [r5, #0]
 800ebda:	e7d5      	b.n	800eb88 <_free_r+0x24>
 800ebdc:	6821      	ldr	r1, [r4, #0]
 800ebde:	1860      	adds	r0, r4, r1
 800ebe0:	4282      	cmp	r2, r0
 800ebe2:	d103      	bne.n	800ebec <_free_r+0x88>
 800ebe4:	6810      	ldr	r0, [r2, #0]
 800ebe6:	6852      	ldr	r2, [r2, #4]
 800ebe8:	1841      	adds	r1, r0, r1
 800ebea:	6021      	str	r1, [r4, #0]
 800ebec:	6062      	str	r2, [r4, #4]
 800ebee:	605c      	str	r4, [r3, #4]
 800ebf0:	e7ca      	b.n	800eb88 <_free_r+0x24>
 800ebf2:	46c0      	nop			; (mov r8, r8)
 800ebf4:	200031c0 	.word	0x200031c0

0800ebf8 <__ssputs_r>:
 800ebf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebfa:	688e      	ldr	r6, [r1, #8]
 800ebfc:	b085      	sub	sp, #20
 800ebfe:	0007      	movs	r7, r0
 800ec00:	000c      	movs	r4, r1
 800ec02:	9203      	str	r2, [sp, #12]
 800ec04:	9301      	str	r3, [sp, #4]
 800ec06:	429e      	cmp	r6, r3
 800ec08:	d83c      	bhi.n	800ec84 <__ssputs_r+0x8c>
 800ec0a:	2390      	movs	r3, #144	; 0x90
 800ec0c:	898a      	ldrh	r2, [r1, #12]
 800ec0e:	00db      	lsls	r3, r3, #3
 800ec10:	421a      	tst	r2, r3
 800ec12:	d034      	beq.n	800ec7e <__ssputs_r+0x86>
 800ec14:	2503      	movs	r5, #3
 800ec16:	6909      	ldr	r1, [r1, #16]
 800ec18:	6823      	ldr	r3, [r4, #0]
 800ec1a:	1a5b      	subs	r3, r3, r1
 800ec1c:	9302      	str	r3, [sp, #8]
 800ec1e:	6963      	ldr	r3, [r4, #20]
 800ec20:	9802      	ldr	r0, [sp, #8]
 800ec22:	435d      	muls	r5, r3
 800ec24:	0feb      	lsrs	r3, r5, #31
 800ec26:	195d      	adds	r5, r3, r5
 800ec28:	9b01      	ldr	r3, [sp, #4]
 800ec2a:	106d      	asrs	r5, r5, #1
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	181b      	adds	r3, r3, r0
 800ec30:	42ab      	cmp	r3, r5
 800ec32:	d900      	bls.n	800ec36 <__ssputs_r+0x3e>
 800ec34:	001d      	movs	r5, r3
 800ec36:	0553      	lsls	r3, r2, #21
 800ec38:	d532      	bpl.n	800eca0 <__ssputs_r+0xa8>
 800ec3a:	0029      	movs	r1, r5
 800ec3c:	0038      	movs	r0, r7
 800ec3e:	f7ff fe8b 	bl	800e958 <_malloc_r>
 800ec42:	1e06      	subs	r6, r0, #0
 800ec44:	d109      	bne.n	800ec5a <__ssputs_r+0x62>
 800ec46:	230c      	movs	r3, #12
 800ec48:	603b      	str	r3, [r7, #0]
 800ec4a:	2340      	movs	r3, #64	; 0x40
 800ec4c:	2001      	movs	r0, #1
 800ec4e:	89a2      	ldrh	r2, [r4, #12]
 800ec50:	4240      	negs	r0, r0
 800ec52:	4313      	orrs	r3, r2
 800ec54:	81a3      	strh	r3, [r4, #12]
 800ec56:	b005      	add	sp, #20
 800ec58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec5a:	9a02      	ldr	r2, [sp, #8]
 800ec5c:	6921      	ldr	r1, [r4, #16]
 800ec5e:	f7ff fe57 	bl	800e910 <memcpy>
 800ec62:	89a3      	ldrh	r3, [r4, #12]
 800ec64:	4a14      	ldr	r2, [pc, #80]	; (800ecb8 <__ssputs_r+0xc0>)
 800ec66:	401a      	ands	r2, r3
 800ec68:	2380      	movs	r3, #128	; 0x80
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	81a3      	strh	r3, [r4, #12]
 800ec6e:	9b02      	ldr	r3, [sp, #8]
 800ec70:	6126      	str	r6, [r4, #16]
 800ec72:	18f6      	adds	r6, r6, r3
 800ec74:	6026      	str	r6, [r4, #0]
 800ec76:	6165      	str	r5, [r4, #20]
 800ec78:	9e01      	ldr	r6, [sp, #4]
 800ec7a:	1aed      	subs	r5, r5, r3
 800ec7c:	60a5      	str	r5, [r4, #8]
 800ec7e:	9b01      	ldr	r3, [sp, #4]
 800ec80:	429e      	cmp	r6, r3
 800ec82:	d900      	bls.n	800ec86 <__ssputs_r+0x8e>
 800ec84:	9e01      	ldr	r6, [sp, #4]
 800ec86:	0032      	movs	r2, r6
 800ec88:	9903      	ldr	r1, [sp, #12]
 800ec8a:	6820      	ldr	r0, [r4, #0]
 800ec8c:	f7ff fe49 	bl	800e922 <memmove>
 800ec90:	68a3      	ldr	r3, [r4, #8]
 800ec92:	2000      	movs	r0, #0
 800ec94:	1b9b      	subs	r3, r3, r6
 800ec96:	60a3      	str	r3, [r4, #8]
 800ec98:	6823      	ldr	r3, [r4, #0]
 800ec9a:	199e      	adds	r6, r3, r6
 800ec9c:	6026      	str	r6, [r4, #0]
 800ec9e:	e7da      	b.n	800ec56 <__ssputs_r+0x5e>
 800eca0:	002a      	movs	r2, r5
 800eca2:	0038      	movs	r0, r7
 800eca4:	f000 fa89 	bl	800f1ba <_realloc_r>
 800eca8:	1e06      	subs	r6, r0, #0
 800ecaa:	d1e0      	bne.n	800ec6e <__ssputs_r+0x76>
 800ecac:	6921      	ldr	r1, [r4, #16]
 800ecae:	0038      	movs	r0, r7
 800ecb0:	f7ff ff58 	bl	800eb64 <_free_r>
 800ecb4:	e7c7      	b.n	800ec46 <__ssputs_r+0x4e>
 800ecb6:	46c0      	nop			; (mov r8, r8)
 800ecb8:	fffffb7f 	.word	0xfffffb7f

0800ecbc <_svfiprintf_r>:
 800ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecbe:	b0a1      	sub	sp, #132	; 0x84
 800ecc0:	9003      	str	r0, [sp, #12]
 800ecc2:	001d      	movs	r5, r3
 800ecc4:	898b      	ldrh	r3, [r1, #12]
 800ecc6:	000f      	movs	r7, r1
 800ecc8:	0016      	movs	r6, r2
 800ecca:	061b      	lsls	r3, r3, #24
 800eccc:	d511      	bpl.n	800ecf2 <_svfiprintf_r+0x36>
 800ecce:	690b      	ldr	r3, [r1, #16]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10e      	bne.n	800ecf2 <_svfiprintf_r+0x36>
 800ecd4:	2140      	movs	r1, #64	; 0x40
 800ecd6:	f7ff fe3f 	bl	800e958 <_malloc_r>
 800ecda:	6038      	str	r0, [r7, #0]
 800ecdc:	6138      	str	r0, [r7, #16]
 800ecde:	2800      	cmp	r0, #0
 800ece0:	d105      	bne.n	800ecee <_svfiprintf_r+0x32>
 800ece2:	230c      	movs	r3, #12
 800ece4:	9a03      	ldr	r2, [sp, #12]
 800ece6:	3801      	subs	r0, #1
 800ece8:	6013      	str	r3, [r2, #0]
 800ecea:	b021      	add	sp, #132	; 0x84
 800ecec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecee:	2340      	movs	r3, #64	; 0x40
 800ecf0:	617b      	str	r3, [r7, #20]
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	ac08      	add	r4, sp, #32
 800ecf6:	6163      	str	r3, [r4, #20]
 800ecf8:	3320      	adds	r3, #32
 800ecfa:	7663      	strb	r3, [r4, #25]
 800ecfc:	3310      	adds	r3, #16
 800ecfe:	76a3      	strb	r3, [r4, #26]
 800ed00:	9507      	str	r5, [sp, #28]
 800ed02:	0035      	movs	r5, r6
 800ed04:	782b      	ldrb	r3, [r5, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d001      	beq.n	800ed0e <_svfiprintf_r+0x52>
 800ed0a:	2b25      	cmp	r3, #37	; 0x25
 800ed0c:	d146      	bne.n	800ed9c <_svfiprintf_r+0xe0>
 800ed0e:	1bab      	subs	r3, r5, r6
 800ed10:	9305      	str	r3, [sp, #20]
 800ed12:	d00c      	beq.n	800ed2e <_svfiprintf_r+0x72>
 800ed14:	0032      	movs	r2, r6
 800ed16:	0039      	movs	r1, r7
 800ed18:	9803      	ldr	r0, [sp, #12]
 800ed1a:	f7ff ff6d 	bl	800ebf8 <__ssputs_r>
 800ed1e:	1c43      	adds	r3, r0, #1
 800ed20:	d100      	bne.n	800ed24 <_svfiprintf_r+0x68>
 800ed22:	e0ae      	b.n	800ee82 <_svfiprintf_r+0x1c6>
 800ed24:	6962      	ldr	r2, [r4, #20]
 800ed26:	9b05      	ldr	r3, [sp, #20]
 800ed28:	4694      	mov	ip, r2
 800ed2a:	4463      	add	r3, ip
 800ed2c:	6163      	str	r3, [r4, #20]
 800ed2e:	782b      	ldrb	r3, [r5, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d100      	bne.n	800ed36 <_svfiprintf_r+0x7a>
 800ed34:	e0a5      	b.n	800ee82 <_svfiprintf_r+0x1c6>
 800ed36:	2201      	movs	r2, #1
 800ed38:	2300      	movs	r3, #0
 800ed3a:	4252      	negs	r2, r2
 800ed3c:	6062      	str	r2, [r4, #4]
 800ed3e:	a904      	add	r1, sp, #16
 800ed40:	3254      	adds	r2, #84	; 0x54
 800ed42:	1852      	adds	r2, r2, r1
 800ed44:	1c6e      	adds	r6, r5, #1
 800ed46:	6023      	str	r3, [r4, #0]
 800ed48:	60e3      	str	r3, [r4, #12]
 800ed4a:	60a3      	str	r3, [r4, #8]
 800ed4c:	7013      	strb	r3, [r2, #0]
 800ed4e:	65a3      	str	r3, [r4, #88]	; 0x58
 800ed50:	7831      	ldrb	r1, [r6, #0]
 800ed52:	2205      	movs	r2, #5
 800ed54:	4853      	ldr	r0, [pc, #332]	; (800eea4 <_svfiprintf_r+0x1e8>)
 800ed56:	f000 fa25 	bl	800f1a4 <memchr>
 800ed5a:	1c75      	adds	r5, r6, #1
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	d11f      	bne.n	800eda0 <_svfiprintf_r+0xe4>
 800ed60:	6822      	ldr	r2, [r4, #0]
 800ed62:	06d3      	lsls	r3, r2, #27
 800ed64:	d504      	bpl.n	800ed70 <_svfiprintf_r+0xb4>
 800ed66:	2353      	movs	r3, #83	; 0x53
 800ed68:	a904      	add	r1, sp, #16
 800ed6a:	185b      	adds	r3, r3, r1
 800ed6c:	2120      	movs	r1, #32
 800ed6e:	7019      	strb	r1, [r3, #0]
 800ed70:	0713      	lsls	r3, r2, #28
 800ed72:	d504      	bpl.n	800ed7e <_svfiprintf_r+0xc2>
 800ed74:	2353      	movs	r3, #83	; 0x53
 800ed76:	a904      	add	r1, sp, #16
 800ed78:	185b      	adds	r3, r3, r1
 800ed7a:	212b      	movs	r1, #43	; 0x2b
 800ed7c:	7019      	strb	r1, [r3, #0]
 800ed7e:	7833      	ldrb	r3, [r6, #0]
 800ed80:	2b2a      	cmp	r3, #42	; 0x2a
 800ed82:	d016      	beq.n	800edb2 <_svfiprintf_r+0xf6>
 800ed84:	0035      	movs	r5, r6
 800ed86:	2100      	movs	r1, #0
 800ed88:	200a      	movs	r0, #10
 800ed8a:	68e3      	ldr	r3, [r4, #12]
 800ed8c:	782a      	ldrb	r2, [r5, #0]
 800ed8e:	1c6e      	adds	r6, r5, #1
 800ed90:	3a30      	subs	r2, #48	; 0x30
 800ed92:	2a09      	cmp	r2, #9
 800ed94:	d94e      	bls.n	800ee34 <_svfiprintf_r+0x178>
 800ed96:	2900      	cmp	r1, #0
 800ed98:	d018      	beq.n	800edcc <_svfiprintf_r+0x110>
 800ed9a:	e010      	b.n	800edbe <_svfiprintf_r+0x102>
 800ed9c:	3501      	adds	r5, #1
 800ed9e:	e7b1      	b.n	800ed04 <_svfiprintf_r+0x48>
 800eda0:	4b40      	ldr	r3, [pc, #256]	; (800eea4 <_svfiprintf_r+0x1e8>)
 800eda2:	6822      	ldr	r2, [r4, #0]
 800eda4:	1ac0      	subs	r0, r0, r3
 800eda6:	2301      	movs	r3, #1
 800eda8:	4083      	lsls	r3, r0
 800edaa:	4313      	orrs	r3, r2
 800edac:	6023      	str	r3, [r4, #0]
 800edae:	002e      	movs	r6, r5
 800edb0:	e7ce      	b.n	800ed50 <_svfiprintf_r+0x94>
 800edb2:	9b07      	ldr	r3, [sp, #28]
 800edb4:	1d19      	adds	r1, r3, #4
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	9107      	str	r1, [sp, #28]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	db01      	blt.n	800edc2 <_svfiprintf_r+0x106>
 800edbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800edc0:	e004      	b.n	800edcc <_svfiprintf_r+0x110>
 800edc2:	425b      	negs	r3, r3
 800edc4:	60e3      	str	r3, [r4, #12]
 800edc6:	2302      	movs	r3, #2
 800edc8:	4313      	orrs	r3, r2
 800edca:	6023      	str	r3, [r4, #0]
 800edcc:	782b      	ldrb	r3, [r5, #0]
 800edce:	2b2e      	cmp	r3, #46	; 0x2e
 800edd0:	d10a      	bne.n	800ede8 <_svfiprintf_r+0x12c>
 800edd2:	786b      	ldrb	r3, [r5, #1]
 800edd4:	2b2a      	cmp	r3, #42	; 0x2a
 800edd6:	d135      	bne.n	800ee44 <_svfiprintf_r+0x188>
 800edd8:	9b07      	ldr	r3, [sp, #28]
 800edda:	3502      	adds	r5, #2
 800eddc:	1d1a      	adds	r2, r3, #4
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	9207      	str	r2, [sp, #28]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	db2b      	blt.n	800ee3e <_svfiprintf_r+0x182>
 800ede6:	9309      	str	r3, [sp, #36]	; 0x24
 800ede8:	4e2f      	ldr	r6, [pc, #188]	; (800eea8 <_svfiprintf_r+0x1ec>)
 800edea:	7829      	ldrb	r1, [r5, #0]
 800edec:	2203      	movs	r2, #3
 800edee:	0030      	movs	r0, r6
 800edf0:	f000 f9d8 	bl	800f1a4 <memchr>
 800edf4:	2800      	cmp	r0, #0
 800edf6:	d006      	beq.n	800ee06 <_svfiprintf_r+0x14a>
 800edf8:	2340      	movs	r3, #64	; 0x40
 800edfa:	1b80      	subs	r0, r0, r6
 800edfc:	4083      	lsls	r3, r0
 800edfe:	6822      	ldr	r2, [r4, #0]
 800ee00:	3501      	adds	r5, #1
 800ee02:	4313      	orrs	r3, r2
 800ee04:	6023      	str	r3, [r4, #0]
 800ee06:	7829      	ldrb	r1, [r5, #0]
 800ee08:	2206      	movs	r2, #6
 800ee0a:	4828      	ldr	r0, [pc, #160]	; (800eeac <_svfiprintf_r+0x1f0>)
 800ee0c:	1c6e      	adds	r6, r5, #1
 800ee0e:	7621      	strb	r1, [r4, #24]
 800ee10:	f000 f9c8 	bl	800f1a4 <memchr>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d03c      	beq.n	800ee92 <_svfiprintf_r+0x1d6>
 800ee18:	4b25      	ldr	r3, [pc, #148]	; (800eeb0 <_svfiprintf_r+0x1f4>)
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d125      	bne.n	800ee6a <_svfiprintf_r+0x1ae>
 800ee1e:	2207      	movs	r2, #7
 800ee20:	9b07      	ldr	r3, [sp, #28]
 800ee22:	3307      	adds	r3, #7
 800ee24:	4393      	bics	r3, r2
 800ee26:	3308      	adds	r3, #8
 800ee28:	9307      	str	r3, [sp, #28]
 800ee2a:	6963      	ldr	r3, [r4, #20]
 800ee2c:	9a04      	ldr	r2, [sp, #16]
 800ee2e:	189b      	adds	r3, r3, r2
 800ee30:	6163      	str	r3, [r4, #20]
 800ee32:	e766      	b.n	800ed02 <_svfiprintf_r+0x46>
 800ee34:	4343      	muls	r3, r0
 800ee36:	2101      	movs	r1, #1
 800ee38:	189b      	adds	r3, r3, r2
 800ee3a:	0035      	movs	r5, r6
 800ee3c:	e7a6      	b.n	800ed8c <_svfiprintf_r+0xd0>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	425b      	negs	r3, r3
 800ee42:	e7d0      	b.n	800ede6 <_svfiprintf_r+0x12a>
 800ee44:	2300      	movs	r3, #0
 800ee46:	200a      	movs	r0, #10
 800ee48:	001a      	movs	r2, r3
 800ee4a:	3501      	adds	r5, #1
 800ee4c:	6063      	str	r3, [r4, #4]
 800ee4e:	7829      	ldrb	r1, [r5, #0]
 800ee50:	1c6e      	adds	r6, r5, #1
 800ee52:	3930      	subs	r1, #48	; 0x30
 800ee54:	2909      	cmp	r1, #9
 800ee56:	d903      	bls.n	800ee60 <_svfiprintf_r+0x1a4>
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d0c5      	beq.n	800ede8 <_svfiprintf_r+0x12c>
 800ee5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ee5e:	e7c3      	b.n	800ede8 <_svfiprintf_r+0x12c>
 800ee60:	4342      	muls	r2, r0
 800ee62:	2301      	movs	r3, #1
 800ee64:	1852      	adds	r2, r2, r1
 800ee66:	0035      	movs	r5, r6
 800ee68:	e7f1      	b.n	800ee4e <_svfiprintf_r+0x192>
 800ee6a:	ab07      	add	r3, sp, #28
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	003a      	movs	r2, r7
 800ee70:	4b10      	ldr	r3, [pc, #64]	; (800eeb4 <_svfiprintf_r+0x1f8>)
 800ee72:	0021      	movs	r1, r4
 800ee74:	9803      	ldr	r0, [sp, #12]
 800ee76:	e000      	b.n	800ee7a <_svfiprintf_r+0x1be>
 800ee78:	bf00      	nop
 800ee7a:	9004      	str	r0, [sp, #16]
 800ee7c:	9b04      	ldr	r3, [sp, #16]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	d1d3      	bne.n	800ee2a <_svfiprintf_r+0x16e>
 800ee82:	89bb      	ldrh	r3, [r7, #12]
 800ee84:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ee86:	065b      	lsls	r3, r3, #25
 800ee88:	d400      	bmi.n	800ee8c <_svfiprintf_r+0x1d0>
 800ee8a:	e72e      	b.n	800ecea <_svfiprintf_r+0x2e>
 800ee8c:	2001      	movs	r0, #1
 800ee8e:	4240      	negs	r0, r0
 800ee90:	e72b      	b.n	800ecea <_svfiprintf_r+0x2e>
 800ee92:	ab07      	add	r3, sp, #28
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	003a      	movs	r2, r7
 800ee98:	4b06      	ldr	r3, [pc, #24]	; (800eeb4 <_svfiprintf_r+0x1f8>)
 800ee9a:	0021      	movs	r1, r4
 800ee9c:	9803      	ldr	r0, [sp, #12]
 800ee9e:	f000 f879 	bl	800ef94 <_printf_i>
 800eea2:	e7ea      	b.n	800ee7a <_svfiprintf_r+0x1be>
 800eea4:	0800ff00 	.word	0x0800ff00
 800eea8:	0800ff06 	.word	0x0800ff06
 800eeac:	0800ff0a 	.word	0x0800ff0a
 800eeb0:	00000000 	.word	0x00000000
 800eeb4:	0800ebf9 	.word	0x0800ebf9

0800eeb8 <_printf_common>:
 800eeb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eeba:	0015      	movs	r5, r2
 800eebc:	9301      	str	r3, [sp, #4]
 800eebe:	688a      	ldr	r2, [r1, #8]
 800eec0:	690b      	ldr	r3, [r1, #16]
 800eec2:	9000      	str	r0, [sp, #0]
 800eec4:	000c      	movs	r4, r1
 800eec6:	4293      	cmp	r3, r2
 800eec8:	da00      	bge.n	800eecc <_printf_common+0x14>
 800eeca:	0013      	movs	r3, r2
 800eecc:	0022      	movs	r2, r4
 800eece:	602b      	str	r3, [r5, #0]
 800eed0:	3243      	adds	r2, #67	; 0x43
 800eed2:	7812      	ldrb	r2, [r2, #0]
 800eed4:	2a00      	cmp	r2, #0
 800eed6:	d001      	beq.n	800eedc <_printf_common+0x24>
 800eed8:	3301      	adds	r3, #1
 800eeda:	602b      	str	r3, [r5, #0]
 800eedc:	6823      	ldr	r3, [r4, #0]
 800eede:	069b      	lsls	r3, r3, #26
 800eee0:	d502      	bpl.n	800eee8 <_printf_common+0x30>
 800eee2:	682b      	ldr	r3, [r5, #0]
 800eee4:	3302      	adds	r3, #2
 800eee6:	602b      	str	r3, [r5, #0]
 800eee8:	2706      	movs	r7, #6
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	401f      	ands	r7, r3
 800eeee:	d027      	beq.n	800ef40 <_printf_common+0x88>
 800eef0:	0023      	movs	r3, r4
 800eef2:	3343      	adds	r3, #67	; 0x43
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	1e5a      	subs	r2, r3, #1
 800eef8:	4193      	sbcs	r3, r2
 800eefa:	6822      	ldr	r2, [r4, #0]
 800eefc:	0692      	lsls	r2, r2, #26
 800eefe:	d430      	bmi.n	800ef62 <_printf_common+0xaa>
 800ef00:	0022      	movs	r2, r4
 800ef02:	9901      	ldr	r1, [sp, #4]
 800ef04:	3243      	adds	r2, #67	; 0x43
 800ef06:	9800      	ldr	r0, [sp, #0]
 800ef08:	9e08      	ldr	r6, [sp, #32]
 800ef0a:	47b0      	blx	r6
 800ef0c:	1c43      	adds	r3, r0, #1
 800ef0e:	d025      	beq.n	800ef5c <_printf_common+0xa4>
 800ef10:	2306      	movs	r3, #6
 800ef12:	6820      	ldr	r0, [r4, #0]
 800ef14:	682a      	ldr	r2, [r5, #0]
 800ef16:	68e1      	ldr	r1, [r4, #12]
 800ef18:	4003      	ands	r3, r0
 800ef1a:	2500      	movs	r5, #0
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	d103      	bne.n	800ef28 <_printf_common+0x70>
 800ef20:	1a8d      	subs	r5, r1, r2
 800ef22:	43eb      	mvns	r3, r5
 800ef24:	17db      	asrs	r3, r3, #31
 800ef26:	401d      	ands	r5, r3
 800ef28:	68a3      	ldr	r3, [r4, #8]
 800ef2a:	6922      	ldr	r2, [r4, #16]
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	dd01      	ble.n	800ef34 <_printf_common+0x7c>
 800ef30:	1a9b      	subs	r3, r3, r2
 800ef32:	18ed      	adds	r5, r5, r3
 800ef34:	2700      	movs	r7, #0
 800ef36:	42bd      	cmp	r5, r7
 800ef38:	d120      	bne.n	800ef7c <_printf_common+0xc4>
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	e010      	b.n	800ef60 <_printf_common+0xa8>
 800ef3e:	3701      	adds	r7, #1
 800ef40:	68e3      	ldr	r3, [r4, #12]
 800ef42:	682a      	ldr	r2, [r5, #0]
 800ef44:	1a9b      	subs	r3, r3, r2
 800ef46:	42bb      	cmp	r3, r7
 800ef48:	ddd2      	ble.n	800eef0 <_printf_common+0x38>
 800ef4a:	0022      	movs	r2, r4
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	3219      	adds	r2, #25
 800ef50:	9901      	ldr	r1, [sp, #4]
 800ef52:	9800      	ldr	r0, [sp, #0]
 800ef54:	9e08      	ldr	r6, [sp, #32]
 800ef56:	47b0      	blx	r6
 800ef58:	1c43      	adds	r3, r0, #1
 800ef5a:	d1f0      	bne.n	800ef3e <_printf_common+0x86>
 800ef5c:	2001      	movs	r0, #1
 800ef5e:	4240      	negs	r0, r0
 800ef60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef62:	2030      	movs	r0, #48	; 0x30
 800ef64:	18e1      	adds	r1, r4, r3
 800ef66:	3143      	adds	r1, #67	; 0x43
 800ef68:	7008      	strb	r0, [r1, #0]
 800ef6a:	0021      	movs	r1, r4
 800ef6c:	1c5a      	adds	r2, r3, #1
 800ef6e:	3145      	adds	r1, #69	; 0x45
 800ef70:	7809      	ldrb	r1, [r1, #0]
 800ef72:	18a2      	adds	r2, r4, r2
 800ef74:	3243      	adds	r2, #67	; 0x43
 800ef76:	3302      	adds	r3, #2
 800ef78:	7011      	strb	r1, [r2, #0]
 800ef7a:	e7c1      	b.n	800ef00 <_printf_common+0x48>
 800ef7c:	0022      	movs	r2, r4
 800ef7e:	2301      	movs	r3, #1
 800ef80:	321a      	adds	r2, #26
 800ef82:	9901      	ldr	r1, [sp, #4]
 800ef84:	9800      	ldr	r0, [sp, #0]
 800ef86:	9e08      	ldr	r6, [sp, #32]
 800ef88:	47b0      	blx	r6
 800ef8a:	1c43      	adds	r3, r0, #1
 800ef8c:	d0e6      	beq.n	800ef5c <_printf_common+0xa4>
 800ef8e:	3701      	adds	r7, #1
 800ef90:	e7d1      	b.n	800ef36 <_printf_common+0x7e>
	...

0800ef94 <_printf_i>:
 800ef94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef96:	b089      	sub	sp, #36	; 0x24
 800ef98:	9204      	str	r2, [sp, #16]
 800ef9a:	000a      	movs	r2, r1
 800ef9c:	3243      	adds	r2, #67	; 0x43
 800ef9e:	9305      	str	r3, [sp, #20]
 800efa0:	9003      	str	r0, [sp, #12]
 800efa2:	9202      	str	r2, [sp, #8]
 800efa4:	7e0a      	ldrb	r2, [r1, #24]
 800efa6:	000c      	movs	r4, r1
 800efa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efaa:	2a6e      	cmp	r2, #110	; 0x6e
 800efac:	d100      	bne.n	800efb0 <_printf_i+0x1c>
 800efae:	e086      	b.n	800f0be <_printf_i+0x12a>
 800efb0:	d81f      	bhi.n	800eff2 <_printf_i+0x5e>
 800efb2:	2a63      	cmp	r2, #99	; 0x63
 800efb4:	d033      	beq.n	800f01e <_printf_i+0x8a>
 800efb6:	d808      	bhi.n	800efca <_printf_i+0x36>
 800efb8:	2a00      	cmp	r2, #0
 800efba:	d100      	bne.n	800efbe <_printf_i+0x2a>
 800efbc:	e08c      	b.n	800f0d8 <_printf_i+0x144>
 800efbe:	2a58      	cmp	r2, #88	; 0x58
 800efc0:	d04d      	beq.n	800f05e <_printf_i+0xca>
 800efc2:	0025      	movs	r5, r4
 800efc4:	3542      	adds	r5, #66	; 0x42
 800efc6:	702a      	strb	r2, [r5, #0]
 800efc8:	e030      	b.n	800f02c <_printf_i+0x98>
 800efca:	2a64      	cmp	r2, #100	; 0x64
 800efcc:	d001      	beq.n	800efd2 <_printf_i+0x3e>
 800efce:	2a69      	cmp	r2, #105	; 0x69
 800efd0:	d1f7      	bne.n	800efc2 <_printf_i+0x2e>
 800efd2:	6819      	ldr	r1, [r3, #0]
 800efd4:	6825      	ldr	r5, [r4, #0]
 800efd6:	1d0a      	adds	r2, r1, #4
 800efd8:	0628      	lsls	r0, r5, #24
 800efda:	d529      	bpl.n	800f030 <_printf_i+0x9c>
 800efdc:	6808      	ldr	r0, [r1, #0]
 800efde:	601a      	str	r2, [r3, #0]
 800efe0:	2800      	cmp	r0, #0
 800efe2:	da03      	bge.n	800efec <_printf_i+0x58>
 800efe4:	232d      	movs	r3, #45	; 0x2d
 800efe6:	9a02      	ldr	r2, [sp, #8]
 800efe8:	4240      	negs	r0, r0
 800efea:	7013      	strb	r3, [r2, #0]
 800efec:	4e6b      	ldr	r6, [pc, #428]	; (800f19c <_printf_i+0x208>)
 800efee:	270a      	movs	r7, #10
 800eff0:	e04f      	b.n	800f092 <_printf_i+0xfe>
 800eff2:	2a73      	cmp	r2, #115	; 0x73
 800eff4:	d074      	beq.n	800f0e0 <_printf_i+0x14c>
 800eff6:	d808      	bhi.n	800f00a <_printf_i+0x76>
 800eff8:	2a6f      	cmp	r2, #111	; 0x6f
 800effa:	d01f      	beq.n	800f03c <_printf_i+0xa8>
 800effc:	2a70      	cmp	r2, #112	; 0x70
 800effe:	d1e0      	bne.n	800efc2 <_printf_i+0x2e>
 800f000:	2220      	movs	r2, #32
 800f002:	6809      	ldr	r1, [r1, #0]
 800f004:	430a      	orrs	r2, r1
 800f006:	6022      	str	r2, [r4, #0]
 800f008:	e003      	b.n	800f012 <_printf_i+0x7e>
 800f00a:	2a75      	cmp	r2, #117	; 0x75
 800f00c:	d016      	beq.n	800f03c <_printf_i+0xa8>
 800f00e:	2a78      	cmp	r2, #120	; 0x78
 800f010:	d1d7      	bne.n	800efc2 <_printf_i+0x2e>
 800f012:	0022      	movs	r2, r4
 800f014:	2178      	movs	r1, #120	; 0x78
 800f016:	3245      	adds	r2, #69	; 0x45
 800f018:	7011      	strb	r1, [r2, #0]
 800f01a:	4e61      	ldr	r6, [pc, #388]	; (800f1a0 <_printf_i+0x20c>)
 800f01c:	e022      	b.n	800f064 <_printf_i+0xd0>
 800f01e:	0025      	movs	r5, r4
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	3542      	adds	r5, #66	; 0x42
 800f024:	1d11      	adds	r1, r2, #4
 800f026:	6019      	str	r1, [r3, #0]
 800f028:	6813      	ldr	r3, [r2, #0]
 800f02a:	702b      	strb	r3, [r5, #0]
 800f02c:	2301      	movs	r3, #1
 800f02e:	e065      	b.n	800f0fc <_printf_i+0x168>
 800f030:	6808      	ldr	r0, [r1, #0]
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	0669      	lsls	r1, r5, #25
 800f036:	d5d3      	bpl.n	800efe0 <_printf_i+0x4c>
 800f038:	b200      	sxth	r0, r0
 800f03a:	e7d1      	b.n	800efe0 <_printf_i+0x4c>
 800f03c:	6819      	ldr	r1, [r3, #0]
 800f03e:	6825      	ldr	r5, [r4, #0]
 800f040:	1d08      	adds	r0, r1, #4
 800f042:	6018      	str	r0, [r3, #0]
 800f044:	6808      	ldr	r0, [r1, #0]
 800f046:	062e      	lsls	r6, r5, #24
 800f048:	d505      	bpl.n	800f056 <_printf_i+0xc2>
 800f04a:	4e54      	ldr	r6, [pc, #336]	; (800f19c <_printf_i+0x208>)
 800f04c:	2708      	movs	r7, #8
 800f04e:	2a6f      	cmp	r2, #111	; 0x6f
 800f050:	d01b      	beq.n	800f08a <_printf_i+0xf6>
 800f052:	270a      	movs	r7, #10
 800f054:	e019      	b.n	800f08a <_printf_i+0xf6>
 800f056:	066d      	lsls	r5, r5, #25
 800f058:	d5f7      	bpl.n	800f04a <_printf_i+0xb6>
 800f05a:	b280      	uxth	r0, r0
 800f05c:	e7f5      	b.n	800f04a <_printf_i+0xb6>
 800f05e:	3145      	adds	r1, #69	; 0x45
 800f060:	4e4e      	ldr	r6, [pc, #312]	; (800f19c <_printf_i+0x208>)
 800f062:	700a      	strb	r2, [r1, #0]
 800f064:	6818      	ldr	r0, [r3, #0]
 800f066:	6822      	ldr	r2, [r4, #0]
 800f068:	1d01      	adds	r1, r0, #4
 800f06a:	6800      	ldr	r0, [r0, #0]
 800f06c:	6019      	str	r1, [r3, #0]
 800f06e:	0615      	lsls	r5, r2, #24
 800f070:	d521      	bpl.n	800f0b6 <_printf_i+0x122>
 800f072:	07d3      	lsls	r3, r2, #31
 800f074:	d502      	bpl.n	800f07c <_printf_i+0xe8>
 800f076:	2320      	movs	r3, #32
 800f078:	431a      	orrs	r2, r3
 800f07a:	6022      	str	r2, [r4, #0]
 800f07c:	2710      	movs	r7, #16
 800f07e:	2800      	cmp	r0, #0
 800f080:	d103      	bne.n	800f08a <_printf_i+0xf6>
 800f082:	2320      	movs	r3, #32
 800f084:	6822      	ldr	r2, [r4, #0]
 800f086:	439a      	bics	r2, r3
 800f088:	6022      	str	r2, [r4, #0]
 800f08a:	0023      	movs	r3, r4
 800f08c:	2200      	movs	r2, #0
 800f08e:	3343      	adds	r3, #67	; 0x43
 800f090:	701a      	strb	r2, [r3, #0]
 800f092:	6863      	ldr	r3, [r4, #4]
 800f094:	60a3      	str	r3, [r4, #8]
 800f096:	2b00      	cmp	r3, #0
 800f098:	db58      	blt.n	800f14c <_printf_i+0x1b8>
 800f09a:	2204      	movs	r2, #4
 800f09c:	6821      	ldr	r1, [r4, #0]
 800f09e:	4391      	bics	r1, r2
 800f0a0:	6021      	str	r1, [r4, #0]
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	d154      	bne.n	800f150 <_printf_i+0x1bc>
 800f0a6:	9d02      	ldr	r5, [sp, #8]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d05a      	beq.n	800f162 <_printf_i+0x1ce>
 800f0ac:	0025      	movs	r5, r4
 800f0ae:	7833      	ldrb	r3, [r6, #0]
 800f0b0:	3542      	adds	r5, #66	; 0x42
 800f0b2:	702b      	strb	r3, [r5, #0]
 800f0b4:	e055      	b.n	800f162 <_printf_i+0x1ce>
 800f0b6:	0655      	lsls	r5, r2, #25
 800f0b8:	d5db      	bpl.n	800f072 <_printf_i+0xde>
 800f0ba:	b280      	uxth	r0, r0
 800f0bc:	e7d9      	b.n	800f072 <_printf_i+0xde>
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	680d      	ldr	r5, [r1, #0]
 800f0c2:	1d10      	adds	r0, r2, #4
 800f0c4:	6949      	ldr	r1, [r1, #20]
 800f0c6:	6018      	str	r0, [r3, #0]
 800f0c8:	6813      	ldr	r3, [r2, #0]
 800f0ca:	062e      	lsls	r6, r5, #24
 800f0cc:	d501      	bpl.n	800f0d2 <_printf_i+0x13e>
 800f0ce:	6019      	str	r1, [r3, #0]
 800f0d0:	e002      	b.n	800f0d8 <_printf_i+0x144>
 800f0d2:	066d      	lsls	r5, r5, #25
 800f0d4:	d5fb      	bpl.n	800f0ce <_printf_i+0x13a>
 800f0d6:	8019      	strh	r1, [r3, #0]
 800f0d8:	2300      	movs	r3, #0
 800f0da:	9d02      	ldr	r5, [sp, #8]
 800f0dc:	6123      	str	r3, [r4, #16]
 800f0de:	e04f      	b.n	800f180 <_printf_i+0x1ec>
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	1d11      	adds	r1, r2, #4
 800f0e4:	6019      	str	r1, [r3, #0]
 800f0e6:	6815      	ldr	r5, [r2, #0]
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	6862      	ldr	r2, [r4, #4]
 800f0ec:	0028      	movs	r0, r5
 800f0ee:	f000 f859 	bl	800f1a4 <memchr>
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	d001      	beq.n	800f0fa <_printf_i+0x166>
 800f0f6:	1b40      	subs	r0, r0, r5
 800f0f8:	6060      	str	r0, [r4, #4]
 800f0fa:	6863      	ldr	r3, [r4, #4]
 800f0fc:	6123      	str	r3, [r4, #16]
 800f0fe:	2300      	movs	r3, #0
 800f100:	9a02      	ldr	r2, [sp, #8]
 800f102:	7013      	strb	r3, [r2, #0]
 800f104:	e03c      	b.n	800f180 <_printf_i+0x1ec>
 800f106:	6923      	ldr	r3, [r4, #16]
 800f108:	002a      	movs	r2, r5
 800f10a:	9904      	ldr	r1, [sp, #16]
 800f10c:	9803      	ldr	r0, [sp, #12]
 800f10e:	9d05      	ldr	r5, [sp, #20]
 800f110:	47a8      	blx	r5
 800f112:	1c43      	adds	r3, r0, #1
 800f114:	d03e      	beq.n	800f194 <_printf_i+0x200>
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	079b      	lsls	r3, r3, #30
 800f11a:	d415      	bmi.n	800f148 <_printf_i+0x1b4>
 800f11c:	9b07      	ldr	r3, [sp, #28]
 800f11e:	68e0      	ldr	r0, [r4, #12]
 800f120:	4298      	cmp	r0, r3
 800f122:	da39      	bge.n	800f198 <_printf_i+0x204>
 800f124:	0018      	movs	r0, r3
 800f126:	e037      	b.n	800f198 <_printf_i+0x204>
 800f128:	0022      	movs	r2, r4
 800f12a:	2301      	movs	r3, #1
 800f12c:	3219      	adds	r2, #25
 800f12e:	9904      	ldr	r1, [sp, #16]
 800f130:	9803      	ldr	r0, [sp, #12]
 800f132:	9e05      	ldr	r6, [sp, #20]
 800f134:	47b0      	blx	r6
 800f136:	1c43      	adds	r3, r0, #1
 800f138:	d02c      	beq.n	800f194 <_printf_i+0x200>
 800f13a:	3501      	adds	r5, #1
 800f13c:	68e3      	ldr	r3, [r4, #12]
 800f13e:	9a07      	ldr	r2, [sp, #28]
 800f140:	1a9b      	subs	r3, r3, r2
 800f142:	42ab      	cmp	r3, r5
 800f144:	dcf0      	bgt.n	800f128 <_printf_i+0x194>
 800f146:	e7e9      	b.n	800f11c <_printf_i+0x188>
 800f148:	2500      	movs	r5, #0
 800f14a:	e7f7      	b.n	800f13c <_printf_i+0x1a8>
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d0ad      	beq.n	800f0ac <_printf_i+0x118>
 800f150:	9d02      	ldr	r5, [sp, #8]
 800f152:	0039      	movs	r1, r7
 800f154:	f7f1 f85e 	bl	8000214 <__aeabi_uidivmod>
 800f158:	5c73      	ldrb	r3, [r6, r1]
 800f15a:	3d01      	subs	r5, #1
 800f15c:	702b      	strb	r3, [r5, #0]
 800f15e:	2800      	cmp	r0, #0
 800f160:	d1f7      	bne.n	800f152 <_printf_i+0x1be>
 800f162:	2f08      	cmp	r7, #8
 800f164:	d109      	bne.n	800f17a <_printf_i+0x1e6>
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	07db      	lsls	r3, r3, #31
 800f16a:	d506      	bpl.n	800f17a <_printf_i+0x1e6>
 800f16c:	6863      	ldr	r3, [r4, #4]
 800f16e:	6922      	ldr	r2, [r4, #16]
 800f170:	4293      	cmp	r3, r2
 800f172:	dc02      	bgt.n	800f17a <_printf_i+0x1e6>
 800f174:	2330      	movs	r3, #48	; 0x30
 800f176:	3d01      	subs	r5, #1
 800f178:	702b      	strb	r3, [r5, #0]
 800f17a:	9b02      	ldr	r3, [sp, #8]
 800f17c:	1b5b      	subs	r3, r3, r5
 800f17e:	6123      	str	r3, [r4, #16]
 800f180:	9b05      	ldr	r3, [sp, #20]
 800f182:	aa07      	add	r2, sp, #28
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	0021      	movs	r1, r4
 800f188:	9b04      	ldr	r3, [sp, #16]
 800f18a:	9803      	ldr	r0, [sp, #12]
 800f18c:	f7ff fe94 	bl	800eeb8 <_printf_common>
 800f190:	1c43      	adds	r3, r0, #1
 800f192:	d1b8      	bne.n	800f106 <_printf_i+0x172>
 800f194:	2001      	movs	r0, #1
 800f196:	4240      	negs	r0, r0
 800f198:	b009      	add	sp, #36	; 0x24
 800f19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f19c:	0800ff11 	.word	0x0800ff11
 800f1a0:	0800ff22 	.word	0x0800ff22

0800f1a4 <memchr>:
 800f1a4:	b2c9      	uxtb	r1, r1
 800f1a6:	1882      	adds	r2, r0, r2
 800f1a8:	4290      	cmp	r0, r2
 800f1aa:	d101      	bne.n	800f1b0 <memchr+0xc>
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	4770      	bx	lr
 800f1b0:	7803      	ldrb	r3, [r0, #0]
 800f1b2:	428b      	cmp	r3, r1
 800f1b4:	d0fb      	beq.n	800f1ae <memchr+0xa>
 800f1b6:	3001      	adds	r0, #1
 800f1b8:	e7f6      	b.n	800f1a8 <memchr+0x4>

0800f1ba <_realloc_r>:
 800f1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1bc:	0007      	movs	r7, r0
 800f1be:	000d      	movs	r5, r1
 800f1c0:	0016      	movs	r6, r2
 800f1c2:	2900      	cmp	r1, #0
 800f1c4:	d105      	bne.n	800f1d2 <_realloc_r+0x18>
 800f1c6:	0011      	movs	r1, r2
 800f1c8:	f7ff fbc6 	bl	800e958 <_malloc_r>
 800f1cc:	0004      	movs	r4, r0
 800f1ce:	0020      	movs	r0, r4
 800f1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1d2:	2a00      	cmp	r2, #0
 800f1d4:	d103      	bne.n	800f1de <_realloc_r+0x24>
 800f1d6:	f7ff fcc5 	bl	800eb64 <_free_r>
 800f1da:	0034      	movs	r4, r6
 800f1dc:	e7f7      	b.n	800f1ce <_realloc_r+0x14>
 800f1de:	f000 f812 	bl	800f206 <_malloc_usable_size_r>
 800f1e2:	002c      	movs	r4, r5
 800f1e4:	42b0      	cmp	r0, r6
 800f1e6:	d2f2      	bcs.n	800f1ce <_realloc_r+0x14>
 800f1e8:	0031      	movs	r1, r6
 800f1ea:	0038      	movs	r0, r7
 800f1ec:	f7ff fbb4 	bl	800e958 <_malloc_r>
 800f1f0:	1e04      	subs	r4, r0, #0
 800f1f2:	d0ec      	beq.n	800f1ce <_realloc_r+0x14>
 800f1f4:	0029      	movs	r1, r5
 800f1f6:	0032      	movs	r2, r6
 800f1f8:	f7ff fb8a 	bl	800e910 <memcpy>
 800f1fc:	0029      	movs	r1, r5
 800f1fe:	0038      	movs	r0, r7
 800f200:	f7ff fcb0 	bl	800eb64 <_free_r>
 800f204:	e7e3      	b.n	800f1ce <_realloc_r+0x14>

0800f206 <_malloc_usable_size_r>:
 800f206:	1f0b      	subs	r3, r1, #4
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	1f18      	subs	r0, r3, #4
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	da01      	bge.n	800f214 <_malloc_usable_size_r+0xe>
 800f210:	580b      	ldr	r3, [r1, r0]
 800f212:	18c0      	adds	r0, r0, r3
 800f214:	4770      	bx	lr
	...

0800f218 <_init>:
 800f218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21a:	46c0      	nop			; (mov r8, r8)
 800f21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f21e:	bc08      	pop	{r3}
 800f220:	469e      	mov	lr, r3
 800f222:	4770      	bx	lr

0800f224 <_fini>:
 800f224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f226:	46c0      	nop			; (mov r8, r8)
 800f228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f22a:	bc08      	pop	{r3}
 800f22c:	469e      	mov	lr, r3
 800f22e:	4770      	bx	lr
